<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[艾克斯の編碼者]]></title>
  <subtitle><![CDATA[一個偽宅级别的蒟蒻碼畜。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xcoder.in/"/>
  <updated>2016-07-12T11:26:19.000Z</updated>
  <id>http://xcoder.in/</id>
  
  <author>
    <name><![CDATA[小鳥遊死月]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[跟我一起部署和定製 CNPM——基礎部署]]></title>
    <link href="http://xcoder.in/2016/07/09/lets-cnpm-base-deploy/"/>
    <id>http://xcoder.in/2016/07/09/lets-cnpm-base-deploy/</id>
    <published>2016-07-09T11:19:22.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>本章會介紹 CNPM 的基礎部署方法。</p>
<blockquote>
<p>該文章所對應的 cnpm 目標版本爲 <a href="https://github.com/cnpm/cnpmjs.org/tree/2.12.2" target="_blank" rel="external">v2.12.2</a>，上下浮動一些兼容的版本問題也都不是特別大。</p>
</blockquote>
<h2 id="準備">準備</h2><p>想要部署 CNPM，你需要做以下的一些準備。</p>
<ol>
<li>部署的宿體，如服務器、雲主機、自己的電腦等；</li>
<li>數據庫，支持 MySQL、PostgreSQL、MariaDB，如果使用 SQLite 則無需準備；</li>
<li>Git 客戶端（推薦）。</li>
</ol>
<h2 id="開始部署">開始部署</h2><h3 id="克隆_CNPM">克隆 CNPM</h3><p>首先在本地選擇一個目錄，比如我將它選擇在 <code>/usr/app</code>，然後預想 CNPM 的目錄爲 <code>/usr/app/cnpm</code>，那麼需要在終端 <code>$ cd /usr/app</code>。</p>
<p>接下去執行 Git 指令將 CNPM 克隆到相應目錄。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/cnpm/cnpmjs.org.git</span><br></pre></td></tr></table></figure>
<h4 id="Windows_用戶">Windows 用戶</h4><p>Windows 用戶也可以用類似 <a href="https://www.cygwin.com/" target="_blank" rel="external">Cygwin</a>、<a href="http://www.mingw.org/" target="_blank" rel="external">MinGW</a>、<a href="https://msdn.microsoft.com/en-us/powershell" target="_blank" rel="external">Powershell</a> 甚至直接是 Command 等來運行 <a href="https://git-scm.com/download/win" target="_blank" rel="external">Git</a>。</p>
<p>當然也可以直接下載一些 GUI 工具來克隆，如 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a>。</p>
<h4 id="非_Git_用戶">非 Git 用戶</h4><p>跑到 CNPM 的 Release 頁面，選擇相應的版本下載，比如這裏會選擇 <a href="https://github.com/cnpm/cnpmjs.org/releases/tag/2.12.2" target="_blank" rel="external">v2.12.2</a> 版。</p>
<p>下載完畢後將文件夾解壓到相應目錄即可。</p>
<h3 id="安裝依賴">安裝依賴</h3><p>安裝依賴其實就是一個 <code>npm install</code>，不過 CNPM 把該指令已經寫到 Makefile 裏面了，所以直接執行下面的命令就好了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<p>當然萬一你是 Windows 用戶或者不會 <code>make</code>，那麼還是要用 <code>npm install</code>。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --build-from-source --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件">修改配置文件</h3><p>新建一份 <code>config/config.js</code> 文件，並且寫入如下的骨架：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在這裏面輸入你需要的鍵值對。</p>
<p>這裏將會列舉一些常用的配置項，其餘的一些配置項請自行參考 <a href="https://github.com/cnpm/cnpmjs.org/blob/2.12.2/config/index.js" target="_blank" rel="external">config/index.js</a> 文件。</p>
<h4 id="配置字段參考">配置字段參考</h4><ul>
<li><code>enableCluster</code>：是否啓用 <strong>cluster-worker</strong> 模式啓動服務，默認 <code>false</code>，生產環節推薦爲 <code>true</code>;</li>
<li><code>registryPort</code>：API 專用的 registry 服務端口，默認 <code>7001</code>；</li>
<li><code>webPort</code>：Web 服務端口，默認 <code>7002</code>；</li>
<li><code>bindingHost</code>：監聽綁定的 Host，默認爲 <code>127.0.0.1</code>，如果外面架了一層本地的 <strong>Nginx</strong> 反向代理或者 <strong>Apache</strong> 反向代理的話推薦不用改；</li>
<li><code>sessionSecret</code>：<strong>session</strong> 用的鹽；</li>
<li><code>logdir</code>：日誌目錄；</li>
<li><code>uploadDir</code>：臨時上傳文件目錄；</li>
<li><code>viewCache</code>：視圖模板緩存是否開啓，默認爲 <code>false</code>；</li>
<li><code>enableCompress</code>：是否開啓 <strong>gzip</strong> 壓縮，默認爲 <code>false</code>；</li>
<li><code>admins</code>：管理員們，這是一個 <code>JSON Object</code>，對應各鍵名爲各管理員的用戶名，鍵值爲其郵箱，默認爲 <code>{ fengmk2: &#39;fengmk2@gmail.com&#39;, admin: &#39;admin@cnpmjs.org&#39;, dead_horse: &#39;dead_horse@qq.com&#39; }</code>；</li>
<li><code>logoURL</code>：<strong>Logo</strong> 地址，不過對於我這個已經把 CNPM 前端改得面目全非的人來說已經忽略了這個配置了；</li>
<li><code>adBanner</code>：廣告 Banner 的地址；</li>
<li><code>customReadmeFile</code>：實際上我們看到的 <a href="http://cnpmjs.org" target="_blank" rel="external">cnpmjs.org</a> 首頁中間一大堆冗長的介紹是一個 Markdown 文件轉化而成的，你可以設置該項來自行替換這個文件；</li>
<li><code>customFooter</code>：自定義頁腳模板；</li>
<li><code>npmClientName</code>：默認爲 <code>cnpm</code>，如果你有自己開發或者 fork 的 npm 客戶端的話請改成自己的 CLI 命令，這個應該會在一些頁面的說明處替換成你所寫的；</li>
<li><code>backupFilePrefix</code>：備份目錄；</li>
<li><code>database</code>：數據庫相關配置，爲一個對象，默認如果不配置將會是一個 <code>~/.cnpmjs.org/data.sqlite</code> 的 SQLite；<ul>
<li><code>db</code>：數據的庫名；</li>
<li><code>username</code>：數據庫用戶名；</li>
<li><code>password</code>：數據庫密碼；</li>
<li><code>dialect</code>：數據庫適配器，可選 <code>&quot;mysql&quot;</code>、<code>&quot;sqlite&quot;</code>、<code>&quot;postgres&quot;</code>、<code>&quot;mariadb&quot;</code>，默認爲 <code>&quot;sqlite&quot;</code>；</li>
<li><code>hsot</code>：數據庫地址；</li>
<li><code>port</code>：數據庫端口；</li>
<li><code>pool</code>：數據庫連接池相關配置，爲一個對象；<ul>
<li><code>maxConnections</code>：最大連接數，默認爲 <code>10</code>；</li>
<li><code>minConnections</code>：最小連接數，默認爲 <code>0</code>；</li>
<li><code>maxIdleTime</code>：單條鏈接最大空閒時間，默認爲 <code>30000</code> 毫秒；</li>
</ul>
</li>
<li><code>storege</code>：僅對 SQLite 配置有效，數據庫地址，默認爲 <code>~/.cnpmjs/data.sqlite</code>；</li>
</ul>
</li>
<li><code>nfs</code>：包文件系統處理對象，爲一個 Node.js 對象，默認是 <a href="">fs-cnpm</a> 這個包，並且配置在 <code>~/.cnpmjs/nfs</code> 目錄下，也就是說默認所有同步的包都會被放在這個目錄下；開發者可以使用別的一些文件系統插件（如上傳到又拍雲等）,又或者自己去按接口開發一個邏輯層，這些都是後話了；</li>
<li><code>registryHost</code>：暫時還未試過，我猜是用於 Web 頁面顯示用的，默認爲 <code>r.cnpmjs.org</code>；</li>
<li><code>enablePrivate</code>：是否開啓私有模式，默認爲 <code>false</code>；<ul>
<li>如果是私有模式則只有管理員能發佈包，其它人只能從源站同步包；</li>
<li>如果是非私有模式則所有登錄用戶都能發佈包；</li>
</ul>
</li>
<li><code>scopes</code>：非管理員發佈包的時候只能用以 <code>scopes</code> 裏面列舉的命名空間爲前綴來發布，如果沒設置則無法發佈，也就是說這是一個必填項，默認爲 <code>[ &#39;@cnpm&#39;, &#39;@cnpmtest&#39;, &#39;@cnpm-test&#39; ]</code>，據蘇千大大解釋是爲了便於管理以及讓公司的員工自覺按需發佈；更多關於 NPM scope 的說明請參見 <a href="https://docs.npmjs.com/misc/scope" target="_blank" rel="external">npm-scope</a>；</li>
<li><code>privatePackages</code>：就如該配置項的註釋所述，出於歷史包袱的原因，有些已經存在的私有包（可能之前是用 Git 的方式安裝的）並沒有以命名空間的形式來命名，而這種包本來是無法上傳到 CNPM 的，這個配置項數組就是用來加這些例外白名單的，默認爲一個空數組；</li>
<li><code>sourceNpmRegistry</code>：更新源 NPM 的 registry 地址，默認爲 <code>https://registry.npm.taobao.org</code>；</li>
<li><code>sourceNpmRegistryIsCNpm</code>：源 registry 是否爲 CNPM，默認爲 <code>true</code>，如果你使用的源是官方 NPM 源，請將其設爲 <code>false</code>；</li>
<li><code>syncByInstall</code>：如果安裝包的時候發現包不存在，則嘗試從更新源同步，默認爲 <code>true</code>；</li>
<li><code>syncModel</code>：更新模式（不過我覺得是個 <code>typo</code>），有下面幾種模式可以選擇，默認爲 <code>&quot;none&quot;</code>;<ul>
<li><code>&quot;none&quot;</code>：永不同步，只管理私有用戶上傳的包，其它源包會直接從源站獲取；</li>
<li><code>&quot;exist&quot;</code>：定時同步已經存在於數據庫的包；</li>
<li><code>&quot;all&quot;</code>：定時同步所有源站的包；</li>
</ul>
</li>
<li><code>syncInterval</code>：同步間隔，默認爲 <code>&quot;10m&quot;</code> 即十分鐘；</li>
<li><code>syncDevDependencies</code>：是否同步每個包裏面的 <code>devDependencies</code> 包們，默認爲 <code>false</code>；</li>
<li><code>badgeSubject</code>：包的 <strong>badge</strong> 顯示的名字，默認爲 <code>cnpm</code>；</li>
<li><code>userService</code>：用戶驗證接口，默認爲 <code>null</code>，即無用戶相關功能也就是無法有用戶去上傳包，該部分需要自己實現接口功能並配置，如與公司的 <strong>Gitlab</strong> 相對接，這也是後話了；</li>
<li><code>alwaysAuth</code>：是否始終需要用戶驗證，即便是 <code>$ cnpm install</code> 等命令；</li>
<li><code>httpProxy</code>：代理地址設置，用於你在牆內源站在牆外的情況。</li>
</ul>
<h4 id="一個可能的配置">一個可能的配置</h4><p>下面給出一個樣例配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    enableCluster: <span class="literal">true</span>,</span><br><span class="line">    database: &#123;</span><br><span class="line">        db: <span class="string">"snpm"</span>,</span><br><span class="line">        username: <span class="string">"username"</span>,</span><br><span class="line">        password: <span class="string">"password"</span>,</span><br><span class="line"></span><br><span class="line">        dialect: <span class="string">"mysql"</span>,</span><br><span class="line">        host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        port: <span class="number">3306</span></span><br><span class="line">    &#125;,</span><br><span class="line">    enablePrivate: <span class="literal">false</span>,</span><br><span class="line">    admins: &#123;</span><br><span class="line">        xadillax: <span class="string">"i@2333.moe"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    syncModel: <span class="string">"exist"</span>,</span><br><span class="line">    nfs: <span class="built_in">require</span>(<span class="string">'upyun-cnpm'</span>).create(&#123;</span><br><span class="line">        bucket: <span class="string">"your bucket"</span>,</span><br><span class="line">        oprator: <span class="string">"your id"</span>,</span><br><span class="line">        password: <span class="string">"your secret"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    scopes: [ <span class="string">'@cheniu'</span>, <span class="string">'@souche'</span>, <span class="string">'@souche-f2e'</span> ],</span><br><span class="line">    badgeSubject: <span class="string">'snpm'</span>,</span><br><span class="line">    privatePackages: [ <span class="string">'snpm'</span> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的配置包文件系統層用的是 <a href="https://github.com/cnpm/upyun-cnpm" target="_blank" rel="external">upyun-cnpm</a> 插件，需要在 CNPM 源碼根目錄執行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save <span class="operator">-d</span> upyun-cnpm</span><br></pre></td></tr></table></figure></p>
<p>這個時候你的 <code>package.json</code> 就有更改與源 Repo 不一致了，如果是 Git 克隆的用戶在以後升級更新系統的時候稍稍注意一下可能的衝突即可。</p>
</blockquote>
<h4 id="官方_NFS_插件">官方 NFS 插件</h4><p>下面給出幾個官方的 NFS 插件：</p>
<ul>
<li><a href="https://github.com/cnpm/upyun-cnpm" target="_blank" rel="external">upyun-cnpm</a>：包本體存在又拍雲的插件；</li>
<li><a href="https://github.com/cnpm/fs-cnpm" target="_blank" rel="external">fs-cnpm</a>：包本體存在本地的插件；</li>
<li><a href="https://github.com/cnpm/sfs-client" target="_blank" rel="external">sfs-client</a>：包本體存在 <a href="https://github.com/cnpm/sfs" target="_blank" rel="external">SFS</a>（Simple FIle Store）插件；</li>
<li><a href="https://github.com/cnpm/qn-cnpm" target="_blank" rel="external">qn-cnpm</a>：包本體存在七牛的插件；</li>
<li><a href="https://github.com/cnpm/oss-cnpm" target="_blank" rel="external">oss-cnpm</a>：包本體存在阿里雲 OSS 的插件。</li>
</ul>
<p>以後官方如果有一些新的插件進來，這裏可能不會更新了，請自行去 <a href="https://github.com/cnpm/cnpmjs.org/wiki/NFS-Guide#present-storage-wrappers" target="_blank" rel="external">NFS Storage Wrappers</a> 獲取最新的 NFS 插件們。</p>
<h3 id="初始化數據庫">初始化數據庫</h3><p>如果你使用的是 SQLite 的話，數據庫是自動就好了的，可以忽略該步。</p>
<p>其它數據庫需要自行導入初始數據庫結構。</p>
<p>初始數據庫腳本在 <strong>docs/db.sql</strong> 裏面，你可以用一些 GUI 工具將數據導入，也可以直接進入命令行導入。</p>
<p>比如你用的是 MySQL，就可以在本機操作 MySQL。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u yourname -p</span><br><span class="line">mysql&gt; use cnpmjs;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> docs/db.sql</span><br></pre></td></tr></table></figure>
<h3 id="啓動服務">啓動服務</h3><p>搞好配置之後就可以直接啓動服務了。</p>
<h4 id="簡單啓動">簡單啓動</h4><p>最簡單的辦法也是我現在正在用的方法就是直接用 <code>node</code> 執行一下入口文件就好了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node dispatch.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其實我是在 <a href="https://tmux.github.io/" target="_blank" rel="external">tmux</a> 裏面執行上面的指令的。</p>
</blockquote>
<h4 id="官方腳本啓動">官方腳本啓動</h4><p>官方的其它一些指令，比如你可以用 NPM 的 script 來運行。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 CNPM 裏面，npm script 還有下面幾種指令</p>
<ul>
<li><code>npm run dev</code>：調試模式啓動；</li>
<li><code>npm run test</code>：跑測試；</li>
<li><code>npm run start</code>：啓動 CNPM；</li>
<li><code>npm run status</code>：查看 CNPM 啓動狀態；</li>
<li><code>npm run stop</code>：停止 CNPM。</li>
</ul>
</blockquote>
<h3 id="小結">小結</h3><p>本文介紹了一些 CNPM 基礎的部署方法，基本上能達到最小可用狀態。</p>
<p>如果想要進階定製一些 CNPM 的功能，請期待後續吧。ξ( ✿＞◡❛)</p>
<p>以及一些寫得不好和不對的地方，請多多指正哦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本章會介紹 CNPM 的基礎部署方法。</p>
<blockquote>
<p>該文章所對應的 cnpm 目標版本爲 <a href="https://github.com/cnpm/cnpmjs.org/tree/2.12.2" target="_blank" rel="]]>
    </summary>
    
      <category term="CNPM" scheme="http://xcoder.in/tags/CNPM/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟我一起部署和定製 CNPM——索引]]></title>
    <link href="http://xcoder.in/2016/07/08/lets-cnpm-toc/"/>
    <id>http://xcoder.in/2016/07/08/lets-cnpm-toc/</id>
    <published>2016-07-08T11:14:58.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>本系列文章將會基於 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">cnpm</a> 部署搭建一套屬於自己（或者公司）的內部私有 NPM 系統。</p>
<h2 id="什麼是_CNPM">什麼是 CNPM</h2><p><a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">cnpm</a> 是 Node.js 中國社區成員主導的一個私有 NPM 開源項目，可以用於部署私有 NPM、公共 NPM 鏡像等。</p>
<h2 id="閱讀對象">閱讀對象</h2><ul>
<li>有一定 Node.js 後端基礎</li>
<li>需要有一套私有 NPM</li>
<li>想要研究 CNPM 實現</li>
</ul>
<h2 id="目錄">目錄</h2><ol>
<li><a href="lets-cnpm-base-deploy">基礎部署</a></li>
<li>To be continued</li>
</ol>
<h2 id="貢獻">貢獻</h2><p>你可以對本系列文章進行勘誤或者更新，直接提交 PR 或者在博客文章後方留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本系列文章將會基於 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">cnpm</a> 部署搭建一套屬於自己（或者公司）的內部私有 NPM 系統。</p>
<h2 id="]]>
    </summary>
    
      <category term="CNPM" scheme="http://xcoder.in/tags/CNPM/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讓我們一起來起花名吧]]></title>
    <link href="http://xcoder.in/2016/02/24/lets-hua/"/>
    <id>http://xcoder.in/2016/02/24/lets-hua/</id>
    <published>2016-02-24T05:40:36.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>起因是我一個叫『小龍』的好基友由於某些原因離職去了一家跟阿里一樣有着『花名文化』的公司，於是開始爲花名犯愁。</p>
<p>結合之前妹紙『弍紓』在起花名的時候也遇到了同樣的困擾，於是決定用 Node.js 寫個『一本正經亂起花名』的程序。</p>
<h2 id="準備">準備</h2><h3 id="Chinese_Random_Name">Chinese Random Name</h3><p>首先起花名的原理就是胡亂隨機一串字出來胡亂拼。</p>
<p>於是準備應該有 <a href="https://github.com/XadillaX/chinese-random-name" target="_blank" rel="external">chinese-random-name</a>，一個隨機生成中文名的包。</p>
<p>使用它很簡單，先把它 <code>require</code> 進來：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomName = <span class="built_in">require</span>(<span class="string">"chinese-random-name"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="基本用法">基本用法</h4><p>如果你需要隨機生成一個名字只需要 <code>randomName.generate()</code> 就可以了；如果你要隨機一個姓那麼就 <code>randomName.surnames.getOne()</code>；如果你只需要獲得名字，這裏面就有點門道了。</p>
<h4 id="高級用法">高級用法</h4><p>你可以隨機生成一個名（不帶姓的） <code>randomName.names.get()</code>；你也可以指定名字的字數，一二三：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">randomName.names.get1();</span><br><span class="line">randomName.names.get2();</span><br><span class="line">randomName.names.get3();</span><br></pre></td></tr></table></figure>
<p>或者！</p>
<p>又或者！</p>
<p>然後或者！</p>
<p>你可以指定每個字的五行哦！</p>
<p>什麼意思呢？比如你想給孩子起個名，然後孩子命裏五行缺金，那麼就可以：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randomName.names.get2(<span class="string">"金金"</span>);</span><br></pre></td></tr></table></figure>
<p>然後你就可能得到一個『<strong>紫銓</strong>』，兩個字都是屬金的。那麼如果你孩子姓李，就叫李紫銓；如果孩子姓王，就叫王紫銓；如果姓愛新覺羅，那麼就叫愛新覺羅·紫銓。</p>
<p>有木有想給我裝得這個逼打個 82 分呢？剩下的就交給 666 吧。(ง •̀_•́)ง</p>
<h3 id="Nomnom">Nomnom</h3><p>這個包是用來解析命令行參數的。雖然市面上有挺多別的的，比如 <a href="https://www.npmjs.com/package/commander" target="_blank" rel="external">commander</a> 等，不過我還是最習慣 <a href="https://www.npmjs.com/package/nomnom" target="_blank" rel="external">nomnom</a>，用稱手了就不想換了。</p>
<p>雖然它的 GitHub Repo 下面有這麼一段話。</p>
<blockquote>
<p>Nomnom is deprecated. Check out <a href="https://github.com/tj/commander.js" target="_blank" rel="external">https://github.com/tj/commander.js</a>, which should have most, if not all of the capability that nomnom had. Thank you!</p>
</blockquote>
<p>不過再怎麼說 nomnom 也是當年 <a href="https://github.com/substack/node-optimist" target="_blank" rel="external">substack</a> 大神推薦的啊。(ಡωಡ)</p>
<h3 id="Colorful">Colorful</h3><p>這個包是用來上色的。</p>
<p>畢竟五行是有顏色的哇。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">"colorful"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(color.red(<span class="string">"（*/∇＼*）"</span>));</span><br></pre></td></tr></table></figure>
<p>那麼在你的終端就好看到一個紅色的 <code>（*/∇＼*）</code>。</p>
<h3 id="Is_Chinese">Is Chinese</h3><p>用來判斷是不是中文的包。</p>
<p>作爲一個起名的命令行程序，你總得好好傳參才行吧，總不能你隨便傳個鹹鴨蛋🐣我也好好處理吧。</p>
<p>於是就用 <a href="https://www.npmjs.com/package/is-chinese" target="_blank" rel="external">is-chinese</a> 來判斷某個字符串是不是純中文。</p>
<p>這個包是由前阿里小夥伴，CNode 站長<a href="https://github.com/alsotang" target="_blank" rel="external">唐少</a>寫的。</p>
<p>用起來也很簡單，只要 <code>isChinese(&quot;什麼你要判斷什麼&quot;)</code> 就可以了。</p>
<h3 id="集合">集合</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save <span class="operator">-d</span> chinese-random-name</span><br><span class="line">$ npm install --save <span class="operator">-d</span> nomnom</span><br><span class="line">$ npm install --save <span class="operator">-d</span> colorful</span><br><span class="line">$ npm install --save <span class="operator">-d</span> is-chinese</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>chinese-random-name</strong>: <a href="https://github.com/XadillaX/chinese-random-name" target="_blank" rel="external">https://github.com/XadillaX/chinese-random-name</a></li>
<li><strong>nomnom</strong>: <a href="https://github.com/harthur/nomnom" target="_blank" rel="external">https://github.com/harthur/nomnom</a></li>
<li><strong>colorful</strong>: <a href="https://github.com/lepture/colorful" target="_blank" rel="external">https://github.com/lepture/colorful</a></li>
<li><strong>is-chinese</strong>: <a href="https://github.com/alsotang/is-chinese" target="_blank" rel="external">https://github.com/alsotang/is-chinese</a></li>
</ul>
<h2 id="開工">開工</h2><p>其結果在<a href="https://github.com/BoogeeDoo/hua" target="_blank" rel="external">這裏</a>。</p>
<h3 id="解析命令行參數">解析命令行參數</h3><p>首先效果是這樣的：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ hua --help</span><br><span class="line"></span><br><span class="line">Usage: hua [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-p PREFIX, --prefix PREFIX          to specify a prefix.</span><br><span class="line"><span class="operator">-s</span> SUFFIX, --suffix SUFFIX          to specify a suffix.</span><br><span class="line">-<span class="number">5</span> WUXING, --five-elements WUXING   the file elements (Wuxing) of huaming.</span><br><span class="line">-c COUNT, --count COUNT             the count of huaming  [<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>使用者可以自己想一個前綴或者後綴，然後自定義（或者也可以不指定）兩個字的五行，以及指定一次性生成多少個花名。</p>
<p>比如想要生成以 <code>龍</code> 字爲前綴的花名，就可以 <code>$ hua --prefix 龍</code>，得到結果可以是這樣的：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 龍幼</span><br><span class="line">* 龍巡</span><br><span class="line">* 龍躬</span><br><span class="line">* 龍仇</span><br><span class="line">* 龍錘</span><br><span class="line">* 龍鎰</span><br><span class="line">* 龍拾</span><br><span class="line">* 龍央</span><br><span class="line">* 龍些</span><br><span class="line">* 龍悠</span><br></pre></td></tr></table></figure>
<p>如果想兩個字分別所屬金和誰，就可以 <code>$ hua --five-elements 金水</code> 來起花名：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 倩娥</span><br><span class="line">* 雀效</span><br><span class="line">* 黍棓</span><br><span class="line">* 奼溶</span><br><span class="line">* 馨沙</span><br><span class="line">* 宮閒</span><br><span class="line">* 裕混</span><br><span class="line">* 俗封</span><br><span class="line">* 綢娥</span><br><span class="line">* 瑞淦</span><br></pre></td></tr></table></figure>
<p>想要得到這樣一個命令行參數，我們可以用 <code>nomnom</code> 來解決。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts = <span class="built_in">require</span>(<span class="string">"nomnom"</span>)</span><br><span class="line">    .script(<span class="string">"hua"</span>)</span><br><span class="line">    .option(<span class="string">"prefix"</span>, &#123;</span><br><span class="line">        abbr: <span class="string">"p"</span>,</span><br><span class="line">        help: <span class="string">"to specify a prefix."</span>,</span><br><span class="line">        metavar: <span class="string">"PREFIX"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .option(<span class="string">"suffix"</span>, &#123;</span><br><span class="line">        abbr: <span class="string">"s"</span>,</span><br><span class="line">        help: <span class="string">"to specify a suffix."</span>,</span><br><span class="line">        metavar: <span class="string">"SUFFIX"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .option(<span class="string">"five-elements"</span>, &#123;</span><br><span class="line">        abbr: <span class="string">"5"</span>,</span><br><span class="line">        help: <span class="string">"the file elements (Wuxing) of huaming."</span>,</span><br><span class="line">        metavar: <span class="string">"WUXING"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .option(<span class="string">"count"</span>, &#123;</span><br><span class="line">        abbr: <span class="string">"c"</span>,</span><br><span class="line">        help: <span class="string">"the count of huaming"</span>,</span><br><span class="line">        metavar: <span class="string">"COUNT"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">10</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .parse();</span><br></pre></td></tr></table></figure>
<p>上面的這段代碼分別指定了腳本名爲 <code>hua</code>，然後指定了 <code>prefix</code> / <code>suffix</code> / <code>five-elements</code> 和 <code>count</code> 四個參數，並把解析好的參數賦值給 <code>opts</code> 變量。</p>
<blockquote>
<p>由於我希望這個包在通常的 Node.js 下都可以跑，所以沒有用 <code>let</code> 之類的東西。</p>
</blockquote>
<h3 id="花名類">花名類</h3><p>接下去要寫一個花名類，這個類不只是可以在 CLI 之中使用，也可以讓別人作爲一個包來引入。然後實際上這個類就是要對 <code>chinese-random-name</code> 進行一個封裝。</p>
<h4 id="構造函數">構造函數</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hua = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先這個 <code>options</code> 就是之前由 <code>nomnom</code> 解析出來的參數，當然有些參數是可選的。</p>
<p>接下去我們要在構造函數也就是 <code>Hua</code> 裏面格式化前綴或者後綴（如果有的話），將他們弄成只有一個漢字的格式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(options.prefix) &#123;</span><br><span class="line">    options.prefix = options.prefix[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!isChinese(options.prefix)) <span class="keyword">delete</span> options.prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(options.suffix) &#123;</span><br><span class="line">    options.suffix = options.suffix[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!isChinese(options.suffix)) <span class="keyword">delete</span> options.suffix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前後綴弄好之後要對五行進行分析了。</p>
<p>如果有前後綴那麼忽略五行參數。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(options.prefix &amp;&amp; options.suffix) &#123;</span><br><span class="line">    <span class="keyword">delete</span> options[<span class="string">"file-elements"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有前綴，那麼忽略傳進來的五行的第一個五行；如果有後綴那麼忽略第二個字的五行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wuxing = <span class="string">"金木水火土"</span>;</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(options.prefix) &#123;</span><br><span class="line">    options[<span class="string">"five-elements"</span>] = options[<span class="string">"five-elements"</span>].substr(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(-<span class="number">1</span> === wuxing.indexOf(options[<span class="string">"five-elements"</span>])) &#123;</span><br><span class="line">        <span class="keyword">delete</span> options[<span class="string">"five-elements"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(options.suffix) &#123;</span><br><span class="line">    options[<span class="string">"five-elements"</span>] = options[<span class="string">"five-elements"</span>].substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(-<span class="number">1</span> === wuxing.indexOf(options[<span class="string">"five-elements"</span>])) &#123;</span><br><span class="line">        <span class="keyword">delete</span> options[<span class="string">"five-elements"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果前後綴都沒有，那麼要格式化一下該參數，使其僅剩兩個有效的五行漢字。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    options[<span class="string">"five-elements"</span>] = options[<span class="string">"five-elements"</span>].substr(<span class="number">0</span>, <span class="number">2</span>).split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; options[<span class="string">"five-elements"</span>].length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果是無效五行或者冰沒有這個字的話，隨機一個五行出來</span></span><br><span class="line">        <span class="keyword">if</span>(-<span class="number">1</span> === wuxing.indexOf(options[<span class="string">"five-elements"</span>][i])) &#123;</span><br><span class="line">            options[<span class="string">"five-elements"</span>][i] = wuxing[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字數不夠，隨機來湊</span></span><br><span class="line">    <span class="keyword">while</span>(options[<span class="string">"five-elements"</span>].length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        options[<span class="string">"five-elements"</span>].push(wuxing[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options[<span class="string">"five-elements"</span>] = options[<span class="string">"five-elements"</span>].join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的這些邏輯都寫在構造函數裏面，如果想要完整的構造函數可以看 <code>hua</code> 的 <a href="https://github.com/BoogeeDoo/hua/blob/09f1bc7eae14faaa9e881392d3811a6073d94b1c/lib/hua.js#L14-L55" target="_blank" rel="external">hua.js</a> 文件。</p>
<h4 id="生成一個花名">生成一個花名</h4><p>生成一個花名其實就是調用 <code>randomName.names.get</code> 系列函數們了。</p>
<ul>
<li><strong>有前後綴：</strong>直接返回前綴加後綴。</li>
<li><strong>有前綴：</strong>返回前綴加 <code>get1</code>。</li>
<li><strong>有後綴：</strong>返回 <code>get1</code> 加後綴。</li>
<li><strong>沒有前後綴：</strong>直接返回 <code>get2</code>。</li>
</ul>
<blockquote>
<p><strong>注意：</strong>以上情況都會傳進（哪怕是 <code>undefined</code>）五行參數。</p>
</blockquote>
<p>所以 <code>generateOne</code> 函數長<a href="https://github.com/BoogeeDoo/hua/blob/09f1bc7eae14faaa9e881392d3811a6073d94b1c/lib/hua.js#L67-L83" target="_blank" rel="external">這樣</a>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Hua.prototype.generateOne = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.options.prefix &amp;&amp; <span class="keyword">this</span>.options.suffix) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.options.prefix + <span class="keyword">this</span>.options.suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.options.prefix) &#123;</span><br><span class="line">        debug(<span class="keyword">this</span>.options[<span class="string">"five-elements"</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.options.prefix + randomName.names.get1(<span class="keyword">this</span>.options[<span class="string">"five-elements"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.options.suffix) &#123;</span><br><span class="line">        debug(<span class="keyword">this</span>.options[<span class="string">"five-elements"</span>]);</span><br><span class="line">        <span class="keyword">return</span> randomName.names.get1(<span class="keyword">this</span>.options[<span class="string">"five-elements"</span>]) + <span class="keyword">this</span>.options.suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> randomName.names.get2(<span class="keyword">this</span>.options[<span class="string">"five-elements"</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="生成_Count_個花名">生成 Count 個花名</h4><p>還記得 CLI 的 <code>count</code> 參數麼？因爲爲了方便，我們可以批量生成花名，所以就需要生成 Count 個花名的函數了。</p>
<p>實際上就是一個循環調用 <code>generateOne</code> 的函數而已。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hua.prototype.generate = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!count) count = <span class="keyword">this</span>.options.count || <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        result.push(<span class="keyword">this</span>.generateOne());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="CLI_文件">CLI 文件</h3><p>剛剛那個 <code>nomnom</code> 解析就在這個文件裏面，然後接下去就是實例化一個 <code>Hua</code> 對象，然後生成 <code>count</code> 個花名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hua = <span class="keyword">new</span> Hua(opts);</span><br><span class="line"><span class="keyword">var</span> result = hua.generate();</span><br></pre></td></tr></table></figure>
<p>最後把花名輸出來就好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" * "</span> + result[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="橋豆麻袋！">橋豆麻袋！</h4><blockquote>
<p>說好的五行顏色呢？！</p>
</blockquote>
<p>好像是的哦，我們要在輸出之前給 <code>result</code> 上個色兒。</p>
<p>遍歷 <code>result</code> 裏面的花名每個字，獲取它的五行屬性，然後涮上色兒。</p>
<p><code>chinese-random-name</code> 暴露了字典中每個字的五行屬性，只需要賦值一下就好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = <span class="built_in">require</span>(<span class="string">"chinese-random-name"</span>).names.dict;</span><br></pre></td></tr></table></figure>
<p>然後逐一對比。最後對應金木水火土的顏色值分別爲：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> definedColors = [</span><br><span class="line">    <span class="number">220</span>, <span class="number">83</span>, <span class="number">26</span>, <span class="number">197</span>, <span class="number">59</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>220 爲黃色，代表金；83 爲綠色，代表木；26 藍色代表水；197 紅色代表火；59 灰色代表土。</p>
<p>如果那個字無法找到屬性，則不上色，保持默認。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">result = result.map(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> withColor = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; wuxing.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> wx = wuxing[j];</span><br><span class="line">            <span class="keyword">if</span>(wx === <span class="string">" "</span>) &#123;</span><br><span class="line">                withColor += name[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(dict[wx].indexOf(name[i]) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> color = <span class="keyword">new</span> Color(name[i]);</span><br><span class="line">                color.fgcolor = definedColors[j];</span><br><span class="line">                withColor += color.toString();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> withColor;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>至此我們的 CLI 就寫好了，最後別忘了在 <a href="https://github.com/BoogeeDoo/hua/blob/09f1bc7eae14faaa9e881392d3811a6073d94b1c/bin/hua" target="_blank" rel="external">hua</a> 這個 CLI 文件頂部加上一句話。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env node</span></span><br></pre></td></tr></table></figure>
<p>這代表到時候如果要 <code>./hua</code> 的時候這個腳本是用 Node.js 來跑的。</p>
<h2 id="收拾">收拾</h2><p>本來想好好寫篇起花名的牢騷，結果不知不覺寫成了給初心者看的初級教程了，淚目 ( •̥́ ˍ •̀ू )</p>
<p>不嫌棄的就這麼看看吧。</p>
<p>最後這裏給出我寫好的這個 <code>hua</code> 程序。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ [sudo] npm install -g huaming</span><br></pre></td></tr></table></figure>
<p>然後就能在命令行下面跑了，跑法上面幾章有介紹過。它的 Repo 在<a href="https://github.com/BoogeeDoo/hua" target="_blank" rel="external">這裏</a>。</p>
<p>最後希望這個包在你們起花名的時候還真有那麼一丟丟的用處。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>起因是我一個叫『小龍』的好基友由於某些原因離職去了一家跟阿里一樣有着『花名文化』的公司，於是開始爲花名犯愁。</p>
<p>結合之前妹紙『弍紓』在起花名的時候也遇到了同樣的困擾，於是決定用 Node.js 寫個『一本正經亂起花名』的程序]]>
    </summary>
    
      <category term="花名" scheme="http://xcoder.in/tags/%E8%8A%B1%E5%90%8D/"/>
    
      <category term="阿里巴巴" scheme="http://xcoder.in/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 啓動方式：一道關於全局變量的題目引發的思考·續]]></title>
    <link href="http://xcoder.in/2015/11/27/a-js-problem-about-global-continued/"/>
    <id>http://xcoder.in/2015/11/27/a-js-problem-about-global-continued/</id>
    <published>2015-11-27T06:36:27.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>本文是上文《<a href="https://xcoder.in/2015/11/26/a-js-problem-about-global/">Node.js 啓動方式：一道關於全局變量的題目引發的思考</a>》的續章。</p>
<h2 id="原題回顧">原題回顧</h2><p>我們還是先回顧下原題吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上題由我們親愛的<a href="http://f2e.souche.com/blog/author/wang-xing-long/" target="_blank" rel="external">小龍</a>童鞋發現並在我們的 901 羣裏提問的。</p>
</blockquote>
<p>不過在上面一篇文章中，我們講的是在 REPL 和 <code>vm</code> 中有什麼事情，但是並沒有解釋爲什麼在文件模塊的載入形式下，<code>var</code> 並不會掛載到全局變量去。</p>
<p>其實原因很簡單，大家應該也都明白，在 Node.js 中，每個文件相當於是一個閉包，在 <code>require</code> 的時候被編譯包了起來。</p>
<p>但是具體是怎麼樣的呢？雖然網上也有很多答案，我還是決定在這裏按上一篇文章的尿性稍微解釋一下。</p>
<h2 id="分析">分析</h2><p>首先我們還是回到上一篇文章的《Node REPL 啓動的沙箱》一節，裏面說了當啓動 Node.js 的時候是以 <a href="https://github.com/nodejs/node/blob/dfee4e3712ac4673b5fc472a8f77ac65bdc65f87/src/node.js" target="_blank" rel="external">src/node.js</a> 爲入口的。</p>
<p>如果以 REPL 爲途徑啓動的話是直接啓動一個 <code>vm</code>，而此時的所有根級變量都在最頂級的作用域下，所以一個 <code>var</code> 自然會綁定到 <code>global</code> 下面了。</p>
<p>而如果是以文件，即 <code>$ node foo.js</code> 形式啓動的話，它就會執行 src/node.js 裏面的另一坨條件分支了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.argv[<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="comment">// make process.argv[1] into a full path</span></span><br><span class="line">  <span class="keyword">var</span> path = NativeModule.require(<span class="string">'path'</span>);</span><br><span class="line">  process.argv[<span class="number">1</span>] = path.resolve(process.argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Module = NativeModule.require(<span class="string">'module'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  startup.preloadModules();</span><br><span class="line">  <span class="keyword">if</span> (global.v8debug &amp;&amp;</span><br><span class="line">      process.execArgv.some(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arg.match(<span class="regexp">/^--debug-brk(=[0-9]*)?$/</span>);</span><br><span class="line">      &#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> debugTimeout = +process.env.NODE_DEBUG_TIMEOUT || <span class="number">50</span>;</span><br><span class="line">    setTimeout(Module.runMain, debugTimeout);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Main entry point into most programs:</span></span><br><span class="line">    Module.runMain();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>從上面的代碼看出，只要是以 <code>$ node foo.js</code> 形式啓動的，都會經歷 <code>startup.preloadModules()</code> 和 <code>Module.runMain()</code> 兩個函數。</p>
<h3 id="startup-preloadModules()">startup.preloadModules()</h3><p>我們來看看<a href="https://github.com/nodejs/node/blob/dfee4e3712ac4673b5fc472a8f77ac65bdc65f87/src/node.js#L870" target="_blank" rel="external">這個函數</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">startup.preloadModules = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process._preload_modules) &#123;</span><br><span class="line">    NativeModule.require(<span class="string">'module'</span>)._preloadModules(process._preload_modules);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>實際上就是執行的 lib/module.js 裏面的 <code>_preloadModules</code> 函數，並且把這個 <code>process._preload_modules</code> 給傳進去。當然，前提是有這個 <code>process._preload_modules</code>。</p>
<h4 id="process-_preload_modules">process._preload_modules</h4><p>這個 <code>process._preload_modules</code> 指的就是當你在使用 Node.js 的時候，命令行裏面的 <code>--require</code> 參數。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">r, --<span class="keyword">require</span>         <span class="class"><span class="keyword">module</span> <span class="title">to</span> <span class="title">preload</span> (<span class="title">option</span> <span class="title">can</span> <span class="title">be</span> <span class="title">repeated</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>代碼在 <a href="https://github.com/nodejs/node/blob/master/src/node.cc#L3306" target="_blank" rel="external">src/node.cc</a> 裏面可考。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--require"</span>) == <span class="number">0</span> ||</span><br><span class="line">           <span class="built_in">strcmp</span>(arg, <span class="string">"-r"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* module = argv[index + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (module == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: %s requires an argument\n"</span>, argv[<span class="number">0</span>], arg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  args_consumed += <span class="number">1</span>;</span><br><span class="line">  local_preload_modules[preload_module_count++] = module;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>如果遇到了 <code>--require</code> 這個參數，則對靜態變量 <code>local_preload_modules</code> 和 <code>preload_module_count</code> 做處理，把這個預加載模塊路徑加進去。</p>
<p>待到<a href="https://github.com/nodejs/node/blob/master/src/node.cc#L2933" target="_blank" rel="external">要生成 <code>process</code> 這個變量的時候</a>，再把預加載模塊的信息放到 <code>process._preload_modules</code> 裏面去。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetupProcessObject</span><span class="params">(Environment* env,</span><br><span class="line">                        <span class="keyword">int</span> argc,</span><br><span class="line">                        <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* argv,</span><br><span class="line">                        <span class="keyword">int</span> exec_argc,</span><br><span class="line">                        <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* exec_argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (preload_module_count) &#123;</span><br><span class="line">    CHECK(preload_modules);</span><br><span class="line">    Local&lt;Array&gt; <span class="built_in">array</span> = Array::New(env-&gt;isolate());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preload_module_count; ++i) &#123;</span><br><span class="line">      Local&lt;String&gt; module = String::NewFromUtf8(env-&gt;isolate(),</span><br><span class="line">                                                 preload_modules[i]);</span><br><span class="line">      <span class="built_in">array</span>-&gt;Set(i, module);</span><br><span class="line">    &#125;</span><br><span class="line">    READONLY_PROPERTY(process,</span><br><span class="line">                      <span class="string">"_preload_modules"</span>,</span><br><span class="line">                      <span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] preload_modules;</span><br><span class="line">    preload_modules = <span class="literal">nullptr</span>;</span><br><span class="line">    preload_module_count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最重要的就是這句</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">READONLY_PROPERTY(process,</span><br><span class="line">                  <span class="string">"_preload_modules"</span>,</span><br><span class="line">                  <span class="built_in">array</span>);</span><br></pre></td></tr></table></figure>
<h4 id="require(‘module’)-_preloadModules">require(‘module’)._preloadModules</h4><p>上面我們講了這個 <code>process._preload_modules</code>，然後現在我們說說是如何把 <code>$ node --require bar.js foo.js</code> 給預加載進去的。</p>
<p>接下去我們就要移步到 lib/module.js 文件裏面去了。</p>
<p>在<a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/lib/module.js#L496" target="_blank" rel="external">第 496 行左右</a>的地方有這個函數。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Module._preloadModules = <span class="function"><span class="keyword">function</span>(<span class="params">requests</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(requests))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Preloaded modules have a dummy parent module which is deemed to exist</span></span><br><span class="line">  <span class="comment">// in the current working directory. This seeds the search path for</span></span><br><span class="line">  <span class="comment">// preloaded modules.</span></span><br><span class="line">  <span class="keyword">var</span> parent = <span class="keyword">new</span> Module(<span class="string">'internal/preload'</span>, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    parent.paths = Module._nodeModulePaths(process.cwd());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.code !== <span class="string">'ENOENT'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  requests.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    parent.require(request);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>大概我們能看到，就是以 <code>internal/preload</code> 爲 ID 的 Module 對象來載入這些預加載模塊。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Module(<span class="string">'internal/preload'</span>, <span class="literal">null</span>);</span><br><span class="line">requests.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  parent.require(request);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>根據這個函數的註釋說明，這個 Module 對象是一個虛擬的 Module 對象，主要是跟非預加載的那些模塊給隔離或者區別開來，並且提供一個模塊搜索路徑。</p>
<h3 id="Module-runMain()">Module.runMain()</h3><p>看完上面的說明，我們接下去看看 <code>Module.runMain()</code> 函數。</p>
<p>這個函數還是位於 <a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/lib/module.js#L455" target="_blank" rel="external">lib/module.js</a>  文件裏面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Module.runMain = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Load the main module--the command line argument.</span></span><br><span class="line">  Module._load(process.argv[<span class="number">1</span>], <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// Handle any nextTicks added in the first tick of the program</span></span><br><span class="line">  process._tickCallback();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們看到了就是在這句話中，Module 載入了 <code>process.argv[1]</code> 也就是文件名，自此一發不可收拾。</p>
<h4 id="Module-_load">Module._load</h4><p>這個函數相信很多人都知道它的用處了，無非就是載入文件，並加載到一個閉包裏面。</p>
<p>這樣一來在文件裏面 <code>var</code> 出來的變量就不在根作用域下面了，所以不會粘到 <code>global</code> 裏面去。它的 <code>this</code> 就是包起來的這個閉包了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Module._load = <span class="function"><span class="keyword">function</span>(<span class="params">request, parent, isMain</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> filename = Module._resolveFilename(request, parent);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = Module._cache[filename];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (NativeModule.nonInternalExists(filename)) &#123;</span><br><span class="line">    debug(<span class="string">'load native module %s'</span>, request);</span><br><span class="line">    <span class="keyword">return</span> NativeModule.require(filename);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = <span class="keyword">new</span> Module(filename, parent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMain) &#123;</span><br><span class="line">    process.mainModule = <span class="built_in">module</span>;</span><br><span class="line">    <span class="built_in">module</span>.id = <span class="string">'.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Module._cache[filename] = <span class="built_in">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.load(filename);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代碼首先是根據傳入的文件名找到真的文件地址，就是所謂的搜索路徑了。比如 <code>require(&quot;foo&quot;)</code> 就會分別從 <code>node_modules</code> 路徑等依次查找下來。</p>
<p>我經常 Hack 這個 <code>_resolveFilename</code> 函數來簡化 <code>require</code> 函數，比如我希望我用 <code>require(&quot;controller/foo&quot;)</code> 就能直接拿到 ./src/controller/foo.js 文件。有興趣討論一下這個用法的童鞋可以轉到我的 <a href="https://gist.github.com/XadillaX/bc0e7c92925de0647477" target="_blank" rel="external">Gist</a> 上查看 Hack 的一個 Demo。</p>
<p>第二步就是我們常說的緩存了。如果這個模塊之前加載過，那麼在 <code>Module._cache</code> 下面會有個緩存，直接去取就是了。</p>
<p>第三步就是看看是不是 <code>NativeModule</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (NativeModule.nonInternalExists(filename)) &#123;</span><br><span class="line">  debug(<span class="string">'load native module %s'</span>, request);</span><br><span class="line">  <span class="keyword">return</span> NativeModule.require(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="NativeModule">NativeModule</h5><p>之前的代碼裏面其實也沒少出現這個 <code>NativeModule</code>。那這個 <code>NativeModule</code> 到底是個 shenmegui 呢？</p>
<p>其實它還是在 Node.js 的入口 <a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/src/node.js#L886" target="_blank" rel="external">src/node.js</a> 裏面。</p>
<p>它主要用來加載 Node.js 的一些原生模塊，比如說 <code>NativeModule.require(&quot;child_process&quot;)</code> 等，也用於一些 <code>internal</code> 模塊的載入，比如 <code>NativeModule.require(&quot;internal/repl&quot;)</code>。</p>
<p>之前代碼的這個判斷就是說如果判斷要載入的文件是一個原生模塊，那麼就使用 <code>NativeModule.require</code> 來載入。</p>
<h6 id="NativeModule-require">NativeModule.require</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">NativeModule.require = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (id == <span class="string">'native_module'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NativeModule;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cached = NativeModule.getCached(id);</span><br><span class="line">  <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">    <span class="keyword">return</span> cached.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!NativeModule.exists(id)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No such native module '</span> + id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  process.moduleLoadList.push(<span class="string">'NativeModule '</span> + id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nativeModule = <span class="keyword">new</span> NativeModule(id);</span><br><span class="line"></span><br><span class="line">  nativeModule.cache();</span><br><span class="line">  nativeModule.compile();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nativeModule.exports;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>先看看是否是本身，再看看是否被緩存，然後看看是否合法。接下去就是填充 <code>process.moduleLoadList</code>，最後載入這個原生模塊、緩存、編譯並返回。</p>
<blockquote>
<p>有興趣的同學可以在 Node.js 中輸出 <code>process.moduleLoadList</code> 看看。</p>
</blockquote>
<p>這個 <code>compile</code> 很重要。</p>
<h6 id="NativeModule-prototype-compile">NativeModule.prototype.compile</h6><p>在 <code>NativeModule</code> 編譯的過程中，大概的步驟是獲取代碼、包裹（Wrap）代碼，把包裹的代碼 <code>runInContext</code> 一遍得到包裹好的函數，然後執行一遍就算載入好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NativeModule.prototype.compile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> source = NativeModule.getSource(<span class="keyword">this</span>.id);</span><br><span class="line">  source = NativeModule.wrap(source);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn = runInThisContext(source, &#123; filename: <span class="keyword">this</span>.filename &#125;);</span><br><span class="line">  fn(<span class="keyword">this</span>.exports, NativeModule.require, <span class="keyword">this</span>, <span class="keyword">this</span>.filename);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們往這個 src/node.js 文件這個函數的上面幾行看一下，就知道包裹代碼是怎麼回事了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NativeModule.wrap = <span class="function"><span class="keyword">function</span>(<span class="params">script</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> NativeModule.wrapper[<span class="number">0</span>] + script + NativeModule.wrapper[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NativeModule.wrapper = [</span><br><span class="line">  <span class="string">'(function (exports, require, module, __filename, __dirname) &#123;\n'</span>,</span><br><span class="line">  <span class="string">'\n&#125;);'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>根據上面的代碼，我們能知道的就是比如我們一個內置模塊的代碼是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>那麼包裹好的代碼將會是這樣子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這樣一看就明白了這些 <code>require</code>、<code>module</code>、<code>exports</code>、<code>__filename</code> 和 <code>__dirname</code> 是怎麼來了吧。</p>
<p>當我們通過 <code>var fn = runInThisContext(source, { filename: this.filename });</code> 得到了這個包裹好的函數之後，我們就把相應的參數傳進這個閉包函數去執行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="keyword">this</span>.exports, NativeModule.require, <span class="keyword">this</span>, <span class="keyword">this</span>.filename);</span><br></pre></td></tr></table></figure>
<p>這個 <code>this</code> 就是對應的這個 <code>module</code>，自然這個 <code>module</code> 裏面就有它的 <code>exports</code>；<code>require</code> 函數就是 <code>NativeModule.require</code>。</p>
<p>所以我們看到的在 <code>lib/*.js</code> 文件裏面的那些 <code>require</code> 函數，實際上就是包裹好之後的代碼的 <code>NativeModule.require</code> 了。</p>
<p>所以說實際上這些內置模塊內部的根作用域下的 <code>var</code> 再怎麼樣高級也都是在包裹好的閉包裏面 <code>var</code>，怎麼的也跟 <code>global</code> 搭不着邊。</p>
<h6 id="內部原生模塊">內部原生模塊</h6><p>通過上面的追溯我們知道了，如果我們在代碼裏面使用 <code>require</code> 的話，會先看看這個模塊是不是原生模塊。</p>
<p>不過回過頭看一下它的這個判斷條件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (NativeModule.nonInternalExists(filename)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是原生模塊並且不是原生內部模塊的話。</p>
</blockquote>
<p>那是怎麼區分原生模塊和內部原生模塊呢？</p>
<p>我們再來看看這個 <code>NativeModule.nonInternalExists(filename)</code> 函數。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NativeModule.nonInternalExists = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> NativeModule.exists(id) &amp;&amp; !NativeModule.isInternal(id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NativeModule.isInternal = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> id.startsWith(<span class="string">'internal/'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的代碼是去除各種雜七雜八的條件之後的一種情況，別的情況還請各位童鞋自行看 Node.js 源碼。</p>
</blockquote>
<p>也就是說我們在我們自己的代碼裏面是請求不到 Node.js 源碼裏面 <code>lib/internal/*.js</code> 這些文件的——因爲它們被上面的這個條件分支給過濾了。（比如 <code>require(&quot;internal/module&quot;)</code> 在自己的代碼裏面是無法運行的）</p>
<blockquote>
<p><strong>注意：</strong> 不過有一個例外，那就是 <code>require(&quot;internal/repl&quot;)</code>。詳情可以參考這個 <a href="https://github.com/nodejs/node/issues/3393" target="_blank" rel="external">Issue</a> 和<a href="https://github.com/nodejs/node/blob/9148114c93861359a502801499d4c26d0b761174/lib/module.js#L276-L277" target="_blank" rel="external">這段代碼</a>。</p>
</blockquote>
<h5 id="Module-prototype-load">Module.prototype.load</h5><p>解釋完了上面的 <code>NativeModule</code> 之後，我們要就上面 <code>Module._load</code> 裏面的下一步 <code>module.load</code> 也就是 <code>Module.prototype.load</code> 做解析了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype.load = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> extension = path.extname(filename) || <span class="string">'.js'</span>;</span><br><span class="line">  <span class="keyword">if</span> (!Module._extensions[extension]) extension = <span class="string">'.js'</span>;</span><br><span class="line">  Module._extensions[extension](<span class="keyword">this</span>, filename);</span><br><span class="line">  <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>做了一系列操作之後得到了真·文件名，然後判斷一下後綴。如果是 <code>&quot;.js&quot;</code> 的話執行 <code>Module._extensions[&quot;.js&quot;]</code> 這個函數去編譯代碼，如果是 <code>&quot;.json&quot;</code> 則是 <code>Module._extensions[&quot;.json&quot;]</code>。</p>
<p>這裏我們略過 JSON 和 C++ Addon，直奔 <code>Module._extensions[&quot;.js&quot;]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Module._extensions[<span class="string">'.js'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">module, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = fs.readFileSync(filename, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="built_in">module</span>._compile(internalModule.stripBOM(content), filename);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>它也很簡單，就是奔着 <code>_compile</code> 去的。</p>
<h6 id="Module-prototype-_compile">Module.prototype._compile</h6><p>先上<a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/lib/module.js#L378-L426" target="_blank" rel="external">代碼</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype._compile = <span class="function"><span class="keyword">function</span>(<span class="params">content, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// remove shebang</span></span><br><span class="line">  content = content.replace(shebangRe, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.require(path);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Module._resolveFilename(request, self);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>.main = process.mainModule;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enable support to add extra extension types</span></span><br><span class="line">  <span class="built_in">require</span>.extensions = Module._extensions;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>.cache = Module._cache;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dirname = path.dirname(filename);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create wrapper function</span></span><br><span class="line">  <span class="keyword">var</span> wrapper = Module.wrap(content);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> compiledWrapper = runInThisContext(wrapper,</span><br><span class="line">                                      &#123; filename: filename, lineOffset: -<span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> args = [self.exports, <span class="built_in">require</span>, self, filename, dirname];</span><br><span class="line">  <span class="keyword">return</span> compiledWrapper.apply(self.exports, args);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>感覺流程上跟 <code>NativeModule</code> 的編譯相似，不過這裏是事先準備好要在載入的文件裏面用的 <code>require</code> 函數，以及一些 <code>require</code> 的周邊。</p>
<p>接下去就是用 <code>Module.wrap</code> 來包裹代碼了，包裹完之後把得到的函數用參數 <code>self.exports, require, self, filename, dirname</code> 去執行一遍，就算是文件載入完畢了。</p>
<p>最後回到之前載入代碼的那一刻，把載入完畢得到的 <code>module.exports</code> 再 <code>return</code> 出去就好了。</p>
<h6 id="Module-wrap">Module.wrap</h6><p>這個就不用說了。</p>
<p>在 lib/module.js 的<a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/lib/module.js#L46-L48" target="_blank" rel="external">最頂端附近</a>有這麼幾行代碼。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module.wrapper = NativeModule.wrapper;</span><br><span class="line">Module.wrap = NativeModule.wrap;</span><br><span class="line">Module._debug = util.debuglog(<span class="string">'module'</span>);</span><br></pre></td></tr></table></figure>
<p>一切豁然開朗了吧。</p>
<p>連 <code>NativeModule</code> 的代碼都逃不開被之前說的閉包所包裹，那麼你自己寫的 JS 文件當然也會被 <code>NativeModule.wrap</code> 所包裹。</p>
<p>那麼你在代碼根作用域申明的函數實際上在運行時裏面已經被一個閉包給包住了。</p>
<p>以前可能很多同學只知道是被閉包包住了，但是包的方法、流程今天算是解析了一遍了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這個 <code>var a</code> 怎麼也不可能綁到 <code>global</code> 去啊。</p>
<h6 id="Module-prototype-require">Module.prototype.require</h6><p>雖然我們上面講得差不多了，可能很多童鞋也厭煩了。</p>
<p>不過該講完的還是得講完。</p>
<p>我們在我們自己文件中用的 <code>require</code> 在上一節裏面有提到過，傳到我們閉包裏面的 <code>require</code> 實際上是長這樣的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> self.require(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以實際上就是個 <code>Module.prototype.require</code>。</p>
<p>我們再看看<a href="https://github.com/nodejs/node/blob/e25f8683f1735f55a27c00d41691be286f50e13f/lib/module.js#L362-L366" target="_blank" rel="external">這個函數</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype.require = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  assert(path, <span class="string">'missing path'</span>);</span><br><span class="line">  assert(<span class="keyword">typeof</span> path === <span class="string">'string'</span>, <span class="string">'path must be a string'</span>);</span><br><span class="line">  <span class="keyword">return</span> Module._load(path, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>一下子又繞回到了我們一開始的 <code>Module._load</code>。</p>
<p>所以基本上就差不多到這過了。</p>
<h2 id="REPL_vs_文件啓動">REPL vs 文件啓動</h2><p>最後我們再點一下，或者說回顧一下吧。</p>
<p>REPL 啓動的時候 Node.js 是開了個 <code>vm</code> 直接讓你跑，並沒有把代碼包在一個閉包裏面，所以再根作用域下的變量會 <code>Biu</code> 一下貼到 <code>global</code> 中去。</p>
<p>而文件啓動的時候，會做本文中說的一系列事情，然後就會把各文件都包到一個閉包去，所以變量就無法通過這種方式來貼到 <code>global</code> 去了。</p>
<p>不過這種二義性會在 <code>&quot;use strict&quot;;</code> 中戛然而止。</p>
<p>珍愛生命，<code>use strict</code>。</p>
<h2 id="小結">小結</h2><p>本文可能很多童鞋看完後悔覺得很坑——JS 爲什麼有那麼多二義性那麼坑呢。</p>
<p>其實不然，主要是可能很多人對 Node.js 執行的機制不是很瞭解。</p>
<p>本文從小龍拋出的一個簡單問題進入，然後淺入淺出 Node.js 的一些執行機制什麼的，希望對大家還是有點幫助，更何況我在意的不是問題本身，而是分析的這個過程。</p>
<h2 id="番外">番外</h2><blockquote>
<p>以下均爲臆想。</p>
<p><strong>小龍：</strong> 喂喂喂，我就問一個簡單的小破題目，你至於嘛！</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文是上文《<a href="https://xcoder.in/2015/11/26/a-js-problem-about-global/">Node.js 啓動方式：一道關於全局變量的題目引發的思考</a>》的續章。</p>
<h2 id="原題回顧">原題回顧</h2]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="REPL" scheme="http://xcoder.in/tags/REPL/"/>
    
      <category term="vm" scheme="http://xcoder.in/tags/vm/"/>
    
      <category term="源碼分析" scheme="http://xcoder.in/tags/%E6%BA%90%E7%A2%BC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 啓動方式：一道關於全局變量的題目引發的思考]]></title>
    <link href="http://xcoder.in/2015/11/26/a-js-problem-about-global/"/>
    <id>http://xcoder.in/2015/11/26/a-js-problem-about-global/</id>
    <published>2015-11-26T13:51:37.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="原題">原題</h2><p>　　題目是這樣的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上題由我們親愛的<a href="http://f2e.souche.com/blog/author/wang-xing-long/" target="_blank" rel="external">小龍</a>童鞋發現並在我們的 901 羣裏提問的。</p>
</blockquote>
<h2 id="經過">經過</h2><p>　　然後有下面的小對話。</p>
<blockquote>
<p><strong>小龍：</strong>你們猜這個輸出什麼？</p>
<p><strong>弍紓：</strong>2</p>
<p><strong>力叔：</strong>2 啊</p>
<p><strong>死月·絲卡蕾特：</strong>2</p>
<p><strong>力叔：</strong>有什麼問題麼？</p>
<p><strong>小龍：</strong>輸出 undefind。</p>
<p><strong>死月·絲卡蕾特：</strong>你確定？</p>
<p><strong>小龍：</strong>是不是我電腦壞了</p>
<p><strong>力叔：</strong>你確定？</p>
<p><strong>弍紓：</strong>你確定？</p>
<p><strong>小龍：</strong>爲什麼我 node 文件名跑出來的是 undefined？</p>
<p><strong>鄭昱：</strong>-.- 一樣阿。undefined</p>
</blockquote>
<p>　　以上就是剛見到這個題目的時候羣裏的一個小討論。</p>
<h2 id="分析">分析</h2><p>　　後來我就覺得奇怪，既然小龍驗證過了，說明他也不是隨地大小便，無的放矢什麼的。</p>
<p>　　於是我也驗證了一下，不過由於偷懶，沒有跟他們一樣寫在文件裏面，而是直接 node 開了個 REPL 來輸入上述代碼。</p>
<blockquote>
<p><strong>結果是 2！</strong></p>
<p><strong>結果是 2！</strong></p>
<p><strong>結果是 2！</strong></p>
</blockquote>
<p>　　於是這就出現了一個很奇怪的問題。</p>
<p>　　尼瑪爲毛我是 <code>2</code> 他們倆是 <code>undefined</code> 啊！</p>
<p>　　不過馬上我就反應過來了——我們幾個的環境不同，他們是 <code>$ node foo.js</code> 而我是直接 node 開了個 REPL，所以有一定的區別。</p>
<p>　　而力叔本身就是前端大神，我估計是以 Chrome 的調試工具下爲基礎出的答案。</p>
<h2 id="REPL_vs_文件執行">REPL vs 文件執行</h2><p>　　其實上述的問題，需要解釋的問題大概就是 <code>a</code> 到底掛在哪了。</p>
<p>　　因爲細細一想，在 <code>function</code> 當中，<code>this</code> 指向的目標是 <code>global</code> 或者 <code>window</code>。</p>
<blockquote>
<p>還無法理解上面這句話的童鞋需要先補一下基礎。</p>
</blockquote>
<p>　　那麼最終需要解釋的就是 <code>a</code> 到底有沒有掛在全局變量上面。</p>
<p>　　這麼一想就有點細思恐極的味道了——如果在 node 線上運行環境裏面的源代碼文件裏面隨便 <code>var</code> 一個變量就掛到了全局變量裏面那是有多恐怖！</p>
<p>　　於是就有些釋然了。</p>
<p>　　但究竟是什麼原因導致 REPL 和文件執行方式不一樣的呢？</p>
<h3 id="全局對象的屬性">全局對象的屬性</h3><p>　　首先是弍紓找出了阮老師 ES6 系列文章中的<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="external">全局對象屬性</a>一節。</p>
<blockquote>
<p>全局對象是最頂層的對象，在瀏覽器環境指的是 window 象，在 Node.js 指的是 global 對象。ES5 之中，全局對象的屬性與全局變量是等價的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>上面代碼中，全局對象的屬性賦值與全局變量的賦值，是同一件事。（對於Node來說，這一條只對REPL環境適用，模塊環境之中，全局變量必須顯式聲明成global對象的屬性。）</p>
</blockquote>
<p>有了阮老師的文章驗證了這個猜想，我可以放心大膽繼續看下去了。</p>
<h3 id="repl-js">repl.js</h3><p>　　知道了上文的內容之後，感覺首要查看的就是 Node.js 源碼中的 <a href="https://github.com/nodejs/node/blob/master/lib/repl.js#L513" target="_blank" rel="external">repl.js</a> 了。</p>
<p>　　先是結合了一下自己以前用自定義 REPL 的情況，一般的步驟先是獲取 REPL 的上下文，然後在上下文裏面貼上各種自己需要的東西。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = relp.start(<span class="string">" ➜ "</span>);</span><br><span class="line"><span class="keyword">var</span> c = r.context;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 c 裏面貼上各種上下文</span></span><br><span class="line">c.foo = bar;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>關於自定義 REPL 的一些使用方式可以參考下老雷寫的《<a href="https://cnodejs.org/topic/563735ed677332084c319d95" target="_blank" rel="external">Node.js 定製 REPL 的妙用</a>》。</p>
</blockquote>
<p>　　有了之前寫 REPL 的經驗，大致明白了 REPL 裏面有個上下文的東西，那麼在 repl.js 裏面我們也找到了類似的代碼。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">REPLServer.prototype.createContext = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.useGlobal) &#123;</span><br><span class="line">    context = global;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = vm.createContext();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> global) context[i] = global[i];</span><br><span class="line">    context.console = <span class="keyword">new</span> Console(<span class="keyword">this</span>.outputStream);</span><br><span class="line">    context.global = context;</span><br><span class="line">    context.global.global = context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.module = <span class="built_in">module</span>;</span><br><span class="line">  context.require = <span class="built_in">require</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lines = [];</span><br><span class="line">  <span class="keyword">this</span>.lines.level = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make built-in modules available directly</span></span><br><span class="line">  <span class="comment">// (loaded lazily)</span></span><br><span class="line">  exports._builtinLibs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(context, name, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lib = <span class="built_in">require</span>(name);</span><br><span class="line">        context._ = context[name] = lib;</span><br><span class="line">        <span class="keyword">return</span> lib;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// allow the creation of other globals with this name</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> context[name];</span><br><span class="line">        context[name] = val;</span><br><span class="line">      &#125;,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　看到了關鍵字 <code>vm</code>。我們暫時先不管 <code>vm</code>，光從上面的代碼可以看出，<code>context</code> 要麼等於 <code>global</code>，要麼就是把 <code>global</code> 上面的所有東西都粘過來。</p>
<p>　　然後順帶着把必須的兩個不在 <code>global</code> 裏的兩個東西 <code>require</code> 和 <code>module</code> 給弄過來。</p>
<p>　　下面的東西就不需要那麼關心了。</p>
<h3 id="VM">VM</h3><p>　　接下去我們來講講 <code>vm</code>。</p>
<p>　　VM 是 node 中的一個內置模塊，可以在<a href="https://nodejs.org/dist/v4.2.2/docs/api/vm.html" target="_blank" rel="external">文檔</a>中看到說明和使用方法。</p>
<p>　　大致就是將代碼運行在一個沙箱之內，並且事先賦予其一些 <code>global</code> 變量。</p>
<p>　　而真正起到上述 <code>var</code> 和 <code>global</code> 區別的就是這個 <code>vm</code> 了。</p>
<p>　　<code>vm</code> 之中在根作用域（也就是最外層作用域）中使用 <code>var</code> 應該是跟在瀏覽器中一樣，會把變量粘到 <code>global</code>（瀏覽器中是 <code>window</code>）中去。</p>
<p>　　我們可以試試這樣的代碼：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="built_in">require</span>(<span class="string">'vm'</span>);</span><br><span class="line"><span class="keyword">var</span> localVar = <span class="string">'initial value'</span>;</span><br><span class="line"></span><br><span class="line">vm.runInThisContext(<span class="string">'var localVar = "vm";'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'localVar: '</span>, localVar);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global.localVar: '</span>, global.localVar);</span><br></pre></td></tr></table></figure>
<p>　　其輸出結果是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localVar: initial value</span><br><span class="line">global.localVar: vm</span><br></pre></td></tr></table></figure>
<p>　　如文檔中所說，<code>vm</code> 的一系列函數中跑腳本都無法對當前的局部變量進行訪問。各函數能訪問自己的 <code>global</code>，而 <code>runInThisContext</code> 的 <code>global</code> 與當前上下文的 <code>global</code> 是一樣的，所以能訪問當前的全局變量。</p>
<p>　　所以出現上述結果也是理所當然的了。</p>
<p>　　所以在 <code>vm</code> 中跑我們一開始拋出的問題，答案自然就是 <code>2</code> 了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">var</span> sandbox = &#123;</span><br><span class="line">    <span class="built_in">console</span>: <span class="built_in">console</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vm.createContext(sandbox);</span><br><span class="line">vm.runInContext(<span class="string">"var a = 2;function foo()&#123;console.log(this.a);&#125;foo();"</span>, sandbox);</span><br></pre></td></tr></table></figure>
<h3 id="Node_REPL_啓動的沙箱">Node REPL 啓動的沙箱</h3><p>　　最後我們再只需要驗證一件事就能真相大白了。</p>
<p>　　平時我們自定義一個 <code>repl.js</code> 然後執行 <code>$ node repl.js</code> 的話是會啓動一個 REPL，而這個 REPL 會去調 <code>vm</code>，所以會出現 <code>2</code> 的答案；或者我們自己在代碼裏面寫一個 <code>vm</code> 然後跑之前的代碼，也是理所當然出現 <code>2</code>。</p>
<p>　　那麼我們就輸入 <code>$ node</code> 來進入的 REPL 跟我們之前講的 REPL 是不是同一個東西呢？</p>
<p>　　如果是的話，一切就釋然了。</p>
<p>　　首先我們進入到 Node 的入口文件——C++ 的 <code>int main()</code>。</p>
<p>　　它在 Node.js 源碼 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/src/node_main.cc#L45" target="_blank" rel="external">src/node_main.cc</a> 之中。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IOLBF, <span class="number">1024</span>);</span><br><span class="line">  <span class="keyword">return</span> node::Start(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　就在主函數中執行了 <code>node::Start</code>。而這個 <code>node::Start</code> 又存在 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/src/node.cc#L4109" target="_blank" rel="external">src/node.cc</a> 裏面。</p>
<p>　　然後在 <code>node::Start</code> 裏面又調用 <code>StartNodeInstance</code>，在這裏面是 <code>LoadEnvironment</code> 函數。</p>
<p>　　最後在 <code>LoadEnvironment</code> 中看到了幾句關鍵的語句：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Local&lt;String&gt; script_name = FIXED_ONE_BYTE_STRING(env-&gt;isolate(), <span class="string">"node.js"</span>);</span><br><span class="line">Local&lt;Value&gt; f_value = ExecuteString(env, MainSource(env), script_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">Local&lt;Function&gt; f = Local&lt;Function&gt;::Cast(f_value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Local&lt;Object&gt; global = env-&gt;context()-&gt;Global();</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Local&lt;Value&gt; arg = env-&gt;process_object();</span><br><span class="line">f-&gt;Call(global, <span class="number">1</span>, &amp;arg);</span><br></pre></td></tr></table></figure>
<p>　　還有這麼一段關鍵的註釋。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now we call 'f' with the 'process' variable that we've built up with</span></span><br><span class="line"><span class="comment">// all our bindings. Inside node.js we'll take care of assigning things to</span></span><br><span class="line"><span class="comment">// their places.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We start the process this way in order to be more modular. Developers</span></span><br><span class="line"><span class="comment">// who do not like how 'src/node.js' setups the module system but do like</span></span><br><span class="line"><span class="comment">// Node's I/O bindings may want to replace 'f' with their own function.</span></span><br></pre></td></tr></table></figure>
<p>　　也就是說，啓動 <code>node</code> 的時候，在做了一些準備之後是開始載入執行 src 文件夾下面的 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/src/node.js" target="_blank" rel="external">node.js</a> 文件。</p>
<p>　　在 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/src/node.js#L92" target="_blank" rel="external">92 行</a>附近有針對 <code>$ node foo.js</code> 和 <code>$ node</code> 的判斷啓動不同的邏輯。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.argv[<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="comment">// make process.argv[1] into a full path</span></span><br><span class="line">  <span class="keyword">var</span> path = NativeModule.require(<span class="string">'path'</span>);</span><br><span class="line">  process.argv[<span class="number">1</span>] = path.resolve(process.argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Module = NativeModule.require(<span class="string">'module'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  startup.preloadModules();</span><br><span class="line">  <span class="keyword">if</span> (global.v8debug &amp;&amp;</span><br><span class="line">      process.execArgv.some(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arg.match(<span class="regexp">/^--debug-brk(=[0-9]*)?$/</span>);</span><br><span class="line">      &#125;)) &#123;</span><br><span class="line">    <span class="keyword">var</span> debugTimeout = +process.env.NODE_DEBUG_TIMEOUT || <span class="number">50</span>;</span><br><span class="line">    setTimeout(Module.runMain, debugTimeout);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Main entry point into most programs:</span></span><br><span class="line">    Module.runMain();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> Module = NativeModule.require(<span class="string">'module'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process._forceRepl || NativeModule.require(<span class="string">'tty'</span>).isatty(<span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">// REPL</span></span><br><span class="line">    <span class="keyword">var</span> cliRepl = Module.requireRepl();</span><br><span class="line">    cliRepl.createInternalRepl(process.env, <span class="function"><span class="keyword">function</span>(<span class="params">err, repl</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　在上述節選代碼的第一個 <code>else if</code> 中，就是對 <code>$ node foo.js</code> 這種情況進行處理了，再做完各種初始化之後，使用 <code>Module.runMain();</code> 來運行入口代碼。</p>
<p>　　第二個 <code>else if</code> 裏面就是 <code>$ node</code> 這種情況了。</p>
<p>　　我們在終端中打開 <code>$ node</code> 的時候，TTY 通常是關連着的，所以 <code>require(&#39;tty&#39;).isatty(0)</code> 爲 <code>true</code>，也就是說會進到條件分支並且執行裏面的 <code>cliRepl</code> 相關代碼。</p>
<p>　　我們進入到 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/lib/module.js#L490" target="_blank" rel="external">lib/module.js</a> 看看這個 <code>Module.requireRepl</code> 是什麼東西。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module.requireRepl = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Module._load(<span class="string">'internal/repl'</span>, <span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　所以我們還是得轉入 <a href="https://github.com/nodejs/node/blob/0966ab99966b7d3fbe4d7b93797fb299595fca72/lib/internal/repl.js#L23" target="_blank" rel="external">lib/internal/repl.js</a> 來一探究竟。</p>
<p>　　上面在 <code>node.js</code> 裏面我們看到它執行了這個 <code>cliRepl</code> 的 <code>createInternalRepl</code> 函數，它的實現大概是這樣的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRepl</span>(<span class="params">env, opts, cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  opts = opts || &#123;</span><br><span class="line">    ignoreUndefined: <span class="literal">false</span>,</span><br><span class="line">    terminal: process.stdout.isTTY,</span><br><span class="line">    useGlobal: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  opts.replMode = &#123;</span><br><span class="line">    <span class="string">'strict'</span>: REPL.REPL_MODE_STRICT,</span><br><span class="line">    <span class="string">'sloppy'</span>: REPL.REPL_MODE_SLOPPY,</span><br><span class="line">    <span class="string">'magic'</span>: REPL.REPL_MODE_MAGIC</span><br><span class="line">  &#125;[<span class="built_in">String</span>(env.NODE_REPL_MODE).toLowerCase().trim()];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> repl = REPL.start(opts);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　轉頭一看這個 lib/internal/repl.js 頂端的模塊引入，赫然看到一句話：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REPL = <span class="built_in">require</span>(<span class="string">'repl'</span>);</span><br></pre></td></tr></table></figure>
<p>　　真相大白。</p>
<h2 id="小結">小結</h2><p>　　最後再梳理一遍。</p>
<p>　　在於 Node.js 的 <code>vm</code> 裏面，頂級作用域下的 <code>var</code> 會把變量貼到 <code>global</code> 下面。而 REPL 使用了 <code>vm</code>。然後 <code>$ node</code> 進入的一個模式就是一個特定參數下面啓動的一個 <code>REPL</code>。</p>
<p>　　所以我們一開始提出的問題裏面在 <code>$ node foo.js</code> 模式下執行是 <code>undefined</code>，因爲不在全局變量上，但是啓用 <code>$ node</code> 這種 REPL 模式的時候得到的結果是 <code>2</code>。</p>
<h2 id="番外">番外</h2><blockquote>
<p><strong>小龍：</strong>我用 node test.js 跑出來是 <code>a: undefined</code>；那我應該怎麼修改“環境”，來讓他跑出：<code>a: 2</code> 呢？</p>
</blockquote>
<p>　　於是有了上面寫的那段代碼。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">var</span> sandbox = &#123;</span><br><span class="line">    <span class="built_in">console</span>: <span class="built_in">console</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vm.createContext(sandbox);</span><br><span class="line">vm.runInContext(<span class="string">"var a = 2;function foo()&#123;console.log(this.a);&#125;foo();"</span>, sandbox);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="原題">原題</h2><p>　　題目是這樣的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="REPL" scheme="http://xcoder.in/tags/REPL/"/>
    
      <category term="vm" scheme="http://xcoder.in/tags/vm/"/>
    
      <category term="源碼分析" scheme="http://xcoder.in/tags/%E6%BA%90%E7%A2%BC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我爲什麼要使用哈希]]></title>
    <link href="http://xcoder.in/2015/10/16/why-i-use-hash/"/>
    <id>http://xcoder.in/2015/10/16/why-i-use-hash/</id>
    <published>2015-10-16T06:52:06.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什麼是哈希（Hash）">什麼是哈希（Hash）</h2><p>本來這裏不應該出現這一節的，因爲實際上大家應該都知道什麼是哈希。不過有時候爲了文章的完整性，我這裏就稍微教條性地說明一下吧。ヽ(́◕◞౪◟◕‵)ﾉ</p>
<blockquote>
<p>散列（英語：Hashing），通常音譯作哈希，是電腦科學中一種對資料的處理方法，通過某種特定的函數、算法將要檢索的項與用來檢索的索引關聯起來，生成一種便於搜索的數據結構。也譯爲散列。</p>
<p style="text-align: right;">– From <a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97" target="_blank">散列</a>, Wikipedia</p>

</blockquote>
<p>實際上通俗的說法就是把某種狀態或者資料給映射到某個值上的操作。</p>
<p>本醬大概就解釋到這裏了，至於哈希的進一步認知包括衝突的產生和解決等，如果米娜桑不瞭解的話還請自行學習咕。థ౪థ</p>
<h2 id="引子——子樹問題">引子——子樹問題</h2><p>這個不是我在實踐中遇到的問題，而是當年去某不作惡的大廠面試時候遇到的問題，覺得比較經典，所以就拿出來了。ᕙ༼ຈل͜ຈ༽ᕗ</p>
<h3 id="問題描述">問題描述</h3><p>給定一棵二叉樹，假設每個節點的數據只有左右子節點，自身並不存儲數據。請找出兩兩完全相等的子樹們。</p>
<blockquote>
<p>有興趣的童鞋可以自己先思考一下。₍₍◝(･’ω’･)◟⁾⁾ </p>
</blockquote>
<h3 id="我的做法">我的做法</h3><p>實際上我也不知道自己的做法是不是正確做法，不過既然通過了那一輪面試，想來也不會偏差到哪去喵。ლ（╹ε╹ლ）</p>
<p>做法大概如下：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86#.E5.90.8E.E5.BA.8F.E9.81.8D.E5.8E.86" target="_blank" rel="external">後序遍歷</a>一遍整棵樹。</li>
<li>對於遍歷到每一個節點，都獲取到左右子節點的哈希值，然後將其拼接重新計算出自身的哈希值，並返回給父親節點。</li>
</ol>
<p>至於哈希值怎麼算，方法有很多。最簡單的就是設葉子節點一個哈希值，比如是 <code>md5(&quot;&quot;)</code>，然後每次非葉子節點的哈希值就用 <code>md5(LEFT_HASH + RIGHT_HASH)</code> 來計算。大家也可以自己隨便想一種方法來做就好了。</p>
<p>很多人可能不解了，明明是用 <code>md5</code>，這篇文章是講哈希，有毛線關係。(╯°O°)╯┻━┻</p>
<p>實際上 <code>md5</code> 就是一種哈希算法，而且是非常經典的哈希算法。</p>
<blockquote>
<p>典型的哈希算法包括 MD2、MD4、MD5 和 SHA-1 等。當然不侷限於這些，對於數字來說，取模也算是哈希算法，對於字符串狀態轉整數狀態哈希來說還有諸如 <a href="http://www.partow.net/programming/hashfunctions/#BKDRHashFunction" target="_blank" rel="external">BKDR</a>、<a href="http://www.partow.net/programming/hashfunctions/#ELFHashFunction" target="_blank" rel="external">ELF</a> 等等。</p>
</blockquote>
<p>如果大家想多瞭解一些字符串轉數字哈希的算法，可以參考一下 BYVoid 的這篇《<a href="https://www.byvoid.com/blog/string-hash-compare/" target="_blank" rel="external">各種字符串Hash函數比較</a>》，或者想直接在 Node.js 裏面使用的小夥伴們可以光顧下這個包——<a href="https://github.com/XadillaX/bling_hashes" target="_blank" rel="external">bling-hashes</a>。</p>
<p>初步的輪廓已經明晰了，說白了就是將每個節點的哈希全算出來，如果是父親節點就用子節點的哈希拼接起來再哈希一遍。σ`∀´)σ</p>
<p>把這些哈希算出來之後放在一個散列表裏面待查。如果一個算出來的哈希跟之前已有的哈希值相等，那麼就是說這個節點跟那個節點爲根節點的子樹有可能完全相等。</p>
<blockquote>
<p>注意：<strong>有可能</strong>完全相等。</p>
<p>注意：只是<strong>有可能</strong>完全相等。</p>
<p>注意：重要的事情說三遍，只是<strong>有可能</strong>完全相等。</p>
</blockquote>
<p>哈希是存在着一定的衝突概率的，所以說兩個相等的哈希所檢索到的源不一定一樣，所以我們根據這些計算到的哈希建立哈希表，然後把表中同哈希值的子樹再兩兩同時遍歷一遍以檢驗是否相等。</p>
<ol>
<li>同時遞歸，取兩個子樹的根節點。</li>
<li>後序遍歷，看看每個節點是不是都一樣存在（或者不存在）左子節點以及存在（或者不存在）右子節點。</li>
<li>循環往復一直到兩兩遍歷完整棵樹得到驗證結果。如果半路有一個節點的左右子節點狀態不一樣就可以直接跳出遞歸返回 <code>false</code>。</li>
</ol>
<p>至此爲止，我們可以看出大概是兩大步——<strong>計算各子樹的哈希值</strong>和<strong>驗證各同哈希子樹的相等性</strong>。不過稍微變通一下，我們就可以在計算出哈希值的時候就去跟以前的對比了。</p>
<h4 id="剪枝">剪枝</h4><p>實際上上面的做法還有一個優化的方案，不過跟哈希相關性已經基本上很小了。不過還是跟<strong>解決衝突</strong>有一丟丟的關係的，沒興趣的童鞋也可以直接跳過了。(๑•́ ₃ •̀๑)</p>
<p>由於子樹哈希值是存在一定的衝突概率的，所以兩個同哈希的子樹不一定相同。那麼我們如果能一眼看出這樣的兩棵子樹是不相等的，就可以省略驗證這一個遞歸的步驟了。</p>
<p>這裏有一種最顯而易見的情況我們是可以忽略省略步驟的，那就是深度。</p>
<p>如果兩棵子樹兩兩完全相等，那麼說明這倆基佬的深度（或者說高度）是一樣的，如果連深度都不一樣了還如何愉快搞基——所以說如果有兩個相等哈希值的子樹的深度不一樣的話可以直接略過驗證步驟了。</p>
<p>那麼就可以這麼做：</p>
<ol>
<li>設所有葉子節點的深度爲 <code>0</code>，然後每往上一層加一。</li>
<li>遇到左右子節點深度不一樣的父節點時，取深度大的那個子節點深度去加一。</li>
</ol>
<p>以上步驟在遍歷計算哈希的時候順便也做了，這樣就多了一個驗證標記了。</p>
<p>所以差不多就這樣了，淺嘗輒止。( ˘･з･)</p>
<h3 id="引子的小結">引子的小結</h3><p>就上述的場景來說，哈希非常好地將一個非常複雜的狀態轉化成一個可以檢索的狀態。本來毫無頭緒的一個問題使用了哈希之後就完全變成了一個檢索加驗證的過程了。</p>
<h2 id="報告圖問題">報告圖問題</h2><p>這個問題就是我在大搜車中確實遇到的場景了。大家也不需要知道什麼是報告圖，就當它是一個代號了。</p>
<h3 id="問題描述-1">問題描述</h3><blockquote>
<p>要做的事情大概就是說給定一個報告，我們根據報告的各個細節選定各種圖層然後揉成一團疊加在一起形成最後一個結果圖。</p>
</blockquote>
<p>其實本來就有個系統在做這件事情的——每來一個報告就生成一張圖，然後存儲好之後給前端使用。</p>
<p>我做的事情是將邏輯遷移到另一套計算密集型任務集中處理系統中去。(<em>´艸`</em>)</p>
<p>其實生成這樣一張圖片的邏輯是 CPU 計算密集型的邏輯，所以比較耗費資源和時間的，那麼我們就能在這上面做點手腳優化一下。</p>
<h3 id="優化方法">優化方法</h3><p>首先我們要知道的是，有哪些圖層是固定的，所以其實這算半個排列組合的問題了。</p>
<p>不過我們也知道排列組合的增長性非常快，更何況我這裏有約 100 個圖層選擇，所以可能性非常多，一下子全生成好不可能。</p>
<p>那麼就可以用哈希和懶惰的思想來實現了。(<em>ˇωˇ</em>人)</p>
<p>雖然報告是有無限種可能的，但是把報告轉成圖層數據之後，擁有完全一樣的圖層數據的報告就可以用同一張圖片了，這樣就可以大大節省空間和時間了。</p>
<p>其實大概的步驟非常簡單：</p>
<ol>
<li>把圖層數據計算成哈希。（比如把所有圖層文件路徑用某種符號拼接，再用 <code>md5</code> 計算一下）</li>
<li>去數據庫查找這個哈希主鍵存不存在。<ul>
<li>如果存在則驗證源圖層數據域當前圖層數據是否吻合。<ul>
<li>如果不吻合則按某種算法重新計算哈希，繼續步驟 2。</li>
<li><strong>如果吻合則可以直接拿着這個數據返回了，跳出計算。</strong></li>
</ul>
</li>
<li>如果不存在就說明當前數據庫還沒有這個圖層情況的報告圖生成，那麼就執行生成報告圖邏輯。</li>
</ul>
</li>
<li>報告圖生成之後，將其存入數據庫中。<ul>
<li>計算出這個報告圖圖層數據的哈希，去數據庫查存不存在。<ul>
<li>如果不存在則說明哈希不衝突，能用，直接用這個哈希存進去。</li>
<li>如果存在則說明哈希衝突，那麼按某種算法重新計算哈希，繼續上面的步驟直到不衝突爲止。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>如果大家想知道“按某種算法重新生成哈希”裏面“某種算法”的話可以看看下面的瞎狗眼的說明瞭。(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</p>
<blockquote>
<p>其實很簡單，把圖層數據的這個字符串加某個固定字符當小尾巴，如果哈希還是衝突則繼續加這個小尾巴，直到計算出來的哈希不衝突爲止。</p>
<p>比如我就用了這字符當小尾巴——<strong>🀣</strong>（麻將牌中的蘭）。(♛‿♛)</p>
</blockquote>
<h3 id="報告圖的小結">報告圖的小結</h3><p>在這種場景中，我把哈希拿來作檢索某種報告圖是否已經生成的用途。如果沒有生成則生成一張，如果已經生成則直接拿已有的報告圖去用。</p>
<p>至少比原來的來一張報告就生成一張圖片來得快，並且省空間——相當於作冗餘處理了。</p>
<p>事實上在很多的網盤系統中也有作冗餘處理的。你以爲你有多少多少 T 的空間，實際上相同的文件最終在網盤系統裏面只存一份（不過排除備份的那些），而我相信做這些冗餘判斷的原理就是哈希了，SHA-1 也好 MD5 也好，反正就是這樣。</p>
<blockquote>
<p>上面網盤的冗餘處理原理也只是我的猜測，我沒在那些廠子裏面工作過所以不能說就是就是這樣子的。歡迎指正。｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡</p>
</blockquote>
<h2 id="唯一主鍵問題">唯一主鍵問題</h2><p>這是我來這邊工作後的另一個小插曲了，遇到一個主鍵生成的小需求。</p>
<h3 id="問題描述-2">問題描述</h3><p>有一個數據要插入到數據庫，所以要給它生成一個主鍵，但是需求比較奇葩，可能是歷史遺留問題吧。(눈‸눈)</p>
<ul>
<li>非自增。</li>
<li>是一個全是數字的字符串。</li>
<li>不同類型的這個表的數據用不同的前綴，比如 <code>10</code>、<code>11</code>、<code>12</code> 等。</li>
<li>位數在十幾位左右（不過在我這裏就固定了）。</li>
</ul>
<h3 id="解決方案">解決方案</h3><p>如果是 <code>前綴 + 隨機數</code> 的衝突概率會比較大的，所以還是用哈希來搞。</p>
<p>非常簡單。首先前綴是固定的，我們就不管了，然後我根據這次進來的數據拼接成字符串（數據不會完全一樣的），加上一點隨機鹽，然後用字符串哈希計算一遍，加上前導零，加上當前時間戳的後幾位拼接起來，最後接上前綴就好了。</p>
<p>這個 <code>generate</code> 函數看起來就像這樣子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bling = <span class="built_in">require</span>(<span class="string">"bling-hashes"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">type, bodyParamStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> basePrefix;</span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'foo'</span>: basePrefix = <span class="string">'10'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'bar'</span>: basePrefix = <span class="string">'11'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: base_prefix = <span class="string">'00'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> date = moment();</span><br><span class="line">    <span class="keyword">var</span> hash = bling.bkdr(bodyParamStr + date.valueOf()).pad(<span class="number">10</span>);</span><br><span class="line">    hash = date.millisecond().pad(<span class="number">3</span>) + hash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> basePrefix + hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>這裏的 <code>bling</code> 就是上面提到過的那個 <a href="https://github.com/XadillaX/bling_hashes" target="_blank" rel="external">bling-hashes</a>，採用了 <code>BKDR</code> 算法來計算哈希。以及 <code>Number.prototype.pad</code> 函數是我邪惡得使用了 <a href="http://sugarjs.com/api/Number/pad" target="_blank" rel="external">SugarJs</a> 裏面的函數，就是加上前導零的意思。如果受“千萬不要修改原型鏈”影響較深地童鞋別學我哦。<code>bodyParamStr</code> 是前端傳過來的 <strong>Raw Form Data</strong>，它看起來像 <code>&quot;data1=1&amp;data2=2&amp;...&quot;</code>。</p>
</blockquote>
<p>最後得到的這個字符串是我們所要的主鍵了。｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡</p>
<p>不過要注意的是，這個主鍵仍然又衝突的可能性，所以一旦衝突了（無論是自己檢測到的還是插入數據庫的時候疼了）就需要再生產一遍。就目前來說再生成的時候毫秒時間戳後三位會不一樣，所以問題不大，允許存在的誤差——畢竟不是那種分分鐘集千萬條的數據，肯定在 <code>int</code> 範圍內。如果到時候真出問題了再改進。</p>
<h3 id="主鍵的小結">主鍵的小結</h3><p>這裏的哈希是用在生成基本上沒有碰撞的主鍵身上，感覺效果也是非常不錯的——前提是你也有這種奇葩需求。</p>
<h2 id="真·小結">真·小結</h2><p>本文大致介紹了哈希的幾種用途，有可能是大家熟知的用途，也有可能是巧用，總之就是說了爲什麼我要用哈希。</p>
<p>在編程中，無論是實際用途還是自己玩玩的題目，多動動腦子就會出來一些“奇技淫巧”。哈希也好，別的東西也罷，反正都是爲了解決問題的——千萬別因爲實際開發中通常性的“並沒有什麼卵用”而去忽視它們，雖然哈希已經是夠常用的了。(๑•ૅω•´๑)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什麼是哈希（Hash）">什麼是哈希（Hash）</h2><p>本來這裏不應該出現這一節的，因爲實際上大家應該都知道什麼是哈希。不過有時候爲了文章的完整性，我這裏就稍微教條性地說明一下吧。ヽ(́◕◞౪◟◕‵)ﾉ</p>
<blockquote>
<p>散列（英語：]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="哈希" scheme="http://xcoder.in/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="數據結構" scheme="http://xcoder.in/tags/%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初探 MySQL 的 Binlog]]></title>
    <link href="http://xcoder.in/2015/08/10/mysql-binlog-try/"/>
    <id>http://xcoder.in/2015/08/10/mysql-binlog-try/</id>
    <published>2015-08-10T03:39:53.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　花瓣網的搜索架構需要重構，尤其是在索引建立或者更新層面。</p>
<p>　　目前的一個架構導致的結果就是時間越久，數據本體與搜索引擎索引中的數據越不同步，相差甚大。</p>
<p>　　新的一個架構打算從 MySQL 的 Binlog 中讀取數據更新、刪除、新增等歷史記錄，並把相應信息提取出來丟到隊列中慢慢去同步。</p>
<p>　　所以我就在這裏小小去了解一下 Binlog。</p>
<h2 id="準備工作">準備工作</h2><h3 id="什麼是_Binlog">什麼是 Binlog</h3><p>　　MySQL Server 有四種類型的日誌——Error Log、General Query Log、Binary Log 和 Slow Query Log。</p>
<p>　　第一個是錯誤日誌，記錄 mysqld 的一些錯誤。第二個是一般查詢日誌，記錄 mysqld 正在做的事情，比如客戶端的連接和斷開、來自客戶端每條 Sql Statement 記錄信息；如果你想準確知道客戶端到底傳了什麼瞎 [嗶嗶] 玩意兒給服務端，這個日誌就非常管用了，不過它非常影響性能。第四個是慢查詢日誌，記錄一些查詢比較慢的 SQL 語句——這種日誌非常常用，主要是給開發者調優用的。</p>
<p>　　剩下的第三種就是 Binlog 了，包含了一些事件，這些事件描述了數據庫的改動，如建表、數據改動等，也包括一些潛在改動，比如 <code>DELETE FROM ran WHERE bing = luan</code>，然而一條數據都沒被刪掉的這種情況。除非使用 Row-based logging，否則會包含所有改動數據的 SQL Statement。</p>
<p>　　那麼 Binlog 就有了兩個重要的用途——複製和恢復。比如主從表的複製，和備份恢復什麼的。</p>
<h3 id="啓用_Binlog">啓用 Binlog</h3><p>　　通常情況 MySQL 是默認關閉 Binlog 的，所以你得配置一下以啓用它。</p>
<p>　　啓用的過程就是修改配置文件 <code>my.cnf</code> 了。</p>
<p>　　至於 <code>my.cnf</code> 位置請自行尋找。例如通過 OSX 的 <code>brew</code> 安裝的 <code>mysql</code> 默認配置目錄通常在</p>
<blockquote>
<p>/usr/local/Cellar/mysql/$VERSION/support-files/my-default.cnf</p>
</blockquote>
<p>　　這個時候需要將它拷貝到 <code>/etc/my.cnf</code> 下面。</p>
<blockquote>
<p>詳見 &lt;<a href="http://stackoverflow.com/questions/10757169/mysql-my-cnf-location" target="_blank" rel="external">StackOverflow - MySQL ‘my.cnf’ location?</a>&gt;。</p>
</blockquote>
<p>　　緊接着配置 <code>log-bin</code> 和 <code>log-bin-index</code> 的值，如果沒有則自行加上去。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">log-bin=<span class="value">master-bin</span></span></span><br><span class="line"><span class="setting">log-bin-index=<span class="value">master-bin.index</span></span></span><br></pre></td></tr></table></figure>
<p>　　這裏的 <code>log-bin</code> 是指以後生成各 Binlog 文件的前綴，比如上述使用 <code>master-bin</code>，那麼文件就將會是 <code>master-bin.000001</code>、<code>master-bin.000002</code> 等。而這裏的 <code>log-bin-index</code> 則指 binlog index 文件的名稱，這裏我們設置爲 <code>master-bin.index</code>。</p>
<p>　　如果上述工作做完之後重啓 MySQL 服務，你可以進入你的 MySQL CLI 驗證一下是否真的啓用了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u <span class="variable">$USERNAME</span> ...</span><br></pre></td></tr></table></figure>
<p>　　然後在終端裏面輸入下面一句 SQL 語句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%log_bin%'</span>;</span></span><br></pre></td></tr></table></figure>
<p>　　如果結果裏面出來這樣類似的話就表示成功了：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------+---------------------------------------+</span><br><span class="line">| Variable_name                   | Value                                 |</span><br><span class="line">+---------------------------------+---------------------------------------+</span><br><span class="line">| <span class="built_in">log</span>_bin                         | ON                                    |</span><br><span class="line">| <span class="built_in">log</span>_bin_basename                | /usr/<span class="built_in">local</span>/var/mysql/master-bin       |</span><br><span class="line">| <span class="built_in">log</span>_bin_index                   | /usr/<span class="built_in">local</span>/var/mysql/master-bin.index |</span><br><span class="line">| <span class="built_in">log</span>_bin_trust_<span class="keyword">function</span>_creators | OFF                                   |</span><br><span class="line">| <span class="built_in">log</span>_bin_use_v1_row_events       | OFF                                   |</span><br><span class="line">| sql_<span class="built_in">log</span>_bin                     | ON                                    |</span><br><span class="line">+---------------------------------+---------------------------------------+</span><br><span class="line"><span class="number">6</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>　　更多的一些相關配置可以參考這篇《<a href="http://blog.csdn.net/jolly10/article/details/13998761" target="_blank" rel="external">MySQL 的 binary log 初探</a>》。</p>
<h3 id="隨便玩玩">隨便玩玩</h3><p>　　然後你就可以隨便去執行一些數據變動的 SQL 語句了。當你執行了一堆語句之後就可以看到你的 Binlog 裏面有內容了。</p>
<p>　　如上表所示，<code>log_bin_basename</code> 的值是 <code>/usr/local/var/mysql/master-bin</code> 就是 Binlog 的基礎文件名了。</p>
<p>　　那我們進去看，比如我的這邊就有這麼幾個文件：</p>
<p><img src="binlog-files.jpg" alt="Binlog 文件"></p>
<p>　　很容易發現，裏面有 <code>master-bin.index</code> 和 <code>master-bin.000001</code> 兩個文件，這兩個文件在上文中有提到過了。</p>
<p>　　我們打開那個 <code>master-bin.index</code> 文件，會發現這個索引文件就是一個普通的文本文件，然後列舉了各 binlog 的文件名。而 <code>master-bin.000001</code> 文件就是一堆亂碼了——畢竟人家是二進制文件。</p>
<h2 id="結構解析">結構解析</h2><h3 id="索引文件">索引文件</h3><p>　　索引文件就是上文中的 <code>master-bin.index</code> 文件，是一個普通的文本文件，以換行爲間隔，一行一個文件名。比如它可能是：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master-bin<span class="number">.000001</span></span><br><span class="line">master-bin<span class="number">.000002</span></span><br><span class="line">master-bin<span class="number">.000003</span></span><br></pre></td></tr></table></figure>
<p>　　然後對應的每行文件就是一個 Binlog 實體文件了。</p>
<h3 id="Binlog_文件">Binlog 文件</h3><p>　　Binlog 的文件結構大致由如下幾個方面組成。</p>
<h4 id="文件頭">文件頭</h4><p>　　文件頭由一個四字節 Magic Number，其值爲 <code>1852400382</code>，在內存中就是 <code>&quot;\xfe\x62\x69\x6e&quot;</code>，參考 MySQL 源碼的 <a href="://github.com/mysql/mysql-server/blob/a2757a60a7527407d08115e44e889a25f22c96c6/sql/log_event.h#L187">log_event.h</a>，也就是 <code>&#39;\0xfe&#39; &#39;b&#39; &#39;i&#39; &#39;n&#39;</code>。</p>
<p>　　與平常二進制一樣，通常都有一個 Magic Number 進行文件識別，如果 Magic Number 不吻合上述的值那麼這個文件就不是一個正常的 Binlog。</p>
<h4 id="事件">事件</h4><p>　　在文件頭之後，跟隨的是一個一個事件依次排列。每個事件都由一個事件頭和事件體組成。</p>
<p>　　事件頭裏面的內容包含了這個事件的類型（如新增、刪除等）、事件執行時間以及是哪個服務器執行的事件等信息。</p>
<p>　　第一個事件是一個事件描述符，描述了這個 Binlog 文件格式的版本。接下去的一堆事件將會按照第一個事件描述符所描述的結構版本進行解讀。最後一個事件是一個銜接事件，指定了下一個 Binlog 文件名——有點類似於鏈表裏面的 <code>next</code> 指針。</p>
<p>　　根據《<a href="High-Level Binary Log Structure and Contents">High-Level Binary Log Structure and Contents</a>》所述，不同版本的 Binlog 格式不一定一樣，所以也沒有一個定性。在我寫這篇文章的時候，目前有三種版本的格式。</p>
<ul>
<li>v1，用於 MySQL 3.2.3</li>
<li>v3，用於 MySQL 4.0.2 以及 4.1.0</li>
<li>v4，用於 MySQL 5.0 以及更高版本</li>
</ul>
<p>　　實際上還有一個 v2 版本，不過只在早期 4.0.x 的 MySQL 版本中使用過，但是 v2 已經過於陳舊並且不再被 MySQL 官方支持了。</p>
<blockquote>
<p><strong>通常我們現在用的 MySQL 都是在 5.0 以上的了，所以就略過 v1 ~ v3 版本的 Binlog，如果需要了解 v1 ~ v3 版本的 Binlog 可以自行前往上述的《High-level…》文章查看。</strong></p>
</blockquote>
<h5 id="事件頭">事件頭</h5><p>　　一個事件頭有 19 字節，依次排列爲四字節的時間戳、一字節的當前事件類型、四字節的服務端 ID、四字節的當前事件長度描述、四字節的下個事件位置（方便跳轉）以及兩字節的標識。</p>
<p>　　用 ASCII Diagram 表示如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+---------+---------+---------+------------+-------------+-------+</span><br><span class="line">|<span class="string">timestamp</span>|<span class="string">type code</span>|<span class="string">server_id</span>|<span class="string">event_length</span>|<span class="string">next_position</span>|<span class="string">flags  </span>|</span><br><span class="line">|<span class="string">4 bytes  </span>|<span class="string">1 byte   </span>|<span class="string">4 bytes  </span>|<span class="string">4 bytes     </span>|<span class="string">4 bytes      </span>|<span class="string">2 bytes</span>|</span><br><span class="line">+---------+---------+---------+------------+-------------+-------+</span><br></pre></td></tr></table></figure>
<p>　　也可以字節編造一個結構體來解讀這個頭：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> BinlogEventHeader</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>   timestamp;</span><br><span class="line">    <span class="keyword">char</span>  type_code;</span><br><span class="line">    <span class="keyword">int</span>   server_id;</span><br><span class="line">    <span class="keyword">int</span>   event_length;</span><br><span class="line">    <span class="keyword">int</span>   next_position;</span><br><span class="line">    <span class="keyword">char</span>  flags[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你要直接用這個結構體來讀取數據的話，需要加點手腳。</p>
<p>因爲默認情況下 GCC 或者 G++ 編譯器會對結構體進行字節對齊，這樣讀進來的數據就不對了，因爲 Binlog 並不是對齊的。爲了統一我們需要取消這個結構體的字節對齊，一個方法是使用 <code>#pragma pack(n)</code>，一個方法是使用 <code>__attribute__((__packed__))</code>，還有一種情況是在編譯器編譯的時候強制把所有的結構體對其取消，即在編譯的時候使用 <code>fpack-struct</code> 參數，如：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ temp.cpp -o a -fpack-struct=<span class="number">1</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>　　根據上述的結構我們可以明確得到各變量在結構體裏面的偏移量，所以在 MySQL 源碼裏面（<a href="https://github.com/mysql/mysql-server/blob/5.7/libbinlogevents/include/binlog_event.h#L353" target="_blank" rel="external">libbinlogevents/include/binlog_event.h</a>）有下面幾個常量以快速標記偏移：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> EVENT_TYPE_OFFSET    <span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SERVER_ID_OFFSET     <span class="number">5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> EVENT_LEN_OFFSET     <span class="number">9</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG_POS_OFFSET       <span class="number">13</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FLAGS_OFFSET         <span class="number">17</span></span></span><br></pre></td></tr></table></figure>
<p>　　而具體有哪些事件則在 <a href="https://github.com/mysql/mysql-server/blob/5.7/libbinlogevents/include/binlog_event.h#L245" target="_blank" rel="external">libbinlogevents/include/binlog_event.h#L245</a> 裏面被定義。如有個 <code>FORMAT_DESCRIPTION_EVENT</code> 事件的 <code>type_code</code> 是 15、<code>UPDATE_ROWS_EVENT</code> 的 <code>type_code</code> 是 31。</p>
<p>　　還有那個 <code>next_position</code>，在 v4 版本中代表從 Binlog 一開始到下一個事件開始的偏移量，比如到第一個事件的 <code>next_position</code> 就是 4，因爲文件頭有一個字節的長度。然後接下去對於事件 n 和事件 n + 1 來說，他們有這樣的關係：</p>
<blockquote>
<p>next_position(n + 1) = next_position(n) + event_length(n)</p>
</blockquote>
<p>　　關於 flags 暫時不需要了解太多，如果真的想了解的話可以看看 MySQL 的<a href="http://dev.mysql.com/doc/internals/en/event-flags.html" target="_blank" rel="external">相關官方文檔</a>。</p>
<h5 id="事件體">事件體</h5><p>　　事實上在 Binlog 事件中應該是有三個部分組成，<code>header</code>、<code>post-header</code> 和 <code>payload</code>，不過通常情況下我們把 <code>post-header</code> 和 <code>payload</code> 都歸結爲事件體，實際上這個 <code>post-header</code> 裏面放的是一些定長的數據，只不過有時候我們不需要特別地關心。想要深入瞭解可以去查看 MySQL 的官方文檔。</p>
<p>　　所以實際上一個真正的事件體由兩部分組成，用 ASCII Diagram 表示就像這樣：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+=====================================+</span></span><br><span class="line">| event  | fixed part (post-header)   |</span><br><span class="line">| data   <span class="code">+----------------------------+</span></span><br><span class="line"><span class="header">|        | variable part (payload)    |</span><br><span class="line">+=====================================+</span></span><br></pre></td></tr></table></figure>
<p>　　而這個 <code>post-header</code> 對於不同類型的事件來說長度是不一樣的，同種類型來說是一樣的，而這個長度的預先規定將會在一個“格式描述事件”中定好。</p>
<h5 id="格式描述事件">格式描述事件</h5><p>　　在上文我們有提到過，在 Magic Number 之後跟着的是一個格式描述事件（Format Description Event），其實這只是在 v4 版本中的稱呼，在以前的版本里面叫起始事件（Start Event）。</p>
<p>　　在 v4 版本中這個事件的結構如下面的 ASCII Diagram 所示。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+=====================================+</span><br><span class="line">|<span class="string"> event  </span>|<span class="string"> timestamp         0 : 4    </span>|</span><br><span class="line">|<span class="string"> header +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> type_code         4 : 1    </span>|<span class="string"> = FORMAT_DESCRIPTION_EVENT = 15</span><br><span class="line"></span>|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> server_id         5 : 4    </span>|</span><br><span class="line">|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> event_length      9 : 4    </span>|<span class="string"> &gt;= 91</span><br><span class="line"></span>|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> next_position    13 : 4    </span>|</span><br><span class="line">|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> flags            17 : 2    </span>|</span><br><span class="line">+=====================================+</span><br><span class="line">|<span class="string"> event  </span>|<span class="string"> binlog_version   19 : 2    </span>|<span class="string"> = 4</span><br><span class="line"></span>|<span class="string"> data   +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> server_version   21 : 50   </span>|</span><br><span class="line">|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> create_timestamp 71 : 4    </span>|</span><br><span class="line">|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> header_length    75 : 1    </span>|</span><br><span class="line">|<span class="string">        +----------------------------+</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> post-header      76 : n    </span>|<span class="string"> = array of n bytes, one byte per event</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> lengths for all            </span>|<span class="string">   type that the server knows about</span><br><span class="line"></span>|<span class="string">        </span>|<span class="string"> event types                </span>|</span><br><span class="line">+=====================================+</span><br></pre></td></tr></table></figure>
<p>　　這個事件的 <code>type_code</code> 是 15，然後 <code>event_length</code> 是大於等於 91 的值的，這個主要取決於所有事件類型數。</p>
<p>　　因爲從第 76 字節開始後面的二進制就代表一個字節類型的數組了，一個字節代表一個事件類型的 <code>post-header</code> 長度，即每個事件類型固定數據的長度。</p>
<p>　　那麼按照上述的一些線索來看，我們能非常快地寫出一個簡單的解讀 Binlog 格式描述事件的代碼。</p>
<blockquote>
<p>如上文所述，如果需要正常解讀 Binlog 文件的話，下面的代碼編譯時候需要加上 <code>-fpack-struct=1</code> 這個參數。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> BinlogEventHeader</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>  timestamp;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> type_code;</span><br><span class="line">    <span class="keyword">int</span>  server_id;</span><br><span class="line">    <span class="keyword">int</span>  event_length;</span><br><span class="line">    <span class="keyword">int</span>  next_position;</span><br><span class="line">    <span class="keyword">short</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    FILE* fp = fopen(<span class="string">"/usr/local/var/mysql/master-bin.000001"</span>, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">int</span> magic_number;</span><br><span class="line">    fread(&amp;magic_number, <span class="number">4</span>, <span class="number">1</span>, fp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d - %s\n"</span>, magic_number, (<span class="keyword">char</span>*)(&amp;magic_number));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> BinlogEventHeader format_description_event_header;</span><br><span class="line">    fread(&amp;format_description_event_header, <span class="number">19</span>, <span class="number">1</span>, fp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BinlogEventHeader\n&#123;\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    timestamp: %d\n"</span>, format_description_event_header.timestamp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    type_code: %d\n"</span>, format_description_event_header.type_code);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    server_id: %d\n"</span>, format_description_event_header.server_id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    event_length: %d\n"</span>, format_description_event_header.event_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    next_position: %d\n"</span>, format_description_event_header.next_position);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    flags[]: %d\n&#125;\n"</span>, format_description_event_header.flags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">short</span> binlog_version;</span><br><span class="line">    fread(&amp;binlog_version, <span class="number">2</span>, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"binlog_version: %d\n"</span>, binlog_version);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> server_version[<span class="number">51</span>];</span><br><span class="line">    fread(server_version, <span class="number">50</span>, <span class="number">1</span>, fp);</span><br><span class="line">    server_version[<span class="number">50</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"server_version: %s\n"</span>, server_version);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> create_timestamp;</span><br><span class="line">    fread(&amp;create_timestamp, <span class="number">4</span>, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"create_timestamp: %d\n"</span>, create_timestamp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> header_length;</span><br><span class="line">    fread(&amp;header_length, <span class="number">1</span>, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"header_length: %d\n"</span>, header_length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> type_count = format_description_event_header.event_length - <span class="number">76</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> post_header_length[type_count];</span><br><span class="line">    fread(post_header_length, <span class="number">1</span>, type_count, fp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; type_count; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"  - type %d: %d\n"</span>, i + <span class="number">1</span>, post_header_length[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　這個時候你得到的結果有可能就是這樣的了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1852400382</span> - �binpz�</span><br><span class="line">BinlogEventHeader</span><br><span class="line">&#123;</span><br><span class="line">    timestamp: <span class="number">1439186734</span></span><br><span class="line">    type_code: <span class="number">15</span></span><br><span class="line">    server_id: <span class="number">1</span></span><br><span class="line">    event_length: <span class="number">116</span></span><br><span class="line">    next_position: <span class="number">120</span></span><br><span class="line">    flags[]: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">binlog_version: <span class="number">4</span></span><br><span class="line">server_version: <span class="number">5.6</span><span class="number">.24</span>-<span class="built_in">log</span></span><br><span class="line">create_timestamp: <span class="number">1439186734</span></span><br><span class="line">header_length: <span class="number">19</span></span><br><span class="line">  - type <span class="number">1</span>: <span class="number">56</span></span><br><span class="line">  - type <span class="number">2</span>: <span class="number">13</span></span><br><span class="line">  - type <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">  - type <span class="number">4</span>: <span class="number">8</span></span><br><span class="line">  - type <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">  - type <span class="number">6</span>: <span class="number">18</span></span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure>
<p>　　一共會輸出 40 種類型（從 1 到 40），如官方文檔所說，這個數組從 <code>START_EVENT_V3</code> 事件開始（<code>type_code</code> 是 1）。</p>
<h5 id="跳轉事件">跳轉事件</h5><p>　　跳轉事件即 <code>ROTATE_EVENT</code>，其 <code>type_code</code> 是 4，其 <code>post-header</code> 長度爲 8。</p>
<p>　　當一個 Binlog 文件大小已經差不多要分割了，它就會在末尾被寫入一個 <code>ROTATE_EVENT</code>——用於指出這個 Binlog 的下一個文件。</p>
<p>　　它的 <code>post-header</code> 是 8 字節的一個東西，內容通常就是一個整數 <code>4</code>，用於表示下一個 Binlog 文件中的第一個事件起始偏移量。我們從上文就能得出在一般情況下這個數字只可能是四，就偏移了一個魔法數字。當然我們講的是在 v4 這個 Binlog 版本下的情況。</p>
<p>　　然後在 <code>payload</code> 位置是一個字符串，即下一個 Binlog 文件的文件名。</p>
<h5 id="各種不同的事件體">各種不同的事件體</h5><p>　　由於篇幅原因這裏就不詳細舉例其它普通的不同事件體了，具體的詳解在 <a href="http://dev.mysql.com/doc/internals/en/event-data-for-specific-event-types.html" target="_blank" rel="external">MySQL 文檔</a>中一樣有介紹，用到什麼類型的事件體就可以自己去查詢。</p>
<h2 id="小結">小結</h2><p>　　本文大概介紹了 Binlog 的一些情況，以及 Binlog 的內部二進制解析結構。方便大家造輪子用——不然老用別人的輪子，只知其然而不知其所以然多沒勁。</p>
<p>　　好了要下班了，就寫到這裏過吧。</p>
<h2 id="參考">參考</h2><ol>
<li><a href="http://my.oschina.net/leejun2005/blog/75273" target="_blank" rel="external">MySQL’s binary log 結構簡介</a>，目測原文在 <a href="http://www.taobaodba.com/html/474_mysqls-binary-log_details.html" target="_blank" rel="external">TaobaoDBA</a>（已無法訪問）</li>
<li><a href="http://www.linuxidc.com/Linux/2014-09/107095.htm" target="_blank" rel="external">MySQL Binlog 的介紹</a></li>
<li><a href="http://blog.csdn.net/jolly10/article/details/13998761" target="_blank" rel="external">MySQL 的 binary log 初探</a></li>
<li><a href="http://dev.mysql.com/doc/internals/en/binary-log-structure-and-contents.html" target="_blank" rel="external">High-Level Binary Log Structure and Contents</a> and related official documents</li>
<li><a href="http://stackoverflow.com/questions/21912098/pragma-pack-vs-fpack-struct-for-intel-c" target="_blank" rel="external">#pragma pack vs -fpack-struct for Intel C</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　花瓣網的搜索架構需要重構，尤其是在索引建立或者更新層面。</p>
<p>　　目前的一個架構導致的結果就是時間越久，數據本體與搜索引擎索引中的數據越不同步，相差甚大。</p>
<p>　　新的一個架構打算從 MySQL 的 Binlog 中讀取數據更新、刪除、新增等歷史記錄]]>
    </summary>
    
      <category term="Binary Log" scheme="http://xcoder.in/tags/Binary-Log/"/>
    
      <category term="Binlog" scheme="http://xcoder.in/tags/Binlog/"/>
    
      <category term="MySQL" scheme="http://xcoder.in/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 中使用 Redis 來實現定時任務]]></title>
    <link href="http://xcoder.in/2015/06/05/scheduled-task-using-redis/"/>
    <id>http://xcoder.in/2015/06/05/scheduled-task-using-redis/</id>
    <published>2015-06-05T07:23:51.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　好久沒寫博文了，最近在跟隨着公司大牛們的腳步祕密研發新產品中。</p>
<p>　　不過前幾天有一個小需求的東西可以提出來寫一點點小乾貨兒跟大家分享分享。米娜桑會的就可以忽略了，反正我也是隨便寫的；如果覺得本文對你有用的話還請多多支持喵。(●´ω｀●)ゞ</p>
<h2 id="序">序</h2><p>　　本文所說的定時任務或者說計劃任務並不是很多人想象中的那樣，比如說每天凌晨三點自動運行起來跑一個腳本。這種都已經爛大街了，隨便一個 <strong><a href="https://wiki.archlinux.org/index.php/Cron" target="_blank" rel="external">Crontab</a></strong> 就能搞定了。</p>
<p>　　這裏所說的定時任務可以說是計時器任務，比如說用戶觸發了某個動作，那麼從這個點開始過二十四小時我們要對這個動作做點什麼。那麼如果有 1000 個用戶觸發了這個動作，就會有 1000 個定時任務。於是這就不是 <strong>Cron</strong> 範疇裏面的內容了。</p>
<p>　　舉個最簡單的例子，一個用戶推薦了另一個用戶，我們定一個二十四小時之後的任務，看看被推薦的用戶有沒有來註冊，如果沒註冊就給他搞一條短信過去。Σ&gt;―(〃°ω°〃)♡→</p>
<h2 id="最初的設想">最初的設想</h2><p>　　一開始我是想把這個計時器做在內存裏面直接調用的。</p>
<p>　　考慮到 Node.js 的定時並不是那麼準確（無論是 <code>setTimeout</code> 還是 <code>setInterval</code>），所以本來打算自己維護這個定時器隊列。</p>
<p>　　又考慮到 Node.js 原生對象比較耗內存。之前我用 <code>JSON</code> 對象存了一本字典，約十二萬多的詞條，原文件大概也就五六兆，用 Node.js 的原生對象一存居然有五六百兆的內存佔用——所以打算這個定時器隊列用 C++ 來寫 addon。</p>
<p>　　考慮到任何時候插入的任務都有可能在已有的任務之前或者之後，所以本來想用 C++ 來寫一個<a href="http://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E2%80%94%E6%9C%80%E5%B0%8F%E5%A0%86" target="_blank" rel="external">小根堆</a>。每次用戶來一個任務的時候就將這個任務插入到堆中。</p>
<p>　　如果按照上述方法的話，再加上對時間要求掐得也不是那麼緊，於是就是一個不斷的 <code>process.nextTick()</code> 的過程。</p>
<p>　　在 <code>process.nextTick()</code> 當中執行這麼一個函數：</p>
<ol>
<li>從小根堆中不斷獲取堆頂的任務並處理，一直處理到堆頂任務的執行時間大於當前時間爲止。</li>
<li>繼續 <code>process.nextTick()</code> 來讓下一個 tick 執行步驟 1 中的流程。</li>
</ol>
<p>　　所以最後就是一邊往小根堆插入任務，另一邊通過不斷 <code>process.nextTick()</code> 消費任務的這麼一個過程。</p>
<p>　　最後，爲了考慮到程序重啓的時候內存數據會丟失，還應該做一個持久化的事情——在每次插入任務的時候順便往持久化中間件中插一條副本，比如 MySQL、MongoDB、Redis、Riak 等等任何三方依賴。消費任務的時候順便把中間件中的這條任務數據給刪除。</p>
<p>　　也就是說中間件中永遠存的就是當前尚未完成的任務。每當程序重啓的時候都先從中間件中把所有任務讀取進來重建一下堆，然後就能繼續工作了。</p>
<blockquote>
<p>如果當時我沒有發現 Redis 的這個妙用的話，上述的流程將會是我實現我們定時任務的流程了。</p>
</blockquote>
<h2 id="Redis_妙用">Redis 妙用</h2><p>　　在 Redis 的 2.8.0 版本之後，其推出了一個新的特性——鍵空間消息（<a href="http://redis.io/topics/notifications" target="_blank" rel="external">Redis Keyspace Notifications</a>），它配合 2.0.0 版本之後的 <code>SUBSCRIBE</code> 就能完成這個定時任務的操作了，<strong>不過定時的單位是秒</strong>。</p>
<h3 id="Publish_/_Subscribe">Publish / Subscribe</h3><p>　　Redis 在 2.0.0 之後推出了 <a href="http://redis.io/topics/pubsub" target="_blank" rel="external">Pub / Sub</a> 的指令，大致就是說一邊給 Redis 的特定頻道發送消息，另一邊從 Redis 的特定頻道取值——形成了一個簡易的消息隊列</p>
<p>　　比如我們可以往 <code>foo</code> 頻道推一個消息 <code>bar</code>，那麼就可以直接：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">PUBLISH</span> foo bar</span><br></pre></td></tr></table></figure>
<p>　　另一邊我們在客戶端訂閱 <code>foo</code> 頻道就能接受到這個消息了。</p>
<p>　　舉個例子，如果在 Node.js 裏面使用 <a href="https://github.com/luin/ioredis" target="_blank" rel="external">ioredis</a> 這個包那麼看起來就會像這樣：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Redis = <span class="built_in">require</span>(<span class="string">"ioredis"</span>);</span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Redis(<span class="comment">/** 連接信息 */</span>);</span><br><span class="line">sub.once(<span class="string">"connect"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 假設我們需要選擇 redis 的 db，因爲實際上我們不會去污染默認的 db 0</span></span><br><span class="line">    sub.select(DB_NUMBER, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) process.exit(<span class="number">4</span>);</span><br><span class="line">        sub.subscribe(<span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//... 訂閱頻道成功</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽從 `foo` 來的消息</span></span><br><span class="line">sub.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel, msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(channel, msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Redis_Keyspace_Notifications">Redis Keyspace Notifications</h3><p>　　在 Redis 裏面有一些事件，比如鍵到期、鍵被刪除等。然後我們可以通過配置一些東西來讓 Redis 一旦觸發這些事件的時候就往特定的 Channel 推一條消息。</p>
<p>　　本文所涉及到的需求的話我們所需要關心的事件是 <code>EXPIRE</code> 即過期事件。</p>
<p>　　大致的流程就是我們給 Redis 的某一個 db 設置過期事件，使其鍵一旦過期就會往特定頻道推消息，我在自己的客戶端這邊就一直消費這個頻道就好了。</p>
<p>　　以後一來一條定時任務，我們就把這個任務狀態壓縮成一個鍵，並且過期時間爲距這個任務執行的時間差。那麼當鍵一旦到期，就到了任務該執行的時間，Redis 自然會把過期消息推去，我們的客戶端就能接收到了。這樣一來就起到了定時任務的作用。</p>
<h4 id="消息類型">消息類型</h4><p>　　當達到一定條件後，有兩種類型的這種消息會被觸發，用哪個需要自己選了。舉個例子，我們刪除了在 db 0 中一個叫 <code>foo</code> 的鍵，那麼系統會往兩個頻道推消息，一個是 <code>del</code> 事件頻道推 <code>foo</code> 消息，另一個是 <code>foo</code> 頻道推 <code>del</code> 消息，它們小倆口被系統推送的指令分別等價於：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">PUBLISH</span> __keyspace<span class="variable">@0__</span><span class="symbol">:foo</span> del</span><br><span class="line"><span class="constant">PUBLISH</span> __keyevent<span class="variable">@0__</span><span class="symbol">:del</span> foo</span><br></pre></td></tr></table></figure>
<p>　　其中往 <code>foo</code> 推送 <code>del</code> 的頻道名爲 <code>__keyspace@0__:foo</code>，即是 <code>&quot;__keyspace@&quot; + DB_NUMBER + &quot;__:&quot; + KEY_NAME</code>；而 <code>del</code> 的頻道名爲 <code>&quot;__keyevent@&quot; + DB_NUMBER + &quot;__:&quot; + EVENT_NAME</code>。</p>
<h4 id="配置">配置</h4><p>　　即使你的 Redis 版本達標了，但是 Redis 默認是關閉這個功能的，你需要修改配置文件來打開它，或者直接在 CLI 裏面通過指令修改。這裏就說說配置文件的修改吧。</p>
<p>　　如果不想看我在這裏羅裏吧嗦的，也可以直接去看 Redis 的<a href="http://redis.io/topics/notifications#configuration" target="_blank" rel="external">相關文檔</a>。</p>
<p>　　首先打開 Redis 的配置文件，在不同的系統和安裝方式下文件位置可能不同，比如通過 <code>brew</code> 安裝的 MacOS 下可能是在 <code>/usr/local/etc/redis.conf</code> 下面，通過 <code>apt-get</code> 安裝的 Ubuntu 下可能是在 <code>/etc/redis/redis.conf</code> 下，總之找到配置文件。<strong>或者自己寫一個配置文件，啓動的時候指定配置文件地址就好。</strong></p>
<p>　　然後找到一項叫 <code>notify-keyspace-events</code> 的地方，如果找不到則自行添加，其值可以是 <code>Ex</code>、<code>Klg</code> 等等。這些字母的具體含義如下所示：</p>
<ul>
<li><strong>K</strong>，表示 <code>keyspace</code> 事件，有這個字母表示會往 <code>__keyspace@&lt;db&gt;__</code> 頻道推消息。</li>
<li><strong>E</strong>，表示 <code>keyevent</code> 事件，有這個字母表示會往 <code>__keyevent@&lt;db&gt;__</code> 頻道推消息。</li>
<li><strong>g</strong>，表示一些通用指令事件支持，如 <code>DEL</code>、<code>EXPIRE</code>、<code>RENAME</code> 等等。</li>
<li><strong>$</strong>，表示字符串（String）相關指令的事件支持。</li>
<li><strong>l</strong>，表示列表（List）相關指令事件支持。</li>
<li><strong>s</strong>，表示集合（Set）相關指令事件支持。</li>
<li><strong>h</strong>，哈希（Hash）相關指令事件支持。</li>
<li><strong>z</strong>，有序集（Sorted Set）相關指令事件支持。</li>
<li><strong>x</strong>，過期事件，與 <strong>g</strong> 中的 <code>EXPIRE</code> 不同的是，<strong>g</strong> 的 <code>EXPIRE</code> 是指執行 <code>EXPIRE key ttl</code> 這條指令的時候順便觸發的事件，而這裏是指那個 <code>key</code> 剛好過期的這個時間點觸發的事件。</li>
<li><strong>e</strong>，驅逐事件，一個 <code>key</code> 由於內存上限而被驅逐的時候會觸發的事件。</li>
<li><strong>A</strong>，<code>g$lshzxe</code> 的別名。也就是說 <code>AKE</code> 的意思就代表了所有的事件。</li>
</ul>
<p>　　結合上述列表我們就能拼湊出自己所需要的事件支持字符串了，在我的需求中我只需要 <code>Ex</code> 就可以滿足了，所以配置項就是這樣的：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-<span class="keyword">events</span> Ex</span><br></pre></td></tr></table></figure>
<p>　　然後保存配置文件，啓動 Redis 就啓用了過期事件的支持了。</p>
<h4 id="實踐">實踐</h4><p>　　我們先說任務的創造者吧。由於這裏 <strong>Redis</strong> 的事件只會傳鍵名，並不會傳鍵值，而過期事件觸發的時候那個鍵已經沒了，你也無法獲取鍵值，加上我的主系統和任務系統是分佈式的，所以就把所有需要的信息往鍵名塞。</p>
<p>　　一個最簡單的鍵名設計就是 <code>任務類型 + &quot;:&quot; + JSON.stringify 化後的參數數組</code>；更有甚者可以直接把任務類型替換成所需的函數路徑，比如需要執行這個任務的函數在 <code>task/foo/bar</code> 文件下面的 <code>baz</code> 函數，參數 <code>arguments</code> 數組爲 <code>[ 1, 2 ]</code>，那麼鍵名的設計可以是 <code>task/foo/bar.baz:[1,2]</code>，反正我們只需要觸發這個鍵，用不着去查詢這個鍵。等到真正過期了任務系統接收到這個鍵名的時候再一一解析，得到需要執行 <code>task/foo/bar.baz</code> 這個消息，並且網函數裏面傳入 <code>[1,2]</code> 這個 <code>arguments</code>。</p>
<p>　　所以當接收到一個定時任務的時候，我們得到消息、函數名、過期時間參數，這個函數可以如下設計：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 我們假設 redis 是一個 ioredis 的對象 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sampleTaskMaker = <span class="function"><span class="keyword">function</span>(<span class="params">message, func, timeout</span>) </span>&#123;</span><br><span class="line">    message = <span class="built_in">JSON</span>.stringify(message);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Received a new task:"</span>, func, message, <span class="string">"after "</span> + timeout + <span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這裏的 uuid 是 npm 一個包</span></span><br><span class="line">    <span class="comment">// 生成一個唯一 uuid 的目的是爲了防止兩個任務用了相同的函數和參數，那麼</span></span><br><span class="line">    <span class="comment">// 鍵名可能會重複並覆蓋的情況</span></span><br><span class="line">    <span class="comment">// uuid 的文檔爲 https://www.npmjs.com/package/node-uuid</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 這裏的 ❤️ 是一個分隔符，冒號是分割 uuid 和後面內容的，而 ❤️ 是分割函數名</span></span><br><span class="line">    <span class="comment">// 和消息的</span></span><br><span class="line">    <span class="keyword">var</span> key = uuid.v1().replace(<span class="regexp">/-/g</span>, <span class="string">""</span>) +</span><br><span class="line">        <span class="string">":❤️"</span> + func + <span class="string">"❤️"</span> + message;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    redis.multi()</span><br><span class="line">        .set(key, content)</span><br><span class="line">        .expire(key, timeout)</span><br><span class="line">        .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">"Failed to publish EXPIRE EVENT for "</span> + content);</span><br><span class="line">                <span class="built_in">console</span>.error(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Ioredis 的穩定可以<a href="https://github.com/luin/ioredis" target="_blank" rel="external">點此</a>查看。</p>
</blockquote>
<p>　　然後在任務系統裏面的一開始監聽這個過期頻道：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assign 是 sugarjs 裏面的函數</span></span><br><span class="line"><span class="comment">// 把 db 塞到字符串裏面的 &#123;db&#125; 裏去</span></span><br><span class="line"><span class="keyword">var</span> subscribeKey = <span class="string">"__keyevent@&#123;db&#125;__:expired"</span>.assign(&#123; db: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假設 sub 是 ioredis 的對象</span></span><br><span class="line">sub.once(<span class="string">"connect"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 假設我們需要選擇 redis 的 db，因爲實際上我們不會去污染默認的 db 0</span></span><br><span class="line">    sub.select(<span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) process.exit(<span class="number">4</span>);</span><br><span class="line">        sub.subscribe(<span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//... 訂閱頻道成功</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽從 `foo` 來的消息</span></span><br><span class="line">sub.on(<span class="string">"message"</span>, sampleOnExpired);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 我們這裏選擇 db 1 是因爲一旦開啓過期事件監聽，那麼這個 db 的所有過期事件都會被髮送。爲了不跟正常使用的 redis 過期鍵混淆，我們爲這個事情專門用一個新的 db。比如我們在自己正常使用的 db 0 裏面監聽了，那麼不是我們任務觸發的過期事件也會傳過來，這個時候我們解析的鍵名就不對了。</p>
</blockquote>
<p>　　最後就是我們的 <code>sampleOnExpired</code> 函數了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sampleOnExpired = <span class="function"><span class="keyword">function</span>(<span class="params">channel, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// UUID:❤️func❤️params</span></span><br><span class="line">    <span class="keyword">var</span> body = key.split(<span class="string">"❤️"</span>);</span><br><span class="line">    <span class="keyword">if</span>(body.length &lt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出 body 第一位爲 func</span></span><br><span class="line">    <span class="keyword">var</span> func = body[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推出前兩位，後面剩下的有可能是參數裏面自帶 ❤️ 而被分割，所以要拼回去</span></span><br><span class="line">    body.shift(); body.shift();</span><br><span class="line">    <span class="keyword">var</span> params = body.join(<span class="string">"❤️"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然後把 params 傳入 func 去執行</span></span><br><span class="line">    <span class="comment">// func:</span></span><br><span class="line">    <span class="comment">//   path1/path2.func</span></span><br><span class="line">    func = func.split(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span>(func.length !== <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"Bad params for task:"</span>, func.join(<span class="string">"."</span>), <span class="string">"-"</span>, params);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> path = func[<span class="number">0</span>];</span><br><span class="line">    func = func[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mod;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mod = <span class="built_in">require</span>(<span class="string">"./tasks/"</span> + path);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"Failed to load module"</span>, path);</span><br><span class="line">        <span class="built_in">console</span>.error(e.stack);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mod[func].apply(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(params));</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"Failed to call function"</span>, path, <span class="string">"-"</span>, func, <span class="string">"-"</span>, params);</span><br><span class="line">            <span class="built_in">console</span>.error(e.stack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　這個簡易的架子搭好後，你只需要去寫一堆任務執行函數，然後在生成任務的時候把相應參數傳給 <code>sampleTaskMaker</code> 就好了。Redis 會自動過期並且觸發事件給你的 <code>sampleOnExpired</code> 函數，然後就會去執行相應的任務處理函數了。</p>
<h2 id="小結">小結</h2><p>　　其實這個需求在我們項目目前就是給用戶定時發提醒短信用的。如果沒有發現 Redis 的這個妙用，我還是會去用<a href="#最初的設想">第二節</a>裏面的方法來寫的。其實這期間也有考慮過用 RabbitMQ，不過貌似它的定時消息需要做一些 Hack，比較麻煩，最後就放棄了。</p>
<p>　　Redis 的這個方法其實是我在谷歌搜出來的，別人在 StackOverflow 回答的答案。我參考了之後用我自己的方法實現了出來，並且把代碼的關鍵部分提取出來整理成這篇小文，還希望能給各位看官一些用吧，望打賞。</p>
<p>　　如果沒有什麼用也憋噴我，畢竟我是個蒟蒻。有更好的方法希望留個言，望告知。謝謝。(´,,•ω•,,)♡</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　好久沒寫博文了，最近在跟隨着公司大牛們的腳步祕密研發新產品中。</p>
<p>　　不過前幾天有一個小需求的東西可以提出來寫一點點小乾貨兒跟大家分享分享。米娜桑會的就可以忽略了，反正我也是隨便寫的；如果覺得本文對你有用的話還請多多支持喵。(●´ω｀●)ゞ</p>
<h2 ]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="Redis" scheme="http://xcoder.in/tags/Redis/"/>
    
      <category term="定時任務" scheme="http://xcoder.in/tags/%E5%AE%9A%E6%99%82%E4%BB%BB%E5%8B%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remilia 結構圖]]></title>
    <link href="http://xcoder.in/2015/01/08/remilia-structure/"/>
    <id>http://xcoder.in/2015/01/08/remilia-structure/</id>
    <published>2015-01-08T08:47:17.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="蕾米莉亞？">蕾米莉亞？</h2><p>其實這是花瓣的一個入庫系統結構圖，蕾米莉亞是這個項目的名字。</p>
<h2 id="結構圖">結構圖</h2><p><img src="pic.jpg" alt="Remilia"></p>
<p>設計得不好，純屬做歸檔。</p>
<p>其中 SanaeHDCS 是另一套系統，給 RemiliaHDPS 提供數據的。</p>
<h3 id="Data_Layer">Data Layer</h3><p>主要分爲 Bathtub，Dryer，Vampire 三個部分。</p>
<h4 id="Bathtub_浴缸">Bathtub 浴缸</h4><p>由 SanaeHDCS 提供的數據，存儲在 MongoDB 當中。</p>
<h4 id="Dryer_吹轟雞">Dryer 吹轟雞</h4><p>將 Bathtub 出來的溼數據變成乾貨的解析器，根據不同的數據用不同的規則進行解析。</p>
<h4 id="Vampire_血族">Vampire 血族</h4><p>全名其實是 Vampire Coffin，只不過把這個寫到項目裏面看着貌似不是很吉利，於是取了前半部分。吹轟機處理好的幹活會存儲在這邊，實際上也是<br>MongoDB 裏面。然後 Vampire 提供給外部接口，讓其能夠用正確的姿勢獲取正確的乾貨數據。</p>
<h3 id="Fake_Internet">Fake Internet</h3><p>一個視窗。</p>
<h3 id="Fake_Koumakan">Fake Koumakan</h3><p>假的紅魔館，裏面一堆 Puppet。</p>
<blockquote>
<p>每個 Puppet 都有自己的屬性、人格、作息時間和生活。</p>
</blockquote>
<h2 id="01_/_12_/_2015">01 / 12 / 2015</h2><p>重新設計了 Remilia 結構圖。</p>
<p><img src="new.jpg" alt="Remilia"></p>
<h2 id="最後">最後</h2><p>好吧還是我的腦洞太大了。我知道你們看着這貨不知所云。</p>
<p>好吧忘了這個東西吧，我只是無聊發一篇而已。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="蕾米莉亞？">蕾米莉亞？</h2><p>其實這是花瓣的一個入庫系統結構圖，蕾米莉亞是這個項目的名字。</p>
<h2 id="結構圖">結構圖</h2><p><img src="pic.jpg" alt="Remilia"></p>
<p>設計得不好，純屬做歸檔。]]>
    </summary>
    
      <category term="Remilia" scheme="http://xcoder.in/tags/Remilia/"/>
    
      <category term="蕾米莉亞" scheme="http://xcoder.in/tags/%E8%95%BE%E7%B1%B3%E8%8E%89%E4%BA%9E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 C++ 中鏈接 C 的 文件]]></title>
    <link href="http://xcoder.in/2014/12/10/link-c-on-gpp/"/>
    <id>http://xcoder.in/2014/12/10/link-c-on-gpp/</id>
    <published>2014-12-10T07:30:32.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="原因">原因</h2><p>由於某些原因，我寫了個很搓的<a href="https://github.com/XadillaX/xmempool" target="_blank" rel="external">內存池</a>（C 版本的）。</p>
<p>然後我想到了把之前寫的一個 Node.js 包 <a href="https://github.com/XadillaX/thmclrx" target="_blank" rel="external">thmclrx</a> 的更挫的“僞·內存池”用新寫的內存池去替換掉。(❛◡❛✿)</p>
<p>然後問題就來了，我貌似不能控制 node-gyp 去用 G++ 編譯 <code>*.c</code> 文件，這樣的話所有文件編譯好之後鏈接 <code>*.o</code> 文件會出問題。雖然鏈接的時候沒報錯，但是使用的時候就會報這麼個錯 (;´༎ຶД༎ຶ`)：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜ thmclrx git:(master) ✗ node <span class="built_in">test</span>/test.js</span><br><span class="line">dyld: lazy symbol binding failed: Symbol not found: __Z16xmem_create_poolj</span><br><span class="line">  Referenced from: /Users/.../code/huaban/thmclrx/build/Release/thmclrx.node</span><br><span class="line">  Expected <span class="keyword">in</span>: dynamic lookup</span><br><span class="line"></span><br><span class="line">dyld: Symbol not found: __Z16xmem_create_poolj</span><br><span class="line">  Referenced from: /Users/.../code/huaban/thmclrx/build/Release/thmclrx.node</span><br><span class="line">  Expected <span class="keyword">in</span>: dynamic lookup</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]    <span class="number">52501</span> trace <span class="built_in">trap</span>  node <span class="built_in">test</span>/test.js</span><br></pre></td></tr></table></figure>
<p>大致意思就是說在我編譯好鏈接好的 <code>thmclrx.node</code> 中找不到 <code>__Z16xmem_create_poolj</code> 這個符號，也就是說 <code>xmempool.o</code> 這個用 C 編譯出來的文件並沒有正確被鏈接。</p>
<h2 id="假想方案">假想方案</h2><h3 id="假想一">假想一</h3><p>一開始我想找的是“如何在 node-gyp 中手動選擇編譯器”，即不讓機器自動選擇 GCC 去編譯 <code>*.c</code> 文件。後來無果。ル||☛_☚|リ</p>
<h3 id="假想二">假想二</h3><p>再後來我想開了，於是決定讓編譯的時候去識別我在跟 C 說話還是跟 C++ 說話。(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</p>
<h2 id="解決方案">解決方案</h2><p>於是我找到了這麼個帖子：<a href="http://grokbase.com/t/gg/nodejs/14amregx72/linking-c-sources-files-in-cc-files" target="_blank" rel="external">http://grokbase.com/t/gg/nodejs/14amregx72/linking-c-sources-files-in-cc-files</a></p>
<p>他貌似也遇到了跟我相似的問題。下面這個提問者自己提出了這樣的回答：</p>
<blockquote>
<p>Nevermind, found my own answer after finally hitting the right google search terms.</p>
<p>Added</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//... source code here...</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>So that the CPP compiler would know I was talking C and not CPP :)</p>
</blockquote>
<p>答案的大意就是在你的 C 頭文件中添加上面 blahblah 一大段宏，好讓 C++ 的編譯器知道它是在跟 C 的中間文件交流而不是 C++，這樣的話鏈接的時候就能正常接軌了。於是我在我的新版 <a href="https://github.com/XadillaX/xmempool/commit/b06351836c9b51952a3d98c438df6626dda8738c" target="_blank" rel="external">xmempool</a> 的頭文件裏面就已經添加上了這兩段話了。</p>
<h2 id="事後煙">事後煙</h2><p>其實以前我也老在別的項目裏面看到這個 <code>#ifdef __cplusplus</code> 的宏定義，只不過以前不知道什麼意思。</p>
<p>今天通過這麼一件事情終於知道了它的用途了，新技能 get √。</p>
<p>ε(*´･∀･｀)зﾞ</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="原因">原因</h2><p>由於某些原因，我寫了個很搓的<a href="https://github.com/XadillaX/xmempool" target="_blank" rel="external">內存池</a>（C 版本的）。</p>
<p>然後我]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何生成一個覆蓋廣的色板]]></title>
    <link href="http://xcoder.in/2014/10/16/generate-color-space/"/>
    <id>http://xcoder.in/2014/10/16/generate-color-space/</id>
    <published>2014-10-16T03:00:54.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="用途">用途</h2><p>　　在主題色提取的過程中，要把顏色加入搜索引擎。但是如果是真彩色任意值加進去的話，對於搜索的時候來說無疑是一個複雜的操作。搜索條件要各種計算距離什麼的。</p>
<p>　　於是一個妥協的做法就是提供一套調色板，保證所有顏色都被吸納到調色板中的某一色值當中。</p>
<p>　　那麼這個時候調色板的覆蓋率以及距離什麼的就比較重要了。本文就講如何生成一套看起來還不錯的自用“標準色板”。</p>
<h2 id="Windows_色板">Windows 色板</h2><p>　　一開始我用了一套 256 色的色板，不知道哪裏搞來的 Windows 色板。</p>
<p>　　由於顏色太多，不好貼代碼，我就直接把鏈接貼過來了：</p>
<blockquote>
<p><a href="https://github.com/XadillaX/thmclrx/blob/4a5bff429f25294af7111de800063ffd90cce1d8/src/common.cpp#L29" target="_blank" rel="external">點我萌萌噠 ฅ(๑<em>д</em>๑)ฅ!!</a></p>
</blockquote>
<p>　　這一套色板大致的效果如下：</p>
<style>
#standard-256 {
    line-height: 10px;
    padding: 0;
    margin: 0;
}
#standard-256 span {
    width: 40px;
    height: 20px;
    display: inline-block;
}
</style>

<div class="well"><div id="standard-256"></div></div>

<script src="http://blog.xcoder.in/theme-color-slide/palette.js"></script>
<script>
$(function()
{
    for (var i = 0; i < palette.length; i++)
    {
        var block = "<span style=\"background: rgba(" +
            palette[i][0] + ", " + palette[i][1] + ", " +
            palette[i][2] + ", 1);\"></span>";
        $("#standard-256").append(block);
    }
});
</script>

<h2 id="生成更好的色板">生成更好的色板</h2><p>　　我指的更好並不一定真的比之前找到的 256 色要好，畢竟上面那個是人家智慧和勞動的結晶。我指的更好是顏色更多，但是偏差又不會太大。</p>
<p>　　理論上我們能按照那種規則生成比真彩色少的任意種數的色板。</p>
<h3 id="相關的色彩模式">相關的色彩模式</h3><p>　　這裏有必要重新普及下 N 多種色彩模式中的其中兩種，也就是我們今天生成一個色板所用到的兩種模式。</p>
<h4 id="RGB_色彩模式">RGB 色彩模式</h4><p>　　這個大家都已經耳熟能詳了，無非是 RGB 通道中的分量結合起來生成的一種顏色。</p>
<blockquote>
<p>RGB 色彩模式是工業界的一種顏色標準，是通過對紅 (R)、綠 (G)、藍 (B)三個顏色通道的變化以及它們相互之間的疊加來得到各式各樣的顏色的，RGB 即是代表紅、綠、藍三個通道的顏色，這個標準幾乎包括了人類視力所能感知的所有顏色，是目前運用最廣的顏色系統之一。</p>
<p>使用 RGB 模型爲圖像中每一個像素的 RGB 分量分配一個 0 ~ 255 範圍內的強度值。RGB 圖像只使用三種顏色，就可以使它們按照不同的比例混合，在屏幕上呈現 16777216 (<code>256 * 256 * 256</code>) 種顏色。</p>
</blockquote>
<h4 id="HSL_色彩模式">HSL 色彩模式</h4><blockquote>
<p>HSL 色彩模式是工業界的一種顏色標準，是通過對色相 (H)、飽和度 (S)、明度 (L) 三個顏色通道的變化以及它們相互之間的疊加來得到各式各樣的顏色的，HSL 即是代表色相，飽和度，明度三個通道的顏色，這個標準幾乎包括了人類視力所能感知的所有顏色，是目前運用最廣的顏色系統之一。</p>
</blockquote>
<p>　　HSL 色彩模式就是今天的主角了。我們將會用 HSL 生成一張類似下圖的色板，而色板的粒度將會與你決定色板的顏色數量相關：</p>
<p><img src="SqfinPalette-RealColorWheel-RGB-14inwide72dpi-1024x437.png" alt="HSL Color Space"></p>
<h3 id="代碼實現">代碼實現</h3><p>　　爲了簡化代碼，我們暫時不考慮飽和度，也就是說所有顏色讓它飽和度都爲 <strong>100%</strong>。</p>
<p>　　而且實際上色相是在一個圓裏面的 0° ~ 360°，那麼也就是說我們只需要做兩步就是了：</p>
<ol>
<li>色相 0° ~ 360° 循環；</li>
<li>以及明度 0% ~ 100% 循環。</li>
</ol>
<p>　　在這裏我定了一個步長：色相以 10° 爲一個步長，明度以 5% 爲一個步長。並且剔除 RGB 相等的黑白灰色。</p>
<blockquote>
<p>當然這裏步長完全可以按照自己的喜好來。</p>
</blockquote>
<p>　　我們以前端的 Javascript 爲例，能想到下面的一段代碼：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">36</span>; j++) &#123;</span><br><span class="line">            $(<span class="string">"#palette"</span>).append(<span class="string">"&lt;div class='color'&gt;&lt;/div&gt;"</span>);</span><br><span class="line">            $(<span class="string">".color"</span>).eq(count++).css(<span class="string">"background-color"</span>, <span class="string">"hsl("</span> + (j * <span class="number">10</span>) + <span class="string">", "</span> + <span class="string">"100%, "</span> + <span class="built_in">parseInt</span>(((i + <span class="number">1</span>) / <span class="number">21</span>) * <span class="number">100</span>) + <span class="string">"%)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#palette"</span>).append(<span class="string">"&lt;div style='clear: both;'&gt;&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　這裏需要注意的是，實際上我明度的步長是 <code>(100 / 22)</code>。然後 <code>0</code> 和 <code>100</code> 這兩個明度我們另外拎出來，所以只取了 1 ~ 21 的明度。</p>
<p>　　剩下的就是跟剛纔說的一樣，各色相的各明度生成一個 HSL 顏色賦值給 <code>background-color</code>。</p>
<p>　　接下去我們生成一個灰色條的色板，專治灰黑白。這個時候實際上我們可以直接用 RGB 搞定：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#palette"</span>).append(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">    $(<span class="string">"#palette"</span>).append(<span class="string">"&lt;div class='color'&gt;&lt;/div&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">parseInt</span>(((<span class="number">19</span> - i) / <span class="number">19</span>) * <span class="number">255</span>);</span><br><span class="line">    $(<span class="string">".color"</span>).eq(count++).css(<span class="string">"background-color"</span>, <span class="string">"rgb("</span> + val + <span class="string">", "</span> + val + <span class="string">", "</span> + val + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　最後把顏色輸出到一個數組就好了。</p>
<blockquote>
<p>這裏有一點 happy 的是，就算你是用 HSL 來搞的背景色，用 <strong><em>jQuery</em></strong> 的 <code>$(foo).css(&quot;background-color&quot;)</code> 獲取到的仍然是 RGB 值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [];</span><br><span class="line">$(<span class="string">".color"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="regexp">/rgb\((\d+), (\d+), (\d+)\)/</span>.exec($(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>));</span><br><span class="line">    colors.push(&#123; r: <span class="built_in">parseInt</span>(result[<span class="number">1</span>]), g: <span class="built_in">parseInt</span>(result[<span class="number">2</span>]), b: <span class="built_in">parseInt</span>(result[<span class="number">3</span>]) &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"textarea"</span>).val(<span class="built_in">JSON</span>.stringify(colors));</span><br></pre></td></tr></table></figure>
<p>　　所以最後我們還需要初始的 HTML 了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">textarea</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"palette"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"clear: both;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　效果的話這裏能看到：</p>
<ul>
<li><a href="http://blog.xcoder.in/hsl-color-space/" target="_blank" rel="external">http://blog.xcoder.in/hsl-color-space/</a></li>
<li><a href="http://runjs.cn/code/spahru8w" target="_blank" rel="external">http://runjs.cn/code/spahru8w</a></li>
</ul>
<h2 id="小結">小結</h2><p>　　用 HSL 生成的色彩空間（色板）一個是表現力好，相對於 RGB 來說，好像更好知道如何去生成分部比較 OK 的一個色彩空間。</p>
<p>　　但是也有一個缺點，當我們不去管飽和度的時候，實際上我們還是丟失了一部分的顏色。好在本身我們生成色板也只是爲了合併顏色，可以通過 k-D 樹來快速尋找某個顏色在色板中是屬於哪種色塊的。當然，目前我們就是這麼做的。</p>
<h2 id="參考資料">參考資料</h2><ul>
<li><a href="http://websafecolorcodes.com/colors-palette/color-wheel-palette/" target="_blank" rel="external">Color Wheel Palette</a></li>
<li><a href="http://www.waldronconstructionllc.com/wp-content/uploads/2012/03/SqfinPalette-RealColorWheel-RGB-14inwide72dpi-1024x437.png" target="_blank" rel="external">Refer Image</a></li>
<li><a href="http://codeforartists.com/samples/cfa-color-palette-hsl.php" target="_blank" rel="external">Algorithm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="用途">用途</h2><p>　　在主題色提取的過程中，要把顏色加入搜索引擎。但是如果是真彩色任意值加進去的話，對於搜索的時候來說無疑是一個複雜的操作。搜索條件要各種計算距離什麼的。</p>
<p>　　於是一個妥協的做法就是提供一套調色板，保證所有顏色都被吸納到調色]]>
    </summary>
    
      <category term="Color Space" scheme="http://xcoder.in/tags/Color-Space/"/>
    
      <category term="HSL" scheme="http://xcoder.in/tags/HSL/"/>
    
      <category term="Palette" scheme="http://xcoder.in/tags/Palette/"/>
    
      <category term="RGB" scheme="http://xcoder.in/tags/RGB/"/>
    
      <category term="色彩空間" scheme="http://xcoder.in/tags/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%96%93/"/>
    
      <category term="色板" scheme="http://xcoder.in/tags/%E8%89%B2%E6%9D%BF/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 Javascript 實現一個簡易 BrainF**k 解釋器]]></title>
    <link href="http://xcoder.in/2014/10/08/brainf**k/"/>
    <id>http://xcoder.in/2014/10/08/brainf**k/</id>
    <published>2014-10-08T03:42:32.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　首先祝賀自己在 <a href="http://www.codewars.com/users/XadillaX" target="_blank" rel="external">CodeWars</a> 升級到 3 Kyu，以及感謝 @<a href="http://www.html-js.com/card/473" target="_blank" rel="external">Bolt_白衣蒼狗</a> 童鞋讓我知道有 CodeWars 這麼個好玩的東西。</p>
<p>　　雖然裏面水題居多，不過在上班比較空閒的檔口 #<strong>帶薪刷題</strong># 的感覺還是蠻不錯的。</p>
<h2 id="話嘮一下">話嘮一下</h2><p>　　高中的時候就跟 @<a href="http://www.lvchaoshuai.com/" target="_blank" rel="external">MatRush</a> 發現了一個名字超級好玩的編程語言叫 <a href="http://en.wikipedia.org/wiki/Brainfuck" target="_blank" rel="external">BrainF**k</a>，它比較搞腦筋，因爲所有的編程操作都是集合在操作符裏面，然後控制指針偏移和內存值的修改來進行一系列操作。</p>
<p>　　這與後面發現的 <a href="http://www.hacker.org/hvm/" target="_blank" rel="external">HVM</a>（Hack Virtual Machine）有異曲同工之妙。其實之前也出過一個“<a href="http://acm.nbut.edu.cn/Problem/view.xhtml?id=1062" target="_blank" rel="external">實現一個簡易 HVM 解釋器</a>”的題目，所以在 CodeWars 看到這個題目的時候還感覺蠻親切的。</p>
<h2 id="問題描述">問題描述</h2><p>　　問題很簡單，就是讓你實現一個函數來解釋一句 BrainF**k 的語句，並且根據輸入數據來輸出相應的內容。</p>
<p>　　至於這題所需的 BrainF**k 的語法，大致如下：</p>
<ul>
<li><code>&gt;</code>: 指針右移一位。</li>
<li><code>&lt;</code>: 指針左移一位。</li>
<li><code>+</code>: 當前指針所指的內存值加一，以 255 爲界，溢出爲 0，即 <code>255 + 1 = 0</code>。</li>
<li><code>-</code>: 當前指針所指的內存值減一，以 0 爲界，溢出爲 255，即 <code>0 - 1 = 255</code>。</li>
<li><code>.</code>: 輸出當前指針所指的值，即輸出該值 ASCII 碼所對應的字符。</li>
<li><code>,</code>: 從輸入取一個字符轉爲 ASCII 碼存入當前指針所指的內存。</li>
<li><code>[</code>: 若當前指針所指的值爲 0，則命令跳到該 <code>[</code> 匹配的結束 <code>]</code> 符號位置的下一位置的指令。</li>
<li><code>]</code>: 若當前指針所指的值不爲 0，則指令向前跳到該 <code>]</code> 匹配到的 <code>[</code> 符號位置的下一位置的指令。</li>
</ul>
<p>　　舉個例子：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">,</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span><span class="string">.</span><span class="string">,</span><span class="literal">+</span><span class="title">]</span></span><br></pre></td></tr></table></figure>
<p>　　上面的句子大致就是說：</p>
<ol>
<li>獲取輸入到當前指針。</li>
<li>當前指針值加一。</li>
<li>如果當前指針的值爲 0，那麼跳到結束位置；否則下一步。</li>
<li>當前指針值減一。</li>
<li>輸出當前指針的值（綜上所述，就是輸出輸入的值）。</li>
<li>獲取輸入到當前指針。</li>
<li>當前指針值加一。</li>
<li>若當前指針值不爲 0，那麼跳到 <code>[</code> 後面的位置——即第四步。</li>
</ol>
<p>　　說白了，就是不斷獲取輸入的值，如果輸入的值是 255，那麼就跳出循環，否則原樣輸出。</p>
<h2 id="開始實現">開始實現</h2><p>　　明白了上面的題意之後就可以開始實現了，步驟大致上就是逐位遍歷指令，然後一個 <code>switch</code> 來處理各種指令即可。</p>
<p>　　<strong>CodeWars</strong> 給了你一個函數原型，你在裏面實現代碼就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">brainLuck</span>(<span class="params">code, input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前趨工作">前趨工作</h3><p>　　在開始之前，我們做一些初始化工作，比如申明幾個變量什麼的：</p>
<ul>
<li>輸入數據當前的位置，也就是說讀取幾個之後，這個位置要偏移幾位。</li>
<li>當前指令的位置。</li>
<li>當前指針的位置。</li>
<li>“僞內存塊”的值，用一個數組表示，默認一個 <code>[ 0 ]</code>。</li>
<li>需要 <code>return</code> 的字符串，即輸出的值。</li>
<li>某個括號匹配的括號的指令下標的這麼一個映射數組。</li>
</ul>
<p>　　所以接下去我們要把架子填成這樣：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">brainLuck</span>(<span class="params">code, input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> commandPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointerPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> bytes = [ <span class="number">0</span> ];</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> matching = getMatchingBra(code);    <span class="comment">///&lt; 人家纔不是罩罩呢，我是 Brackets 的縮寫</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="括號匹配函數">括號匹配函數</h4><p>　　上面的 <code>getMatchingBra</code> 就是我們要實現的一個括號匹配函數了，思想就是用棧。</p>
<p>　　碰到前括號就把這個前括號的下標入棧；碰到後括號，就把棧頂元素即前括號的下標推出，這個時候括號匹配數組的這個前括號下標的值就是當前後括號的下標，而後括號下標的值就是前括號的下標了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 你纔是 Bra ／/( ◕‿‿◕ )＼</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMatchingBra</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">var</span> bra = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; code.length; i++) bra.push(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; code.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(code[i] === <span class="string">'['</span>) &#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(code[i] === <span class="string">']'</span>) &#123;</span><br><span class="line">            bra[i] = stack.pop();</span><br><span class="line">            bra[bra[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bra;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　有了這個數組就可以隨便跳了，如果指令第 <code>i</code> 位是一個括號（不管前括號還是後括號），那麼它的匹配括號下標就是 <code>matching[i]</code> 了。</p>
<h3 id="各種指令的處理">各種指令的處理</h3><p>　　要處理指令的話實際上就是一個 <code>while</code> 語句不斷循環指令，然後判斷當前指令是什麼然後做相應的事，最後指令位置加一就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(commandPos &lt; code.length) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(code[commandPos]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'.'</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">','</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'['</span>: &#123;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">']'</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    commandPos++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="&gt;">&gt;</h4><p>　　指針右移的話就把指針位置加一，如果內存數組還沒當前指針位置的值的話 <code>push</code> 一個 <code>0</code> 就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">undefined</span> === bytes[++pointerPos]) bytes.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="&lt;">&lt;</h4><p>　　左移就是減一，如果位置小於 0，那麼內存數組從前推入一個值，並讓指針等於 0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'&lt;'</span>: &#123;</span><br><span class="line">    <span class="keyword">if</span>(--pointerPos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        bytes.unshift(<span class="number">0</span>);</span><br><span class="line">        pointerPos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="+">+</h4><p>　　沒什麼好說的，內存加一就好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>: &#123;</span><br><span class="line">    bytes[pointerPos] = (bytes[pointerPos] + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="-">-</h4><p>　　減一。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>: &#123;</span><br><span class="line">    bytes[pointerPos]--;</span><br><span class="line">    <span class="keyword">if</span>(bytes[pointerPos] &lt; <span class="number">0</span>) bytes[pointerPos] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="--1">.</h4><p>　　輸出的話直接往 <code>output</code> 字符串裏面加上當前指針的值就好了，注意要 ASCII 轉變之後的字符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'.'</span>: &#123;</span><br><span class="line">    output += <span class="built_in">String</span>.fromCharCode(bytes[pointerPos]);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id=",">,</h4><p>　　輸入的話就讓 <code>input</code> 當前位置的值變成 ASCII 存進當前指針，然後輸入位置加一就好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">','</span>: &#123;</span><br><span class="line">    bytes[pointerPos] = input.charCodeAt(inputPos++);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="[">[</h4><p>　　由於之前已經做好了匹配數組，所以我們只需要判斷當前指針是不是 0，然後如果是就跳到匹配括號處。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: &#123;</span><br><span class="line">    commandPos = !bytes[pointerPos] ? matching[commandPos] : commandPos;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="]">]</h4><p>　　同上，只不過條件改一下而已。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: &#123;</span><br><span class="line">    commandPos = bytes[pointerPos] ? matching[commandPos] : commandPos;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="善後工作">善後工作</h3><p>　　上面的函數體完成之後，我們只需要在最後把 <code>output</code> 給返回就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> output;</span><br></pre></td></tr></table></figure>
<h2 id="肢體組裝">肢體組裝</h2><p>　　完成了上面七零八落的肢體之後，我們要把五馬分屍的代碼給湊回去，所以最後就長這個樣子了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMatchingBra</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">var</span> bra = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; code.length; i++) bra.push(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; code.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(code[i] === <span class="string">'['</span>) &#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(code[i] === <span class="string">']'</span>) &#123;</span><br><span class="line">            bra[i] = stack.pop();</span><br><span class="line">            bra[bra[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bra;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">brainLuck</span>(<span class="params">code, input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> commandPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointerPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> bytes = [ <span class="number">0</span> ];</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> matching = getMatchingBra(code);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(commandPos &lt; code.length) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(code[commandPos]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123;</span><br><span class="line">                pointerPos++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">undefined</span> === bytes[pointerPos]) &#123;</span><br><span class="line">                    bytes.push(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>: &#123;</span><br><span class="line">                pointerPos--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span> &gt; pointerPos) &#123;</span><br><span class="line">                    bytes.unshift(<span class="number">0</span>);</span><br><span class="line">                    pointerPos = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>: &#123;</span><br><span class="line">                bytes[pointerPos] = (bytes[pointerPos] + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>: &#123;</span><br><span class="line">                bytes[pointerPos]--;</span><br><span class="line">                <span class="keyword">if</span>(bytes[pointerPos] &lt; <span class="number">0</span>) bytes[pointerPos] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.'</span>: &#123;</span><br><span class="line">                output += <span class="built_in">String</span>.fromCharCode(bytes[pointerPos]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">','</span>: &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = input.charCodeAt(inputPos++);</span><br><span class="line">                bytes[pointerPos] = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span>(!bytes[pointerPos]) &#123;</span><br><span class="line">                    commandPos = matching[commandPos];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">']'</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span>(bytes[pointerPos]) &#123;</span><br><span class="line">                    commandPos = matching[commandPos];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        commandPos++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="題後語">題後語</h2><p>　　艾瑪，忘了放題目鏈接了：<a href="http://www.codewars.com/kata/526156943dfe7ce06200063e" target="_blank" rel="external">http://www.codewars.com/kata/526156943dfe7ce06200063e</a>。以及大家如果有興趣的話也可以去試試看寫個 <a href="http://acm.nbut.edu.cn/Problem/view.xhtml?id=1062" target="_blank" rel="external">HVM</a> 看看。</p>
<p>　　實際上本文實現的東西實用性幾乎沒有，只不過是拋磚引玉，讓大家在做一些模擬題邏輯（或者說是簡單模擬邏輯）的時候理清思路、按部就班，切忌自己亂了思路和邏輯。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　首先祝賀自己在 <a href="http://www.codewars.com/users/XadillaX" target="_blank" rel="external">CodeWars</a> 升級到 3 Kyu，以及感謝 @<a href="http://ww]]>
    </summary>
    
      <category term="BrainFuck" scheme="http://xcoder.in/tags/BrainFuck/"/>
    
      <category term="Javascript" scheme="http://xcoder.in/tags/Javascript/"/>
    
      <category term="解釋器" scheme="http://xcoder.in/tags/%E8%A7%A3%E9%87%8B%E5%99%A8/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 Node.js 實現一個 Singleton]]></title>
    <link href="http://xcoder.in/2014/09/30/javascript-singleton/"/>
    <id>http://xcoder.in/2014/09/30/javascript-singleton/</id>
    <published>2014-09-30T07:21:13.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　今天隨便玩了一道 <a href="http://www.codewars.com/kata/singleton-pattern/javascript" target="_blank" rel="external">CodeWar 的題</a>。</p>
<p>　　題意大致就是你需要實現一個 <code>Singleton</code> 也就是單件模式的類，讓其下面代碼執行成功：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Singleton();</span><br><span class="line">obj1 === obj2; <span class="comment">// =&gt; true</span></span><br><span class="line">obj1.test = <span class="number">1</span>;</span><br><span class="line">obj2.test; <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure>
<p>　　並且還有很重要的一點就是 <code>Singleton</code> 的對象的 <code>instanceof</code> 也得的確是 <code>Singleton</code> 才行。</p>
<h2 id="開始試驗">開始試驗</h2><p>　　我們猜想 <code>new Singleton()</code> 的結果，如果 <code>Singleton</code> 函數也就是這個類的構造函數沒返回值的話，直接會返回 <code>this</code>，有返回值的話，那麼就是等於其返回值了。</p>
<p>　　我們碼下面的代碼看一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; foo: <span class="string">"bar"</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Singleton());</span><br></pre></td></tr></table></figure>
<p>　　跑一遍之後我們的確發現了輸出的值就是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; foo: <span class="string">"bar"</span> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="小作弊失敗">小作弊失敗</h2><p>　　於是我這麼做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　結果上面的幾個條件都符合了，不信大家可以自己輸出一遍看看。</p>
<p>　　但是——</p>
<p>　　這東西不是一個 <code>Singleton</code> 的實例，它只是一個簡單的 <code>JSON</code> 對象，所以還是無法通過。</p>
<h2 id="死月の正解">死月の正解</h2><p>　　答案有很多，CodeWar 上面每個人的解法都不一樣，但是歸根結底本質還是大同小異的。</p>
<p>　　就是第一次的時候先直接返回 <code>this</code>，並且把 <code>this</code> 放在某個地方。以後每次來這裏創建的時候返回之前存好的 <code>this</code> 即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Singleton.prototype.instance) <span class="keyword">return</span> Singleton.prototype.instance = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do some initialize things</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    Singleton.prototype.instance = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="別的寫法">別的寫法</h2><p>　　寫法很多，我這裏隨意挑幾個別人的答案吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * By tjwudi</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Singleton.ins = Singleton.ins ? Singleton.ins : <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * By nonowarn</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance || (instance = <span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　今天隨便玩了一道 <a href="http://www.codewars.com/kata/singleton-pattern/javascript" target="_blank" rel="external">CodeWar 的題</a>。</p>
<p>　　題意]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="設計模式" scheme="http://xcoder.in/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讓我們用 Node.js 寫自己的 DDNS 動態域名程序]]></title>
    <link href="http://xcoder.in/2014/09/20/lets-build-ourselves-ddns/"/>
    <id>http://xcoder.in/2014/09/20/lets-build-ourselves-ddns/</id>
    <published>2014-09-20T07:51:40.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>　　一開始我在移動的寬帶中。那個時候雖然還不是完全的局域網，但是電信網絡訪問不了我的外網 IP。又因爲我需要一個 DDNS 服務來維持我的 <a href="http://kacaka.ca/" target="_blank" rel="external">kacaka.ca</a>（目前暫失效）。</p>
<p>　　爲了解決讓電信網絡也能訪問我的 Web，於是我想到了免費 CDN 當中比較有名的 <a href="http://cloudflare.com/" target="_blank" rel="external">CloudFlare</a>。而且它也有提供 API 讓開發者自己開發通過他的服務解析域名的服務。</p>
<p>　　再然後，去年的九月份，我的早期 Node.js 作品 <strong><a href="https://github.com/XadillaX/dloucflare/tree/0.0.2" target="_blank" rel="external">dloucflare</a></strong> 發佈了。所以就有了<a href="http://cnodejs.org/topic/522b64c3101e574521332451" target="_blank" rel="external">這個帖子</a>。</p>
<p>　　現在，我已經搬到電信了，然後舊版的貌似不能用了，因爲 <strong>CloudFlare</strong> 貌似 API 都遷移到了 <code>https</code> 上面。然後我爲了我的小夥伴們能訪問我出租屋裏的舊電腦，又重構了一遍<a href="https://github.com/XadillaX/dloucflare" target="_blank" rel="external">這個項目</a>。</p>
<h2 id="使用_dlouc-flare_構建">使用 dlouc-flare 構建</h2><p>　　首先安裝最新的 <code>dlouc-flare</code> 包：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install dlouc-flare</span><br></pre></td></tr></table></figure>
<p>　　然後去創建一個 <strong>DF</strong> 對象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DloucFlare = <span class="built_in">require</span>(<span class="string">"dlouc-flare"</span>);</span><br><span class="line"><span class="keyword">var</span> df = DloucFlare.create(<span class="string">"你的郵箱"</span>, <span class="string">"API KEY"</span>, <span class="string">"域名（不需要 www）"</span>);</span><br></pre></td></tr></table></figure>
<p>　　<strong>CloudFlare</strong> 如何使用的話這裏就不多做解釋了，至於 <strong>API KEY</strong> 的話，可以在<a href="https://www.cloudflare.com/my-account" target="_blank" rel="external">這裏</a>獲取到。</p>
<p>　　然後調用 <code>df.dynamicDomains</code> 函數去把你這個域名下面的一些子域名加入你這個腳本的動態域名範疇當中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dynamicDomains([ <span class="string">"@"</span>, <span class="string">"www"</span>, <span class="string">"子域名3"</span>, <span class="string">"子域名4"</span>, ... ], 檢測時間間隔);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 <code>&quot;@&quot;</code> 代表的是域名沒有 <code>www</code> 前綴的本身。檢測時間間隔以毫秒爲單位。</p>
</blockquote>
<p>　　事實上，你也可以自定義一個檢測你當前主機的 IP 地址的函數（如果你不喜歡用包內的默認檢測 IP 函數）。</p>
<p>　　只要你寫一個函數：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIp</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// blahblah...</span></span><br><span class="line">    callback(<span class="literal">undefined</span>, IP地址);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　然後覆蓋掉默認的 IP 檢測函數即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.getIpFunction = checkIp;</span><br></pre></td></tr></table></figure>
<p>　　最後保存退出並用 <code>node</code> 執行你的程序就好了，程序就會開始歡快地跑了。</p>
<p><img src="preview.png" alt="Preview"></p>
<h2 id="如何自己寫？">如何自己寫？</h2><p>　　其實要完全自己寫也是很簡單的——無非就是調用一下 <strong>CloudFlare</strong> 的 API 而已。</p>
<p>　　我們定位明確就是要做 DDNS，所以沒必要關係其它很多不相關的 API，只需要最基礎的幾個就夠了。</p>
<h3 id="API_解析">API 解析</h3><p>　　所有 API 的基礎 URI 都爲：<a href="https://www.cloudflare.com/api_json.html" target="_blank" rel="external">https://www.cloudflare.com/api_json.html</a>。</p>
<h4 id="驗證信息">驗證信息</h4><p>　　根據 <strong>CloudFlare</strong> 文檔所說，所有的提交都要黏上<a href="https://www.cloudflare.com/docs/client-api.html#s2.1" target="_blank" rel="external">驗證信息</a>給 POST 過去。而驗證的字段如下：</p>
<ul>
<li><strong>tkn:</strong> 從你的個人頁面當中複製出來的 API KEY。</li>
<li><strong>email:</strong> 你的登錄郵箱。</li>
<li><strong>a:</strong> 操作名，每種操作都有其特有的操作名。</li>
</ul>
<h4 id="獲取域名下的子域名記錄">獲取域名下的子域名記錄</h4><p>　　其操作名爲 <code>rec_load_all</code>，我們不關心其它不重要的參數，只需要再傳一個 <code>z</code> 字段代表其域名就好了，舉個例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    a       : <span class="string">"rec_load_all"</span>,</span><br><span class="line">    tkn     : <span class="keyword">this</span>.apiKey,</span><br><span class="line">    email   : <span class="keyword">this</span>.email,</span><br><span class="line">    z       : <span class="keyword">this</span>.domain</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"https://www.cloudflare.com/api_json.html"</span>;</span><br><span class="line">spidex.post(url, <span class="function"><span class="keyword">function</span>(<span class="params">html, status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(status !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error status while fetching DNS records."</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> json;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        json = <span class="built_in">JSON</span>.parse(html);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error while parsing DNS records: "</span> + e.message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(json.result === <span class="string">"error"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = json.msg;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">undefined</span> === msg) msg = <span class="string">"Unknown error."</span>;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(msg));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(json.result === <span class="string">"success"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> count = json.response.recs.count;</span><br><span class="line">        <span class="keyword">var</span> objects = json.response.recs.objs;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            self.records.push(<span class="keyword">new</span> DNSRecordObject(self, objects[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callback(<span class="literal">undefined</span>, self.records);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unknown error."</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, param, <span class="string">"utf8"</span>).on(<span class="string">"error"</span>, callback);</span><br></pre></td></tr></table></figure>
<p>　　上述代碼就是把 <code>param</code> 數據給 POST 到 API 的 RESTful 裏面去。然後根據返回值進行解析。</p>
<blockquote>
<p>關於 <code>DNSRecordObject</code> 的代碼可以自行翻閱<a href="https://github.com/XadillaX/dloucflare/blob/master/lib/dnsrecordobject.js" target="_blank" rel="external">這裏</a>。</p>
<p>以及 <strong>spidex</strong> 的文檔在<a href="https://www.npmjs.org/package/spidex#readme" target="_blank" rel="external">這裏</a>。</p>
</blockquote>
<h4 id="修改某記錄">修改某記錄</h4><p>　　其操作名爲 <code>rec_edit</code>，如<a href="https://www.cloudflare.com/docs/client-api.html#s5.2" target="_blank" rel="external">文檔</a>所說，除了固有的幾個參數之外，我們還需要有如下參數：</p>
<ul>
<li><code>z:</code> 域名。</li>
<li><code>id:</code> 域名記錄編號，從 <code>rec_load_all</code> 中獲取。</li>
<li><code>type:</code> 記錄類型。如 <code>A</code> / <code>CNAME</code> 等等。</li>
<li><code>name:</code> 子域名名，如果無前綴子域名則與域名相同。</li>
<li><code>content:</code> 值。如果我們只是做動態域名的話，這裏的值就是 IP。</li>
<li><code>service_mode:</code> 服務類型，填原值即可。</li>
<li><code>ttl</code>: TTL，填原值即可。</li>
</ul>
<blockquote>
<p>上面參數的解說只是對於我們要做 DDNS 腳本而言的解釋。</p>
</blockquote>
<p>　　所以說在 <strong><a href="https://github.com/XadillaX/dloucflare/blob/master/lib/dnsrecordobject.js" target="_blank" rel="external">dnsrecordobject.js</a></strong> 中我是這麼做的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    a       : <span class="string">"rec_edit"</span>,</span><br><span class="line">    tkn     : <span class="keyword">this</span>.dloucflare.apiKey,</span><br><span class="line">    email   : <span class="keyword">this</span>.dloucflare.email,</span><br><span class="line">    id      : <span class="keyword">this</span>.recordId(),</span><br><span class="line"></span><br><span class="line">    z       : <span class="keyword">this</span>.domain,</span><br><span class="line">    type    : <span class="keyword">this</span>.recordType(),</span><br><span class="line">    name    : <span class="keyword">this</span>.name,</span><br><span class="line">    content : ip,</span><br><span class="line"></span><br><span class="line">    service_mode    : <span class="keyword">this</span>.object.service_mode,</span><br><span class="line">    ttl     : <span class="keyword">this</span>.object.ttl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">spidex.post(config.baseUrl, <span class="function"><span class="keyword">function</span>(<span class="params">html, status, respHeader</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(status !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error status while editing "</span> + self.name + <span class="string">"."</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> json;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        json = <span class="built_in">JSON</span>.parse(html);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error while parsing editing result: "</span> + e.message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(json.result === <span class="string">"success"</span>) &#123;</span><br><span class="line">        self.object.content = ip;</span><br><span class="line">        <span class="keyword">return</span> callback();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = json.msg || <span class="string">"Unknown error."</span>;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, param, <span class="string">"utf8"</span>).on(<span class="string">"error"</span>, callback);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的代碼就能將你某個域名（<code>this.domain</code>）下的子域名 <code>this.name</code> 的 IP 給修改成 <code>ip</code> 了。</p>
</blockquote>
<h4 id="探測_IP">探測 IP</h4><p>　　這種 API 網上就多了去了。</p>
<p>　　舉個簡單的例子，我的 <code>dlouc-flare</code> 的獲取 IP 的 API 就是從</p>
<blockquote>
<p><a href="http://www.telize.com/ip" target="_blank" rel="external">http://www.telize.com/ip</a></p>
</blockquote>
<p>　　來的。</p>
<p>　　請求上面的地址之後，輸出的內容（注意有換行符）就是你當前機子所在的網絡的公網 IP 了。</p>
<p>　　類似的 API 還有很多：</p>
<ul>
<li><strong><a href="http://ip-api.com/json" target="_blank" rel="external">http://ip-api.com/json</a></strong>: 這個 API 就會輸出一堆的 JSON，需要自行解析。</li>
<li><strong><a href="http://ip.taobao.com/service/getIpInfo2.php?ip=myip" target="_blank" rel="external">http://ip.taobao.com/service/getIpInfo2.php?ip=myip</a></strong>: 這個是淘寶提供的 RESTful 獲取 IP 的 API。</li>
<li>…（其它的可以自己去發現）</li>
</ul>
<h3 id="流程">流程</h3><p>　　有了上面的仨 API，一切都好說了，流程很簡單：</p>
<ul>
<li>獲取自己某個使用 <code>CloudFlare</code> 解析的域名下的<a href="#獲取域名下的子域名記錄">子域名</a>。</li>
<li>自己設置幾個子域名名拿來做 DDNS。</li>
<li>設置一個定時器，每次定時器到時的時候都進行如下操作：<ol>
<li>通過 <a href="#探測_IP">IP 的 API</a> 獲取當前 IP。</li>
<li>循環遍歷每個自己設置的子域名名。</li>
<li>對於每個子域名，都判斷其當前記錄 IP 是否等於當前剛探測的 IP。<ul>
<li><strong>是</strong>：<a href="#修改某記錄">修改該子域名的記錄值</a>爲剛探測的 IP。</li>
<li><strong>否</strong>：不作任何操作。</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>　　有了上面的幾個步驟，加上之前我們講的幾個 API，大家就能輕鬆加愉快地完成自己的 DDNS 腳本了。</p>
<p>　　當然，如果自己懶的話也可以用本文一開始的方法，使用 <code>dlouc-flare</code> 這個包，通過簡單的編碼就能實現自己的 DDNS 動態域名腳本了。</p>
<blockquote>
<p>這裏的定時器時間自己按需而定，就我自己而言，我是給設置了 <code>1000 * 60</code> 毫秒的間隔。</p>
</blockquote>
<h2 id="小結">小結</h2><p>　　最早與動態域名結緣的時候是初中的時候，大概七八年前了吧，那個時候花生殼什麼的，但是最終用的是 <code>3322.org</code>。</p>
<p>　　其實基本的動態域名的原理很簡單，無非就是本地開一個腳本，不停去探測本機 IP，一旦有變化就去解析服務器修改。</p>
<p>　　本人在這裏拋磚引玉。如果哪裏有別的解析商的 API，大家自己也可以舉一反三，寫什麼 DNSPod 的動態域名，寫什麼 jiasule 的動態域名等等等等。</p>
<p>　　喵~<em>ଘ(੭</em>ˊᵕˋ)੭* ੈ✩‧₊˚</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>　　一開始我在移動的寬帶中。那個時候雖然還不是完全的局域網，但是電信網絡訪問不了我的外網 IP。又因爲我需要一個 DDNS 服務來維持我的 <a href="http://kacaka.ca/" target="_blank" rel=]]>
    </summary>
    
      <category term="DDNS" scheme="http://xcoder.in/tags/DDNS/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="動態域名" scheme="http://xcoder.in/tags/%E5%8B%95%E6%85%8B%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[圖片主題色提取算法小結]]></title>
    <link href="http://xcoder.in/2014/09/17/theme-color-extract/"/>
    <id>http://xcoder.in/2014/09/17/theme-color-extract/</id>
    <published>2014-09-17T03:34:54.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>所謂主題色提取，就是對於一張圖片，近似地提取出一個調色板，使得調色板裏面的顏色能組成這張圖片的主色調。</p>
</blockquote>
<p>　　以上定義爲我個人胡謅的。</p>
<p>　　大家不要太把我的東西當成嚴謹的文章來看，很多東西什麼的都是我用我自己的理解去做，並沒有做多少考證。</p>
<p>　　解析中都會以 Node.js 來寫一些小 Demo。</p>
<h2 id="引子">引子</h2><p>　　寫該文章主要是爲了對我這幾天對於『主題色提取』算法研究進行一個小結。</p>
<p>　　花瓣網需要做一件事，就是把圖片的主題色提取出來加入到花瓣網搜索引擎的索引當中，以供用戶搜索。</p>
<p>　　於是有了一個需求：提取出圖片中在某個規定調色板中的顏色，加入到搜索引擎。</p>
<p>　　接下去就開始解析兩種不同的算法以及在這種業務場景當中的應用。</p>
<h2 id="算法解析">算法解析</h2><h3 id="魔法數字法"><del>魔法數字法</del></h3><p>　　這個算法大家可以忽略，可能是我使用的姿勢不對，總之提取出來（也許它根本就不是這麼用的）的東西錯誤很大。</p>
<p>　　不過看一下也好開闊下眼界，尤其是我這種想做遊戲又不小心掉進互聯網的坑裏的蒟蒻來說。</p>
<p>　　首先該算法我是從<a href="http://dev.gameres.com/Program/Visual/Other/256color.htm" target="_blank" rel="external">這裏</a>找到的。想當年我還是經常逛 <a href="http://www.gameres.com/" target="_blank" rel="external">GameRes</a> 的。ヾ(;ﾟ;Д;ﾟ;)ﾉﾞ</p>
<p>　　然後輾轉反側最終發現這段代碼是提取自 <a href="https://github.com/liballeg/allegro5/blob/4.3/src/color.c#L268-L328" target="_blank" rel="external">Allegro</a> 遊戲引擎。</p>
<p>　　具體我也就不講了，畢竟找不到資料，只是粗粗瞄了眼代碼裏面有幾個魔法數字（在遊戲和算法領域魔法數字倒是非常常見的），也沒時間深入解讀這段代碼。</p>
<p>　　我把它翻譯成了 Node.js，然後放在了 <a href="https://github.com/XadillaX/theme-color-test/blob/master/version1/magicnumber.js" target="_blank" rel="external">Demo</a> 當中。大家有興趣可以自己去看看。</p>
<h3 id="八叉樹提取法">八叉樹提取法</h3><p>　　這個算法在顏色量化中比較常見的。</p>
<blockquote>
<p>該算法最早見於 1988 年，<strong><em>M. Gervautz</em></strong> 和 <strong><em>W. Purgathofer</em></strong> 發表的論文<strong><em>《A Simple Method for Color Quantization: Octree Quantization》</em></strong>當中。其時間複雜度和空間複雜度都有很大的優勢，並且保真度也是非常的高。</p>
</blockquote>
<p>　　大致的思路就是對於某一個像素點的顏色 <strong>R / G / B</strong> 分開來之後，用二進制逐行寫下。</p>
<p>　　如 <code>#FF7800</code>，其中 <strong>R</strong> 通道爲 <code>0xFF</code>，也就是 <code>255</code>，<strong>G</strong> 爲 <code>0x78</code> 也就是 <code>120</code>，<strong>B</strong> 爲 <code>0x00</code> 也就是 <code>0</code>。</p>
<p>　　接下去我們把它們寫成二進制逐行放下，那麼就是：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R: <span class="number">1111</span> <span class="number">1111</span></span><br><span class="line">G: <span class="number">0111</span> <span class="number">1000</span></span><br><span class="line">B: <span class="number">0000</span> <span class="number">0000</span></span><br></pre></td></tr></table></figure>
<p>　　<strong>RGB</strong> 通道逐列黏合之後的值就是其在某一層節點的子節點編號了。每一列一共是三位，那麼取值範圍就是 <code>0 ~ 7</code> 也就是一共有八種情況。這就是爲什麼這種算法要開八叉樹來計算的原因了。</p>
<p>　　舉個例子，上述顏色的第一位黏合起來是 <code>100(2)</code>，轉化爲十進制就是 4，所以這個顏色在第一層是放在根節點的第五個子節點當中；第二位是 <code>110(2)</code> 也就是 6，那麼它就是根節點的第五個兒子的第七個兒子。</p>
<p>　　於是我們有了這樣的一個節點結構：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OctreeNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.isLeaf = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.pixelCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.red = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.green = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.blue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.children = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.children.length; i++) <span class="keyword">this</span>.children[i] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這裏的 next 不是指兄弟鏈中的 next 指針</span></span><br><span class="line">    <span class="comment">// 而是在 reducible 鏈表中的下一個節點</span></span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>isLeaf</code>: 表明該節點是否爲葉子節點。</li>
<li><code>pixelCount</code>: 在該節點的顏色一共插入了幾次。</li>
<li><code>red</code>: 該節點 <strong>R</strong> 通道累加值。</li>
<li><code>green</code>: <strong>G</strong> 累加值。</li>
<li><code>blue</code>: <strong>B</strong> 累加值。</li>
<li><code>children</code>: 八個子節點指針。</li>
<li><code>next</code>: <strong><em>reducible</em></strong> 鏈表的下一個節點指針，後面會作詳細解釋，目前可以先忽略。</li>
</ul>
<h4 id="插入顏色">插入顏色</h4><p>　　根據上面的理論，我們大致就知道了往八叉樹插入一個像素點顏色的步驟了。</p>
<p>　　就是每一位 <strong>RGB</strong> 通道黏合的值就是它在樹的那一層的子節點的編號。</p>
<p>　　大致可以看下圖：</p>
<p><img src="http://www.microsoft.com/msj/archive/wicked1.gif" alt="八叉樹插入"><br><small>圖片來源：<a href="http://www.microsoft.com/msj/archive/S3F1.aspx" target="_blank" rel="external">http://www.microsoft.com/msj/archive/S3F1.aspx</a></small></p>
<p>　　由此可以推斷，在沒有任何顏色合併的情況下，插入一種顏色最壞的情況下是進行 64 次檢索。</p>
<blockquote>
<p><strong>注意：</strong>我們將會把該顏色的 RGB 分量分別累加到該節點的各分量值中，以便最終求平均數。</p>
</blockquote>
<p>　　大致的流程就是從根節點開始 DFS，如果到達的節點是葉子節點，那麼分量、顏色總數累加；否則就根據層數和該顏色的第層數位顏色黏合值得到其子節點序號。若該子節點不存在就創建一個子節點並與該父節點關聯，否則就直接搜下一層去。</p>
<p>　　創建的時候根據層數來確定它是不是葉子節點，如果是的話需要標記一下，並且全局的葉子節點數要加一。</p>
<p>　　還有一點需要注意的就是如果這個節點不是葉子節點，就將其丟到 <strong><em>reducible</em></strong> 相應層數的鏈表當中去，以供之後顏色合併的時候用。關於顏色合併的內容後面會進行解釋。</p>
<p>　　下面是創建節點的代碼：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNode</span>(<span class="params">idx, level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> OctreeNode();</span><br><span class="line">    <span class="keyword">if</span>(level === <span class="number">7</span>) &#123;</span><br><span class="line">        node.isLeaf = <span class="literal">true</span>;</span><br><span class="line">        leafNum++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 將其丟到第 level 層的 reducible 鏈表中</span></span><br><span class="line">        node.next = reducible[level];</span><br><span class="line">        reducible[level] = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　以及下面是插入某種顏色的代碼：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addColor</span>(<span class="params">node, color, level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.isLeaf) &#123;</span><br><span class="line">        node.pixelCount++;</span><br><span class="line">        node.red += color.r;</span><br><span class="line">        node.green += color.g;</span><br><span class="line">        node.blue += color.b;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 由於 js 內部都是以浮點型存儲數值，所以位運算並沒有那麼高效</span></span><br><span class="line">        <span class="comment">// 在此使用直接轉換字符串的方式提取某一位的值</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 實際上如果用位運算來做的話就是這樣子的：</span></span><br><span class="line">        <span class="comment">//   https://github.com/XadillaX/thmclrx/blob/7ab4de9fce583e88da6a41b0e256e91c45a10f67/src/octree.cpp#L91-L103</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> r = color.r.toString(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> g = color.g.toString(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> b = color.b.toString(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">while</span>(r.length &lt; <span class="number">8</span>) r = <span class="string">'0'</span> + r;</span><br><span class="line">        <span class="keyword">while</span>(g.length &lt; <span class="number">8</span>) g = <span class="string">'0'</span> + g;</span><br><span class="line">        <span class="keyword">while</span>(b.length &lt; <span class="number">8</span>) b = <span class="string">'0'</span> + b;</span><br><span class="line"></span><br><span class="line">        str += r[level];</span><br><span class="line">        str += g[level];</span><br><span class="line">        str += b[level];</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="built_in">parseInt</span>(str, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> === node.children[idx]) &#123;</span><br><span class="line">            node.children[idx] = createNode(node, idx, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">undefined</span> === node.children[idx]) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(color.r.toString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addColor(node.children[idx], color, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="合併顏色">合併顏色</h4><p>　　這一步就是八叉樹的空間複雜度低和保真度高的另一個原因了。</p>
<blockquote>
<p>勿忘初心。</p>
</blockquote>
<p>　　我們用這個算法做的是顏色量化，或者說我要拿它提取主題色、調色板，所以肯定是提取幾個有代表性的顏色就夠了，否則茫茫世界中 <strong>RRGGBB</strong> 一共有 419430400 種顏色，怎麼歸納？</p>
<p>　　我們可以讓指定一棵八叉樹不超過多少多少葉子節點（也就是最後能歸納出來的主題色數），比如 8，比如 16、64 或者 256 等等。</p>
<p>　　所以當葉子節點數超過我們規定的葉子節點數的時候，我們就要合併其中一個節點，將其所有子節點的數據都合併到它身上去。</p>
<p>　　舉個例子，我們有一個節點有八個子節點，並且都是葉子節點，那麼我們把八個葉子節點的通道分量全累加到該節點中，顏色總數也累加到該節點中，然後刪除八個葉子節點並把該節點設置爲葉子節點。那麼一下子我們就合併了八個節點有木有！</p>
<p>　　爲什麼這些節點可以被合併呢？</p>
<p>　　我們來看看某個節點下的子節點顏色都有神馬相似點吧——它們的三個分量前七位（或者說如果已經不是最底層的節點的話那就是前幾位）是相同的，那麼比如說剛纔的 <code>FF7800</code>，跟它同級並且擁有相同父節點（也就是它的兄弟節點）的顏色都是什麼呢：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R: <span class="number">1111</span> <span class="number">111</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">G: <span class="number">0111</span> <span class="number">100</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">B: <span class="number">0000</span> <span class="number">000</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>　　整合出來一看：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">FE7800</span></span><br><span class="line">FE7801</span><br><span class="line">FE7900</span><br><span class="line">FE7901</span><br><span class="line">FF7800</span><br><span class="line">FF7801</span><br><span class="line">FF7900</span><br><span class="line">FF7901</span><br></pre></td></tr></table></figure>
<p>　　怎麼樣？是不是確實很相近？這就是八叉樹的精髓了，所有的兄弟節點肯定是在一個相近的顏色範圍內。</p>
<p>　　所以說我們要合併就先去最底層的 <strong><em>reducible</em></strong> 鏈表中尋找一個可以合併的節點，把它從鏈表中刪除之後合併葉子節點並且刪除其葉子節點就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 找到最深層次的並且有可合併節點的鏈表</span></span><br><span class="line">    <span class="keyword">var</span> lv = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">null</span> === reducible[lv]) lv--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出鏈表頭並將其從鏈表中移除</span></span><br><span class="line">    <span class="keyword">var</span> node = reducible[lv];</span><br><span class="line">    reducible[lv] = node.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合併子節點</span></span><br><span class="line">    <span class="keyword">var</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> g = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> === node.children[i]) <span class="keyword">continue</span>;</span><br><span class="line">        r += node.children[i].red;</span><br><span class="line">        g += node.children[i].green;</span><br><span class="line">        b += node.children[i].blue;</span><br><span class="line">        count += node.children[i].pixelCount;</span><br><span class="line">        leafNum--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 賦值</span></span><br><span class="line">    node.isLeaf = <span class="literal">true</span>;</span><br><span class="line">    node.red = r;</span><br><span class="line">    node.green = g;</span><br><span class="line">    node.blue = b;</span><br><span class="line">    node.pixelCount = count;</span><br><span class="line">    leafNum++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　這樣一來，就合併了一個最深層次的節點了，如果滿打滿算的話，一次合併最多會燒掉 7 個節點（我大 FFF 團壯哉）。</p>
<h4 id="建樹">建樹</h4><p>　　上面的函數都有了，我們可以開始建樹了。</p>
<p>　　實際上建樹的過程就是遍歷一遍傳入的像素顏色信息，對於每個顏色都插入到八叉樹當中；並且每一次插入之後都判斷下葉子節點數有沒有溢出，如果滿出來的話需要及時合併。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildOctree</span>(<span class="params">pixels, maxColors</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pixels.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 添加顏色</span></span><br><span class="line">        addColor(root, pixels[i], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合併葉子節點</span></span><br><span class="line">        <span class="keyword">while</span>(leafNum &gt; maxColors) reduceTree();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　整棵樹建好之後，我們應該得到了最多有 <code>maxColors</code> 個葉子節點的高保真八叉樹。其根節點爲 <code>root</code>。</p>
<h4 id="主題色提取">主題色提取</h4><p>　　有了這麼一棵八叉樹之後我們就可以從裏面提取我們想要的東西了。</p>
<p>　　主題色提取實際上就是把八叉樹當中剩下的葉子節點 <strong><em>RGB</em></strong> 通道分量求平均，求出來的就是近似的主題色了。（也許有更好的，不是求平均的方法能獲得更好的主題色結果，但是我沒有深入去研究，歡迎大家一起來指正 (❀╹◡╹)）</p>
<p>　　於是我們深度遍歷這棵樹，每遇到葉子節點，就求出顏色加入到我們所存結果的數組或者任意數據結構當中了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorsStats</span>(<span class="params">node, object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.isLeaf) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">parseInt</span>(node.red / node.pixelCount).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">parseInt</span>(node.green / node.pixelCount).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(node.blue / node.pixelCount).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(r.length === <span class="number">1</span>) r = <span class="string">'0'</span> + r;</span><br><span class="line">        <span class="keyword">if</span>(g.length === <span class="number">1</span>) g = <span class="string">'0'</span> + g;</span><br><span class="line">        <span class="keyword">if</span>(b.length === <span class="number">1</span>) b = <span class="string">'0'</span> + b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color = r + g + b;</span><br><span class="line">        <span class="keyword">if</span>(object[color]) object[color] += node.pixelCount;</span><br><span class="line">        <span class="keyword">else</span> object[color] = node.pixelCount;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> !== node.children[i]) &#123;</span><br><span class="line">            colorsStats(node.children[i], object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="算法小結">算法小結</h4><p>　　八叉樹主題色提取算法提取出來的主題色是一個無固定調色板（Non-palette）的顏色羣，它有着對原圖的儘量保真性，但是由於沒有固定的調色板，有時候對於搜索或者某種需要固定值來解釋的場景中還是欠了點火候。但是活靈活現非它莫屬了。比如某種圖片格式裏面預先存調色板然後存各像素的情況下，我們就可以用八叉樹提取出來的顏色作爲該圖片調色板，能很大程度上對這張圖片進行保真，並且圖片顏色也減到一定的量。</p>
<p>　　該算法的完整 Demo 大家可以在我的 <a href="https://github.com/XadillaX/theme-color-test/blob/master/version3/octree.js" target="_blank" rel="external">Github</a> 當中找到。</p>
<h3 id="最小差值法">最小差值法</h3><p>　　這是一個非常簡單又實用的算法。</p>
<p>　　大致的思想就是給定一個調色板，過來一個顏色就跟調色板中的顏色一一對比，取最小差值的那個調色板裏的顏色作爲這個顏色的代表。</p>
<p>　　對比的過程就是分別將 <strong>R / G / B</strong> 通道的值兩兩相減取絕對值，將三個差相加，得到的這個值就是顏色差值了。</p>
<p>　　反正最後就是調色板中哪個顏色跟對比的顏色差值最小，就拿過來就是了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> best = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bestv = pal[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> bestr = <span class="built_in">Math</span>.abs(r - bestv.r) + <span class="built_in">Math</span>.abs(g - bestv.g) + <span class="built_in">Math</span>.abs(b - bestv.b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; pal.length; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = pal[j];</span><br><span class="line">    <span class="keyword">var</span> res = <span class="built_in">Math</span>.abs(r - p.r) + <span class="built_in">Math</span>.abs(g - p.g) + <span class="built_in">Math</span>.abs(b - p.b);</span><br><span class="line">    <span class="keyword">if</span>(res &lt; bestr) &#123;</span><br><span class="line">        best = j;</span><br><span class="line">        bestv = pal[j];</span><br><span class="line">        bestr = res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = pal[best].r.toString(<span class="number">16</span>);</span><br><span class="line">g = pal[best].g.toString(<span class="number">16</span>);</span><br><span class="line">b = pal[best].b.toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r.length === <span class="number">1</span>) r = <span class="string">"0"</span> + r;</span><br><span class="line"><span class="keyword">if</span>(g.length === <span class="number">1</span>) g = <span class="string">"0"</span> + g;</span><br><span class="line"><span class="keyword">if</span>(b.length === <span class="number">1</span>) b = <span class="string">"0"</span> + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(colors[r + g + b] === <span class="literal">undefined</span>) colors[r + g + b] = -<span class="number">1</span>;</span><br><span class="line">colors[r + g + b]++;</span><br></pre></td></tr></table></figure>
<h2 id="我是怎麼做的">我是怎麼做的</h2><p>　　八叉樹的缺點我在之前的八叉樹小結中提到過了，就是顏色不固定。對於需要有一定固定值範圍的主題色提取需求來說不是那麼合人意。</p>
<p>　　而最小差值法的話又太古板了。</p>
<p>　　於是我的做法是將這兩種算法都過一遍。</p>
<p>　　比如我要將一張圖片提取出少於 256 種顏色，我會用八叉樹過濾一遍得出保證的兩百多種顏色，然後拿着這批顏色和其數量再扔到最小插值法裏面將顏色規範化一遍，得出的最終結果可能就是我想要的結果了。</p>
<p>　　這期間第二步的效率可以忽略不計，畢竟如果是上面的需求的話第一步的結果也就那麼兩百多種顏色。</p>
<p>　　這個方法我已經實現並且用在我自己的顏色提取包 <strong><em><a href="https://github.com/XadillaX/thmclrx" target="_blank" rel="external">thmclrx</a></em></strong> 裏了。大致的代碼可以看<a href="https://github.com/XadillaX/thmclrx/blob/7ab4de9fce583e88da6a41b0e256e91c45a10f67/lib/x.js#L95-L145" target="_blank" rel="external">這裏</a>。</p>
<h2 id="主題色提取_Node-js_包——thmclrx">主題色提取 Node.js 包——thmclrx</h2><p>　　在這幾天的辛勤勞作下，總算完成了某種意義上我的第一個 Node.js C++ Addon。</p>
<p>　　跟算法相關（八叉樹、最小差值）的計算全放在了 <a href="https://github.com/XadillaX/thmclrx/tree/master/src" target="_blank" rel="external">C++ 層</a>進行計算。大家有興趣的可以去讀一下並且幫忙指出各種各樣的缺點，算是拋磚引玉了。</p>
<p>　　這個包的 Repo 在 Github 上面：</p>
<blockquote>
<p><a href="https://github.com/XadillaX/thmclrx" target="_blank" rel="external">https://github.com/XadillaX/thmclrx</a></p>
</blockquote>
<p>　　文檔自認爲還算完整吧。並且也可以通過</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install thmclrx</span><br></pre></td></tr></table></figure>
<p>　　進行安裝。</p>
<h2 id="本文小結">本文小結</h2><p>　　進花瓣兩個月了，這一次終於如願以償地碰觸到了一點點的『算法相關』的活。（我不會告訴你這不是我的任務，是我從別人手中搶來的 2333333 <em>ଘ(੭</em>ˊᵕˋ)੭* ੈ✩‧₊˚</p>
<p>　　總之幾種算法和實現在上方介紹了，具體需要怎麼用還是要看大家自己了。我反正大致找到了我使用的途徑，那你們呢。( ´･･)ﾉ(._.`)</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>所謂主題色提取，就是對於一張圖片，近似地提取出一個調色板，使得調色板裏面的顏色能組成這張圖片的主色調。</p>
</blockquote>
<p>　　以上定義爲我個人胡謅的。</p>
<p>　　大家不要太把我的東西當成嚴謹的文章來看，很多東西什麼的]]>
    </summary>
    
      <category term="Algorithm" scheme="http://xcoder.in/tags/Algorithm/"/>
    
      <category term="Theme Color" scheme="http://xcoder.in/tags/Theme-Color/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我是如何實現簡單的隨機中文名生成器的（Node 版）]]></title>
    <link href="http://xcoder.in/2014/09/01/how-i-made-chinese-random-x/"/>
    <id>http://xcoder.in/2014/09/01/how-i-made-chinese-random-x/</id>
    <published>2014-09-01T12:36:33.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="序">序</h2><p>最近閒着蛋疼實現了兩個庫。</p>
<ul>
<li>隨機生成中文名字</li>
<li>隨機生成中文技能名</li>
</ul>
<p>我當然不會說去用各種人工智能去實現一個強大的的解析器然後生成，也不會說用一個非常龐大如搜狗拼音的姓名庫來隨機獲取——我只是偶然間知道蘑菇街小俠節一個混戰 PK 的 Demo 編寫比賽，閒來無聊隨便寫寫，然而這其中我需要隨機給 Bot 起名以及技能起名而用到的庫。</p>
<p>不需要有多少正確性——這兩個庫的結果經常出現非常奇葩的名字，讓人哭笑不得，但是我要的就是這種效果。</p>
<h2 id="結果示範">結果示範</h2><p>就兩個庫，我各生成一批名字以示效果。</p>
<h3 id="Chinese_Random_Name">Chinese Random Name</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">闕造</span><br><span class="line">廣錫一</span><br><span class="line">席寺</span><br><span class="line">扶駕</span><br><span class="line">鄭萱黃</span><br><span class="line">林樊牽</span><br><span class="line">孟登元</span><br><span class="line">魚彰</span><br><span class="line">皮憂暑</span><br><span class="line">左稗</span><br><span class="line">宦醇</span><br><span class="line">糜弋招</span><br><span class="line">席準</span><br><span class="line">方抑</span><br><span class="line">烏泔</span><br><span class="line">苗魯</span><br><span class="line">孟候依</span><br><span class="line">龍珠餞</span><br><span class="line">洪打鷹</span><br><span class="line">繆負鐸</span><br></pre></td></tr></table></figure>
<h3 id="Chinese_Random_SKill">Chinese Random SKill</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">地永心法</span><br><span class="line">纓槍訣</span><br><span class="line">冉腿</span><br><span class="line">尼邏心法</span><br><span class="line">奠拳譜</span><br><span class="line">曲掌法</span><br><span class="line">始刺</span><br><span class="line">娘桶擷刀</span><br><span class="line">璋瑾單養刀</span><br><span class="line">銎刀</span><br><span class="line">勵儉驛媛心訣</span><br><span class="line">瞻馳刀訣</span><br><span class="line">晏協驊腿</span><br><span class="line">示嫩帳羽刀訣</span><br><span class="line">賽勘神體刀訣</span><br><span class="line">鑄愛指</span><br><span class="line">施淨琮萍棍</span><br><span class="line">泊臨惇槍訣</span><br><span class="line">我道六分槍</span><br><span class="line">殘亭求拳譜</span><br></pre></td></tr></table></figure>
<h2 id="解析">解析</h2><p>實際上無論是起名還是技能名，都用了一個相同的起名字庫和一段差不多的複用代碼（雖然沒有真正意義上的複用，只是複製粘貼而已，誰讓他們是兩個庫呢，已經很簡單了，我總不能再給他們搞一個依賴出來吧？）</p>
<h3 id="起姓">起姓</h3><p>關於 <code>chinese-random-name</code> 中的姓氏，我找了一箇中國百家姓（包括複姓）比較全的詞庫。</p>
<blockquote>
<p><a href="https://github.com/XadillaX/chinese-random-name/blob/master/dict/f.dict" target="_blank" rel="external">詞庫鏈接</a></p>
</blockquote>
<p>比較幸運，我找到的時候已經是這麼分段分好了。我也沒有詳細做研究，隨便給了不同的段不同的權值，當然越前面的段權值越高，被隨機到的可能性越大。</p>
<p>首先用 <code>split</code> 來分割不同段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = dict.split(<span class="string">"\n\n"</span>);</span><br></pre></td></tr></table></figure>
<p>對於每一段來說通過 <code>Array.reduce</code> (詳見 <a href="https://github.com/andrewplummer/Sugar/blob/master/lib/es5.js#L287" target="_blank" rel="external">SugarJs</a>) 來分割成行再成字。</p>
<p>看字典一共有 6 大段，每段的權值分別爲：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weights = [ <span class="number">100</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span> ];</span><br></pre></td></tr></table></figure>
<p>然後每個字都有一個其權值區間，是累加上去的。</p>
<p>最後獲取姓的時候隨機生成一個在總區間內的數字，然後看看數字在哪個姓的區間內，就返回這個姓。</p>
<h3 id="技能後綴">技能後綴</h3><p>關於 <code>chinese-random-skill</code> 中的技能後綴，我偷懶了。因爲那個時候 Demo 就快 Deadline 了，所以隨便糊弄了一下——直接把印象裏面比較熟的後綴寫上去了事，也不給權值了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suffix = [</span><br><span class="line">    <span class="string">"劍"</span>, <span class="string">"劍法"</span>, <span class="string">"劍譜"</span>, <span class="string">"劍訣"</span>,</span><br><span class="line">    <span class="string">"槍"</span>, <span class="string">"槍法"</span>, <span class="string">"槍訣"</span>,</span><br><span class="line">    <span class="string">"拳"</span>, <span class="string">"拳法"</span>, <span class="string">"拳譜"</span>,</span><br><span class="line">    <span class="string">"刀"</span>, <span class="string">"刀法"</span>, <span class="string">"刀譜"</span>, <span class="string">"刀訣"</span>,</span><br><span class="line">    <span class="string">"斬"</span>, <span class="string">"刺"</span>, <span class="string">"大法"</span>, <span class="string">"心訣"</span>, <span class="string">"心法"</span>, <span class="string">"訣"</span>, <span class="string">"寶典"</span>,</span><br><span class="line">    <span class="string">"棍"</span>, <span class="string">"棍法"</span>, <span class="string">"棍譜"</span>, <span class="string">"棍訣"</span>,</span><br><span class="line">    <span class="string">"指"</span>, <span class="string">"掌"</span>, <span class="string">"掌法"</span>, <span class="string">"腿"</span>, <span class="string">"攻"</span>, <span class="string">"鉤"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h3 id="共用部分">共用部分</h3><p>名字主體爲兩個包的共用部分。</p>
<p>實際上他們依賴於一個特定款式的字庫——我也就網上隨便那麼一搜。</p>
<blockquote>
<p><a href="https://github.com/XadillaX/chinese-random-name/blob/master/dict/n.dict" target="_blank" rel="external">字庫鏈接</a></p>
</blockquote>
<p>它每一行的結構一樣：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span> UniChar UniChar：<span class="built_in">String</span></span><br></pre></td></tr></table></figure>
<p>其中第一個數字我目測是繁體的筆畫數，比如 899 行的 <code>書</code> 繁體就是 <code>書</code>，數一下的確是 10 劃。</p>
<p>第二個就是字本體，第三個是該字的五行屬性，最後是這個字在什麼什麼命數（請不要迷信）描述。</p>
<p>爲了讓名字看起來稍微正常點（只是稍微而已），我儘可能讓同屬性的字在一塊兒，於是有了以下組合：</p>
<ul>
<li>金金</li>
<li>木木</li>
<li>水水</li>
<li>火火</li>
<li>土土</li>
</ul>
<p><a href="https://github.com/XadillaX/chinese-random-name/blob/master/lib/name.js#L41" target="_blank" rel="external">這些字</a>湊在一起的權值爲 100。</p>
<p>然後隔一個屬性的話是相剋的，我不懂什麼起名大法什麼的，只是用膝蓋想了下相剋的屬性不好起名吧（猜錯了不要怨我），於是給了 20 的權值。</p>
<p>至於隔壁屬性，是相生吧？於是給了 50 權值。</p>
<p>對於三個字的起名來說，也是用了類似的方法給權值，具體可以參考代碼。</p>
<p>總之就是根據其兩兩之間的五行關係來起名的，聽起來還是有那麼點道理的。</p>
<p>哈哈，權當玩的，認真你就輸了。</p>
<h3 id="綜合說明">綜合說明</h3><p>上面的分步做完了，然後真·生成名字的步驟是：</p>
<p>隨機生成一個姓（或者技能後綴），然後按照某個權值隨機生成一個數字代表剩下的名字的長度，然後隨機生成一串該長度的名字即可。</p>
<p>最後拼接上去就 OK 了。</p>
<h2 id="無節操小廣告">無節操小廣告</h2><p>最後還是貼一下兩個包的 repo 地址吧：</p>
<blockquote>
<ul>
<li><a href="https://github.com/XadillaX/chinese-random-name" target="_blank" rel="external">Chinese Random Name</a></li>
<li><a href="https://github.com/XadillaX/chinese-random-skill" target="_blank" rel="external">Chinese Random Skill</a></li>
</ul>
</blockquote>
<p>以及安裝的話照下去弄就好了</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install chinese-random-name</span><br><span class="line">$ npm install chinese-random-skill</span><br></pre></td></tr></table></figure>
<p><code>README</code> 文件兩個包都有。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="序">序</h2><p>最近閒着蛋疼實現了兩個庫。</p>
<ul>
<li>隨機生成中文名字</li>
<li>隨機生成中文技能名</li>
</ul>
<p>我當然不會說去用各種人工智能去實現一個強大的的解析器然後生成，也不會說用一個非常龐大如搜狗拼音的姓名庫]]>
    </summary>
    
      <category term="NodeJS" scheme="http://xcoder.in/tags/NodeJS/"/>
    
      <category term="中文名" scheme="http://xcoder.in/tags/%E4%B8%AD%E6%96%87%E5%90%8D/"/>
    
      <category term="中文技能" scheme="http://xcoder.in/tags/%E4%B8%AD%E6%96%87%E6%8A%80%E8%83%BD/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Storm 中 Clojure 的 Prepare Bolt 實現]]></title>
    <link href="http://xcoder.in/2014/08/04/storm-clojure-prepare-bolt/"/>
    <id>http://xcoder.in/2014/08/04/storm-clojure-prepare-bolt/</id>
    <published>2014-08-04T03:50:21.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>　　Storm 中的 Bolt 都是通過 Nimbus 這個服務將序列化好的 Bolt 斷章取義地發到各個 worker 中。所以，任何在 bolt 之外你自認爲加載期間初始化計算好的上下文環境並不會被打包上去，Java 我不懂也不知道，但是至少在 Clojure 這個類的概念被淡化的 LIST 方言中，你要做的就是把所有跟 bolt 初始化計算相關的代碼放到其 <code>prepare</code> 的代碼當中去。</p>
<p>　　你想一下，當你在文件加載的時候初始化了一個 MongoDB 鏈接，這個鏈接總不能被序列化到遠程去吧？所以說辦法就是把 bolt 搞上去之後，bolt 自動去初始化一個鏈接——這就是 <code>prepare</code> 的作用了。</p>
<p>　　說白了，這個還是我們在 <strong><em>Suwako</em></strong> 當中踩到的坑。</p>
<h2 id="做法">做法</h2><p>　　大致的骨架如下：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defbolt</span> bolt <span class="collection">[...]</span> <span class="collection">&#123;<span class="attribute">:prepare</span> <span class="literal">true</span>&#125;</span></span><br><span class="line"> <span class="collection">[...]</span></span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[...]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bolt</span></span><br><span class="line">   <span class="list">(<span class="keyword">prepare</span> <span class="collection">[...]</span></span><br><span class="line">    <span class="list">(<span class="keyword">...</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword">execute</span> <span class="collection">[tuple]</span></span><br><span class="line">    <span class="list">(<span class="keyword">...</span>)</span>)</span>)</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>　　首先就是 <code>{:prepare true}</code> 代表了它是一個需要初始化的 Bolt。</p>
<p>　　然後在 <code>(bolt)</code> 的作用域之內有兩個 form——<code>prepare</code> 和 <code>execute</code>。</p>
<p>　　其中 <code>prepare</code> 就是你要初始化的語句了。舉個例子，我們讓這裏面初始化一個 <a href="http://clojuremongodb.info/" target="_blank" rel="external">Monger</a>，於是我們要在 <code>let</code> 裏面定義一個用於鏈接的 <code>atom {}</code>。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defbolt</span> bolt <span class="collection">[<span class="string">"..."</span>]</span> <span class="collection">&#123;<span class="attribute">:prepare</span> <span class="literal">true</span>&#125;</span></span><br><span class="line"> <span class="collection">[conf context collector]</span></span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[conn <span class="list">(<span class="keyword"><span class="built_in">atom</span></span> <span class="collection">&#123;&#125;</span>)</span></span><br><span class="line">       db <span class="list">(<span class="keyword"><span class="built_in">atom</span></span> <span class="collection">&#123;&#125;</span>)</span>]</span></span><br><span class="line">   <span class="list">(<span class="keyword">bolt</span></span><br><span class="line">    <span class="list">(<span class="keyword">prepare</span> <span class="collection">[conf context collector]</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">reset!</span></span> conn <span class="list">(<span class="keyword">mg/connect</span> ...)</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">reset!</span></span> db <span class="list">(<span class="keyword">mg/get-db</span> @conn ...)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">execute</span> <span class="collection">[tuple]</span></span><br><span class="line">     <span class="list">(<span class="keyword">...</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>　　這樣一來，當 Bolt 被 Nimbus 打包傳到各個 worker 之後，Bolt 執行起來的時候會自動執行 <code>prepare</code> 當中的代碼，即初始化 MongoDB 的鏈接，並且將其賦值給 <code>conn</code> 和 <code>db</code> 兩個 atom。</p>
<p>　　那麼，我們就能在本體 <code>execute</code> 當中使用 <code>@conn</code> 和 <code>@db</code> 來使喚 MongoDB 了。</p>
<h2 id="思考">思考</h2><p>　　可能很多人不解，不是說儘量保持 LISP 語系當中值的不變性的麼？</p>
<p>　　其實不變性只是爲了提高程序在運行時的效率——而事實上是，上面那段代碼並沒有在運行時去做變量。</p>
<p>　　雖然說這麼說有點牽強，但是的確就是這個意思——因爲我們是在程序執行真正有用的好邏輯的時候沒有去改變一些值，相反只是在 Bolt 啓動的時候做一些變量的操作。</p>
<p>　　換句話說，雖然嚴謹的講那個時候是算運行時，但是在運行時裏面我們卻可以把它歸類爲預處理——這一類東西反正程序還沒真正開始跑有用的東西，效率慢一點無所謂，而且就初始化這麼屁大點事兒能有多少影響？</p>
<p>　　效率和效果之間權衡上面的還是要仁者見仁智者見智了。</p>
<h2 id="小結">小結</h2><p>　　本以爲 <code>Suwako</code> 終於可以暫時告一段落了，緊要關頭居然還是阻塞了。</p>
<p>　　說多都是淚，不說了，找 Bug 去了。</p>
<p><img src="suwako.jpg" alt="泄矢諏訪子"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>　　Storm 中的 Bolt 都是通過 Nimbus 這個服務將序列化好的 Bolt 斷章取義地發到各個 worker 中。所以，任何在 bolt 之外你自認爲加載期間初始化計算好的上下文環境並不會被打包上去，Java 我不懂也不知道]]>
    </summary>
    
      <category term="Clojure" scheme="http://xcoder.in/tags/Clojure/"/>
    
      <category term="Huaban" scheme="http://xcoder.in/tags/Huaban/"/>
    
      <category term="Storm" scheme="http://xcoder.in/tags/Storm/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[開發測試時給 Kafka 發消息的 UI 發送器——Mikasa]]></title>
    <link href="http://xcoder.in/2014/07/30/kafka-ui-sender-mikasa/"/>
    <id>http://xcoder.in/2014/07/30/kafka-ui-sender-mikasa/</id>
    <published>2014-07-30T02:14:29.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起_(灬ºωº灬)">起 (灬ºωº灬)</h2><p>　　說來話長，自從入了花瓣，整個人就掉進連環坑了。</p>
<p>　　後端元數據採集是用 Storm 來走拓撲流程的，又因爲 @<a href="http://weibo.com/zolazhou" target="_blank" rel="external">Zola</a> 不是很喜歡 Java，所以退而求其次選擇了 Clojure，所以正在苦逼地學習 Clojure 和 Storm 中。</p>
<p>　　目前來說外面的 Storm 拓撲的 Spout 是從 Kafka 中流入數據的。但是我們要給 Kafka 發送測試數據的時候，就需要跑到 Kafka 的測試服務器打開它的一個發送腳本進去發送，非常蛋疼；要麼就是直接通過特定的發送業務邏輯代碼測試，沒有一個稍微泛一點的測試用發數據工具，於是 Mikasa 誕生了。</p>
<h2 id="承_(ﾟ3ﾟ)～♪">承 (ﾟ3ﾟ)～♪</h2><p>　　講到 Mikasa 名字的來源，實際上看過『巨人』都知道，八塊腹肌的三爺。</p>
<p>　　這裏小爆料一下，又拍雲和花瓣（都是同宗）的項目名很大部分都是以海賊王的角色命名的——尤其是又拍雲更是喪心病狂。不過這讓我這個僞·二次元的小夥伴異常欣喜，因爲我也能用各種啪啪啪來命名我的角色了。比如我的第一個 Storm 相關的項目就叫 Suwako，即諏訪子大人，因爲腦子需要各種跳，於是就對諏訪子大人這位青蛙之神各種膜拜。</p>
<p>　　至於這個發射器爲什麼要用三爺呢？因爲三爺相當於先鋒軍哇！</p>
<p><img src="mikasa.jpeg" alt="Mikasa"></p>
<p>　　這裏的 Kafka 依賴用了搜狐小夥伴 @<a href="http://weibo.com/crzidea" target="_blank" rel="external">Crzidea</a> 他們團隊寫的模塊。</p>
<h2 id="轉_(ㄏ￣▽￣)ㄏ_ㄟ(￣▽￣ㄟ)">轉 (ㄏ￣▽￣)ㄏ   ㄟ(￣▽￣ㄟ)</h2><p>　　於是，話也不多說，直接上 repo 吧。在公司內網的 gitlab 裏面有一份，還有一個 repo 在 <a href="https://github.com/" target="_blank" rel="external">GitHub</a> 上。</p>
<blockquote>
<p><a href="https://github.com/XadillaX/mikasa" target="_blank" rel="external">點我</a></p>
</blockquote>
<h3 id="Download_||_Clone">Download || Clone</h3><p>　　如果要直接下載的話就用這個鏈接：</p>
<blockquote>
<p><a href="https://github.com/XadillaX/mikasa/archive/master.zip" target="_blank" rel="external">https://github.com/XadillaX/mikasa/archive/master.zip</a></p>
</blockquote>
<p>　　如果要克隆的話就：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/XadillaX/mikasa.git</span><br></pre></td></tr></table></figure>
<h3 id="Setup">Setup</h3><p>　　直接安裝一下依賴：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="Configuration">Configuration</h3><p>　　接下去就是簡單的配置一下了，其實就是配置下配置文件。由於是快速開發，直接用了自己之前的 <a href="https://github.com/XadillaX/exframess" target="_blank" rel="external">Exframess</a> 框架，所以很多無用代碼也懶得刪了。</p>
<h4 id="config/server-js">config/server.js</h4><p>　　這裏其實別的也不用動，主要是修改下端口即可。</p>
<h4 id="config/kafka-js">config/kafka.js</h4><p>　　這裏修改一下 Kafka 的 <code>Connection String</code> 就好了。</p>
<h3 id="Start_up">Start up</h3><p>　　最後啓動服務即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js&#10;# or&#10;$ pm2 app.js&#10;# or some other&#39;s</span><br></pre></td></tr></table></figure>
<h2 id="合_(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧">合 (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</h2><p>　　最後的效果是這樣的：</p>
<p><img src="mikasa-preview.png" alt="Preview"></p>
<p>　　只要在 Topics 欄裏面輸入你要發送的 Topic，然後再下面的消息欄裏面輸入你要傳的消息（字符串），最後點擊 <code>Send</code> 即可將你的測試消息發進 Kafka 中去了。</p>
<blockquote>
<p>託大家的福，今天我的 Suwako 整個邏輯終於跑通了，撒花！ε٩(๑&gt; ₃ &lt;)۶з</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起_(灬ºωº灬)">起 (灬ºωº灬)</h2><p>　　說來話長，自從入了花瓣，整個人就掉進連環坑了。</p>
<p>　　後端元數據採集是用 Storm 來走拓撲流程的，又因爲 @<a href="http://weibo.com/zolazhou" targ]]>
    </summary>
    
      <category term="Kafka" scheme="http://xcoder.in/tags/Kafka/"/>
    
      <category term="Mikasa" scheme="http://xcoder.in/tags/Mikasa/"/>
    
      <category term="花瓣" scheme="http://xcoder.in/tags/%E8%8A%B1%E7%93%A3/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Untrusted - 遊戲題解]]></title>
    <link href="http://xcoder.in/2014/06/12/untrusted-solution/"/>
    <id>http://xcoder.in/2014/06/12/untrusted-solution/</id>
    <published>2014-06-12T03:08:34.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://alexnisnevich.github.io/untrusted/" target="_blank" rel="external">Trusted</a> 是一個代碼解謎遊戲，用 Javascript 來過關的。</p>
<p>　　昨天凌晨花了仨小時通關了這個遊戲，在這裏就粗粗做一下題解吧，好幾題都是 Hack 過去的。（不要臉，( ﾟДﾟ)σ</p>
<h2 id="Ceil_Block_A">Ceil Block A</h2><p>　　這有點像教學關吧，總之先拿到那臺電腦你就能操作了。拿到電腦後你就能修改地圖內部黑色底色的代碼了。</p>
<p>　　這個時候你只需要把中間設置牆的代碼去掉就可以了，或者註釋掉：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for(y = 3; y &lt;= map.getHeight() - 10; y++) &#123;</span></span><br><span class="line"><span class="comment">//    map.placeObject(5, y, 'block');</span></span><br><span class="line"><span class="comment">//    map.placeObject(map.getWidth() - 5, y, 'block');</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for(x = 5; x &lt;= map.getWidth() - 5; x++) &#123;</span></span><br><span class="line"><span class="comment">//    map.placeObject(x, 3, 'block');</span></span><br><span class="line"><span class="comment">//    map.placeObject(x, map.getHeight() - 10, 'block');</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<p>　　然後 <code>&lt;ctrl-5&gt;</code> 重新執行——噠噠～牆就消失了，趕緊到藍色的出口處吧。</p>
<h2 id="The_Long_Way_Out">The Long Way Out</h2><p>　　代碼大致是給你創建了一個迷宮，並且出口處四面用圍牆圍起來。</p>
<p>　　我用了一個比較 Hack 的方法，在第一個黑色區域的最上方把 <code>maze.create</code> 重定向到自己的一個空函數，這樣下面調用創建迷宮的函數就不會被執行，這個時候再執行的話迷宮就不見了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maze.create = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>　　迷宮不見了還不靠譜，因爲還有一個出口四周有牆——那就自己再建一個出口唄，在第二個黑色區域寫上建立一個新出口的代碼即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.placeObject(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"exit"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>勇敢的少年啊，快去創造奇蹟！</p>
</blockquote>
<h2 id="Validation_Engaged">Validation Engaged</h2><p>　　這題的要求是在還存在着一定量『壁』的情況下你能到達出口，也就是說純粹地刪除它加『壁』的代碼是不行的，那我們做點改動就 OK 了。把『壁』往外移動，直到把人和出口都是在『壁』內。</p>
<blockquote>
<p>那一天，人類終於回想起曾經一度被他們所支配的恐怖，還有囚禁於鳥籠中的那份屈辱。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(y = <span class="number">0</span>; y &lt;= map.getHeight() - <span class="number">3</span>; y++) &#123;</span><br><span class="line">    map.placeObject(<span class="number">5</span>, y, <span class="string">'block'</span>);</span><br><span class="line">    map.placeObject(map.getWidth() - <span class="number">5</span>, y, <span class="string">'block'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; x &lt;= map.getWidth() - <span class="number">5</span>; x++) &#123;</span><br><span class="line">    map.placeObject(x, <span class="number">3</span>, <span class="string">'block'</span>);</span><br><span class="line">    map.placeObject(x, map.getHeight() - <span class="number">3</span>, <span class="string">'block'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Multiplicity">Multiplicity</h2><p>　　嘛嘛，這是第二關的簡化版——直接再搞一個出口就 OK 了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.placeObject(<span class="number">20</span>, <span class="number">10</span>, <span class="string">'exit'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Minesweeper">Minesweeper</h2><p>　　這是一個雷區，你不碰雷就好。從代碼裏面看出來有個 <code>map.setSquareColor</code> 函數可以設置某個格子的顏色。那好辦，我們在設置一個地雷後把它用別的顏色標記出來就好了，然後重新執行只要你不是色盲都能安全通過。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.setSquareColor(x, y, <span class="string">"#ff7800"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Drones_101">Drones 101</h2><p>　　這題大概就是說有個癡漢會跟你靠近，然後把你先奸後殺。</p>
<p>　　但是癡漢很笨，在他的必經之路用牆堵住他就不會繼續動了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.placeObject(<span class="number">30</span>, <span class="number">12</span>, <span class="string">'block'</span>);</span><br><span class="line">map.placeObject(<span class="number">31</span>, <span class="number">11</span>, <span class="string">'block'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Colors">Colors</h2><p>　　這個是那個賣相不錯的電話機的教學關卡。所以大致的意思是設置了打電話的回調函數即可。ε٩(๑&gt; ₃ &lt;)۶з</p>
<p>　　分析代碼可知，要通過那幾個長得跟菊花一樣的帶色兒的牆你就要跟那個菊花顏色一樣。所以電話機的回調函數大致是讓你自己變色就好了。</p>
<p>　　按照順序所見，如果人是綠色的通過之後要變成紅色，然後再變成黃色再綠色。於是寫以下的變色過程就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> player = map.getPlayer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = player.getColor();</span><br><span class="line"><span class="keyword">switch</span>(color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"#0f0"</span>:</span><br><span class="line">        player.setColor(<span class="string">"#f00"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"#f00"</span>:</span><br><span class="line">        player.setColor(<span class="string">"#ff0"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"#ff0"</span>:</span><br><span class="line">        player.setColor(<span class="string">"#0f0"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　重新執行撿起電話機，然後通過綠菊花之後按 <code>Q</code> 使用電話機讓自己變色兒就好了。</p>
<blockquote>
<p>“哎呀，天！他是惦記弟弟了。……可我還不知道呢！那麼這是他老人家的狗？很高興。……你把它帶去吧。……這條小狗怪不錯的。……挺伶俐。……一口就把這傢伙的手指咬破了！哈哈哈哈！……咦，你幹嗎發抖？嗚嗚，……嗚嗚。……它生氣了，小壞蛋，……好一條小狗……”</p>
</blockquote>
<h2 id="Into_the_Woods">Into the Woods</h2><p>　　森林裏面有樹和牆，我也懶得想或者寫代碼了。（明明是自己想不出來#ﾟÅﾟ）⊂彡☆))ﾟДﾟ)･∵</p>
<p>　　總之我是儘可能向出口靠近，然後到死路了趕緊打電話讓森林重新生成一遍，如此循環往復直到出口。</p>
<h2 id="Fording_the_River">Fording the River</h2><p>　　23333333333333！做這題的時候差點沒把自己瀏覽器卡死。</p>
<p>　　大致的意思是河的上面有一條船，你直接遇水會死，要上船。但是船貌似不跟你走啊 QAQ。</p>
<p>　　而且設定寫着只能有一條 <code>raft</code>。</p>
<p>　　咱就來個偷天換日，自己造諾亞方舟鋪滿整條河（因爲懶得計算）。</p>
<p>　　首先定義諾亞方舟的類型：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.defineObject(<span class="string">"noah"</span>, &#123;</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'dynamic'</span>,</span><br><span class="line">    <span class="string">'symbol'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'color'</span>: <span class="string">'#420'</span>,</span><br><span class="line">    <span class="string">'transport'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'behavior'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">me</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　然後呢把它鋪滿整條大河吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; map.getWidth(); x++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> y = <span class="number">5</span>; y &lt; <span class="number">15</span>; y++) &#123;</span><br><span class="line">        map.placeObject(x, y, <span class="string">'noah'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一條大河，兩岸寬，風吹稻花香兩岸。（喂喂喂，小心卡死<em>(┐「ε:)</em></p>
</blockquote>
<h2 id="Ambush">Ambush</h2><p>　　後來我去 <code>Untrusted</code> 的 repo 去看題解，發現他們都是去驅使這羣癡漢幹嘛幹嘛。我感覺我的最簡單暴力了——直接廢了他們。</p>
<p>　　其實呢只要把碰撞函數重寫一遍，這堆癡漢馬上就變得人畜無害，你走過去人家還行禮呢233333333333</p>
<p>　　仔細看一下我們要完成的部分在 <code>behavior</code> 裏面，所以在這裏面用 <code>this</code> 是妥妥生效的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.onCollision = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看我碎蛋大粉拳！（忽然覺得下身一陣疼痛  |Д`)ノ⌒●～*</p>
</blockquote>
<h2 id="Robot">Robot</h2><p>　　你走一步機器人走一步，也是教學關卡。</p>
<p>　　機器人能往下走就往下走，能往右走就往右走就拿到鑰匙了，最後你再追上機器人把鑰匙搶過來就好了。因爲機器人是可以穿過紫翔色的那扇門的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(me.canMove(<span class="string">"down"</span>)) me.move(<span class="string">"down"</span>);</span><br><span class="line"><span class="keyword">else</span> me.move(<span class="string">"right"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>站住，保護費。你不裝 X 我們還是好朋友。</p>
</blockquote>
<h2 id="Robot_Nav">Robot Nav</h2><p>　　我居然無聊到自己把路線數出來了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> road = <span class="string">"ddddrrrrrrrrrrrrrrrrrrrrrrrrrrrrrruurrrrrrrrrrrrrrrrrddddddd"</span>;</span><br><span class="line"><span class="keyword">this</span>.cur = <span class="keyword">this</span>.cur === <span class="literal">undefined</span> ? <span class="number">0</span> : (<span class="keyword">this</span>.cur + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.cur &gt;= road.length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(road[<span class="keyword">this</span>.cur] === <span class="string">"d"</span>) me.move(<span class="string">"down"</span>);</span><br><span class="line"><span class="keyword">if</span>(road[<span class="keyword">this</span>.cur] === <span class="string">"r"</span>) me.move(<span class="string">"right"</span>);</span><br><span class="line"><span class="keyword">if</span>(road[<span class="keyword">this</span>.cur] === <span class="string">"u"</span>) me.move(<span class="string">"up"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Robot_Maze">Robot Maze</h2><p>　　好吧作者早就想到了有人會無聊地去數。</p>
<p>　　嘛嘛，就如作者所願寫個最基礎的 DFS 了事吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> direct = &#123;</span><br><span class="line">    <span class="string">"d"</span>: <span class="string">"down"</span>,</span><br><span class="line">    <span class="string">"u"</span>: <span class="string">"up"</span>,</span><br><span class="line">    <span class="string">"l"</span>: <span class="string">"left"</span>,</span><br><span class="line">    <span class="string">"r"</span>: <span class="string">"right"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs...</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">undefined</span> === <span class="keyword">this</span>.dfs) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ans = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vis = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        vis.push([]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) vis[i].push(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dir = [</span><br><span class="line">        [ <span class="number">0</span>, -<span class="number">1</span>, <span class="string">"u"</span>, <span class="string">"#f00"</span> ],</span><br><span class="line">        [ <span class="number">0</span>, <span class="number">1</span>, <span class="string">"d"</span>, <span class="string">"#0f0"</span> ],</span><br><span class="line">        [ -<span class="number">1</span>, <span class="number">0</span>, <span class="string">"l"</span>, <span class="string">"#00f"</span> ],</span><br><span class="line">        [ <span class="number">1</span>, <span class="number">0</span>, <span class="string">"r"</span>, <span class="string">"#fff"</span> ]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x === map.getWidth() - <span class="number">2</span> &amp;&amp; y === <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[y][x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> newx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> newy = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(newx &lt; <span class="number">0</span> || newy &lt; <span class="number">0</span> ||</span><br><span class="line">                newx &gt;= map.getWidth() ||</span><br><span class="line">                newy &gt;= map.getHeight() ||</span><br><span class="line">                vis[newy][newx] ||</span><br><span class="line">                map.getObjectTypeAt(newx, newy) === <span class="string">"block"</span></span><br><span class="line">                ) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> oldans = <span class="keyword">this</span>.ans;</span><br><span class="line">            <span class="keyword">this</span>.ans += dir[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.dfs(newx, newy)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.ans = oldans;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.setSquareColor(x, y, dir[i][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.ans += <span class="string">"dd"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.step &gt;= <span class="keyword">this</span>.ans.length) <span class="keyword">return</span>;</span><br><span class="line">me.move(direct[<span class="keyword">this</span>.ans[<span class="keyword">this</span>.step++]]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>紅魔館的地下室一樣呢。反正是機器人多走幾步路沒事，沒必要用 BFS 求最優解2333333333</p>
</blockquote>
<h2 id="Crisps_Contest">Crisps Contest</h2><p>　　剛纔那仨 2B 機器人引領你拿到了仨顏色的鑰匙在這邊派上用場了。</p>
<p>　　鑽紅菊花你需要有紅鑰匙，並且用了之後會少掉。其它顏色也一樣。最終你要拿到 <code>A</code> 所代表的 <code>theAlgorithm</code> 走到出口。</p>
<blockquote>
<p>等等！啊咧？綠鑰匙的通過判定有個地方可以修改？就是你通過綠菊花的時候需要有綠鑰匙並且你可以選擇你丟棄的東西。丟什麼好呢？電腦？不行不行，過關還靠它呢。電話機？以後肯定要用到。其它顏色鑰匙？那你肯定會被鎖在某個地方出不來。那就只有丟棄 <code>theAlgorithm</code> 了——反正只要拿到 <code>theAlgorithm</code> 之後不再通過綠菊花就沒事了。</p>
</blockquote>
<p>　　於是隻要把綠菊花的通過判斷函數裏面可修改的區域改成 <code>theAlgorithm</code> 就好了。</p>
<p>　　最後走的順序大概是：</p>
<blockquote>
<p>進左上角的門拿到<span style="color: yellow;">黃藥屎</span>和<span style="color: blue;">藍藥屎</span>出來。然後右上角把<span style="color: red;"><strong>紅</strong></span>和<span style="color: blue;"><strong>藍</strong></span>拿出來。然後向下直搗黃龍，左黃菊花進拿到 <code>theAlgorithm</code> 藍菊花通過拿到<span style="color: yellow;">黃藥屎</span>然後再黃菊花出。</p>
<p>大功告成！走向勝利的出口吧！</p>
<p><strong>自古紅藍出 CP！</strong></p>
</blockquote>
<h2 id="Exceptional_Crossing">Exceptional Crossing</h2><p>　　又是過河啊，這次你只能是死了，因爲你的編輯區域只有在 <code>player.killedBy()</code> 裏面。</p>
<blockquote>
<p>《訂製死神》：這個時候讓死神笑就可以了。</p>
</blockquote>
<p>　　讓我們一起來玩壞它吧！在裏面填上 <code>) = (0</code> 就好了。什麼什麼看不懂？你填進去看一下整句話就知道了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">player.killedBy() = (<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>　　然後死神就會被你玩壞了。你走過去的時候這句話執行出錯了2333333</p>
<h2 id="Lasers">Lasers</h2><p>　　有很多隱藏線，你人必須要跟隱藏線的顏色一致才能通過，然後目前所有線都用白色給畫出來。</p>
<p>　　目測作者的意思是讓你把硬編碼的白色改成隱藏線的顏色，這樣就能把線的顏色給標記出來，然後再給電話機寫個函數就是讓你自己的人變色。</p>
<p>　　不過我還是用了個 Hack 的方法——</p>
<p>　　第一條線他要畫就畫，咱不碰它就好了，只不過在第一條線畫完的後面我們把這個畫線函數給 Hack 掉：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using canvas to draw the line</span></span><br><span class="line"><span class="keyword">var</span> ctx = map.getCanvasContext();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">'white'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line">ctx.moveTo(x1, y1);</span><br><span class="line">ctx.lineTo(x2, y2);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">createLaser = abc;</span><br></pre></td></tr></table></figure>
<p>　　接下去是在第二片區域寫下自己的畫線函數吧，這題最下方檢測了線的數量不能少於 25 條。麼事，爺高興畫 100 條都麼問題，因爲我都把它縮在左上角了 2333333</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">        map.createLine([<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//... Ahahaha</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ctx = map.getCanvasContext();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">        ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line">        ctx.moveTo(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Pointers">Pointers</h2><p>　　有好多傳送門，每次執行隨機生成傳送位置，有些傳送門會把你傳到二小姐的地下室然後被吃掉。</p>
<p>　　我也懶得多動腦筋或者畫線什麼的，直接對兩個都是傳送門的 CP 標記一樣的隨機顏色就好了，最後跟着顏色走到出口去（有個坑就是有時候這個地圖本身就是死局，所以得多試幾次重新執行 இдஇ</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = <span class="string">"0123456789ABCDEF"</span>;</span><br><span class="line"><span class="keyword">if</span>(t1.getType() === <span class="string">"teleporter"</span> &amp;&amp; t2.getType() === <span class="string">"teleporter"</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">"#"</span> + dict[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">15</span>)] +</span><br><span class="line">        dict[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">15</span>)] +</span><br><span class="line">        dict[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">15</span>)];</span><br><span class="line"></span><br><span class="line">    map.setSquareColor(t1.getX(), t1.getY(), color);</span><br><span class="line">    map.setSquareColor(t2.getX(), t2.getY(), color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Super_Dr-_Eval_Bros">Super Dr. Eval Bros</h2><p>　　好吧本意是讓你設置一個 <code>timer</code> 然後一直跳啊跳的。</p>
<p>　　不過呢，定一個新方塊給自己搭一座橋就是了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">map.defineObject(<span class="string">"❤"</span>, &#123;</span><br><span class="line">    impassable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    symbol: <span class="string">"❤"</span></span><br><span class="line">&#125;);</span><br><span class="line">map.placeObject(<span class="number">20</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">21</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">22</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">23</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">24</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">25</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">26</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">27</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">28</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br><span class="line">map.placeObject(<span class="number">29</span>, <span class="number">12</span>, <span class="string">"❤"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你只要打個電話橋就會出現的。</p>
</blockquote>
<h2 id="Document_Object_Madness">Document Object Madness</h2><p>　　好神奇！好奇葩！我鍵盤 <code>hjkl</code> 亂按一通就過了。</p>
<h2 id="Boss_Fight">Boss Fight</h2><p>　　打 Boss 了。</p>
<p>　　好吧我承認我 Cheat 了——原諒我用了 <code>console.log</code>。</p>
<blockquote>
<p>因爲當我打開控制檯的時候下面的語句出現在我的眼裏：</p>
<blockquote>
<p><strong><em>If you can read this, you are cheating!</em></strong></p>
<p><strong><em>But really, you don’t need this console to play the game. Walk around using arrow keys (or Vim keys), and pick up the computer (⌘). Then the fun begins!</em></strong></p>
</blockquote>
</blockquote>
<p>　　嘛嘛，無論如何，過關了就好。</p>
<p>　　這題呢是要讓所有的 <code>boss</code> 給毀滅掉即可—— 當所有的 <code>boss</code> 毀滅之後會爆出任務道具 <code>theAlgorithm</code> 然後就能通關了。</p>
<p>　　後來我發現可以讓子彈消滅 <code>boss</code>。但是我當時沒這麼做。</p>
<p>　　我先弄了堵牆把子彈擋住先：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map.defineObject(<span class="string">"保命的"</span>, &#123;</span><br><span class="line">    impassable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    symbol: <span class="string">"❤"</span>,</span><br><span class="line">    onCollision: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; map.getWidth(); i++) &#123;</span><br><span class="line">    map.placeObject(i, <span class="number">9</span>, <span class="string">"保命的"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　這下你就能撿到電話機了——然後給電話機寫回調函數。</p>
<p>　　怎麼說呢，當你每用一次電話機，我就把當前存在於屏幕的 <code>boss</code> 和 <code>bullet</code> 給分開羅列，然後把 <code>boss</code> 的 <code>_destroy</code>（警察叔叔，就是這個函數是我 <code>console.log</code> 出來的）給嫁接到 <code>bullet</code> 的 <code>_destroy</code> 去。</p>
<p>　　這樣會出現什麼樣的結果呢？——當子彈碰到牆的時候就會銷燬，這個時候會觸發 <code>_destroy</code> 函數，但是這個時候的 <code>_destroy</code> 函數已經會變成了 <code>boss</code> 的了，也就是說這個時候子彈不會被銷燬反而是某一個 <code>boss</code> 的 <code>_destroy</code> 函數被調用然後被銷毀了。</p>
<p>　　再怎麼說這都是 Hack 的辦法，所以並不會觸發 <code>boss</code> 的 <code>onDestroy</code> 函數也就是說即使所有 <code>boss</code> 都沒了也不會出現 <code>theAlgorithm</code> 這玩意兒。</p>
<blockquote>
<p>自己動手豐衣足食！</p>
</blockquote>
<p>　　敵人不給我們我們就自己造唄！反正通關判定是——<code>boss</code> 數量爲 <code>0</code> 且你有 <code>theAlgorithm</code> 這個道具。</p>
<p>　　所以說當所有 <code>boss</code> 都被銷燬之後，我們自己去 <code>map.replaceObject</code> 一個 <code>theAlgorithm</code> 道具即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">map.getPlayer().setPhoneCallback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bosses = [];</span><br><span class="line">    <span class="keyword">var</span> bullets = [];</span><br><span class="line">    <span class="keyword">var</span> objects = map.getDynamicObjects();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(objects[i].getType() == <span class="string">"boss"</span>) &#123;</span><br><span class="line">            bosses.push(objects[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bullets.push(objects[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(bosses.length, bullets.length); i++) &#123;</span><br><span class="line">        bullets[i]._destroy = bosses[i]._destroy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bosses.length === <span class="number">0</span>) &#123;</span><br><span class="line">        map.placeObject(map.getPlayer().getX(), map.getPlayer().getY() + <span class="number">1</span>,</span><br><span class="line">            <span class="string">'theAlgorithm'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　以上代碼寫完後就開始打 <code>boss</code> 吧！趕緊去拿到電話機，然後你會發現打一個電話 <code>boss</code> 就少一堆，那感覺倍爽兒！</p>
<h2 id="End_of_the_Line">End of the Line</h2><p>　　馬上要通關了。這裏是個坑，開始我還以爲這裏就是真·通關了 QAQ。</p>
<p>　　隨後看看後面還是有關卡啊。但是我突然發現 <code>&lt;ctrl+0&gt;</code> 跳出來的 menu 左邊多出了文件夾！然後進去隨意翻看了。</p>
<p>　　最後發現原來是要修改 <code>scripts/objects.js</code> 文件→＿→。</p>
<p>　　好吧，分析通關驗證來看，這一關的 <code>map.finalLevel</code> 爲 <code>true</code>。所以我們只需要把 <code>scripts/objects.js</code> 文件裏面的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!game.map.finalLevel) &#123;</span><br><span class="line">    game._moveToNextLevel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>給改成如果是 <code>finalLevel</code> 就跑到下一關去就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(game.map.finalLevel) &#123;</span><br><span class="line">    game._moveToNextLevel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Credits">Credits</h2><p>　　由於事先文章結構沒有寫好，就接這關的坑位來小結吧 0. 0。（反正人家只是序幕章了</p>
<p>　　好的，其實也什麼總結的，但是總覺得得有這麼個小結纔對。</p>
<p>　　找工作啊找工作——有想要我的請聯繫我 2333333333</p>
<p>　　聯繫資料在 <a href="http://xcoder.in/curriculumvitae/">CV</a> 裏面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://alexnisnevich.github.io/untrusted/" target="_blank" rel="external">Trusted</a> 是一個代碼解謎遊戲，用 Javascript 來過關的。</p>
<p>　　昨天]]>
    </summary>
    
      <category term="Javascript" scheme="http://xcoder.in/tags/Javascript/"/>
    
      <category term="untrusted" scheme="http://xcoder.in/tags/untrusted/"/>
    
      <category term="遊戲" scheme="http://xcoder.in/tags/%E9%81%8A%E6%88%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cocos2d-x 3.1.1 開發環境搭建（Win篇）]]></title>
    <link href="http://xcoder.in/2014/06/07/cocos2d-311-setup/"/>
    <id>http://xcoder.in/2014/06/07/cocos2d-311-setup/</id>
    <published>2014-06-07T11:34:02.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　由於偷懶，所以在此感謝 Etond 的指導（喂喂喂，明明是自己懶得看文檔，明明 <a href="README"><code>READEME.md</code></a> 裏面就有！(´≖◞౪◟≖)</p>
<p>　　另，在搭建環境的時候，最好保證你在<span style="background: #222;">牆外</span>。以及我默認覺得大家已經有了 <code>Python</code> 環境和 <code>JDK</code>。</p>
<h2 id="前驅工作">前驅工作</h2><p>　　先去 <a href="http://www.cocos2d-x.org/download" target="_blank" rel="external">cocos2d-x 官網</a>下壓縮包，放到一個只有神知道的世界裏面。</p>
<p>　　接下去需要安裝仨東西：</p>
<h3 id="Android_SDK">Android SDK</h3><p>　　<a href="http://developer.android.com/sdk/index.html#download" target="_blank" rel="external">這東西</a>真尼瑪大啊！我家的小水管真吃不起。</p>
<p>　　然後把 <strong>adt-bundle-…zip</strong> 這個包壓縮到任意木有中文和空格的路徑下面。</p>
<h3 id="NDK">NDK</h3><p>　　<a href="http://developer.android.com/tools/sdk/ndk/index.html#download" target="_blank" rel="external">這小夥伴</a>也不小啊。都是 500M 的主兒啊（٩(ŏ﹏ŏ、)۶</p>
<p>　　也解壓到一個地方不用管它。</p>
<h3 id="Ant">Ant</h3><p>　　據說這貨是阿帕奇出的？總之下載地址在<a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">這裏</a>。</p>
<h2 id="安裝">安裝</h2><p>　　哦對了你還得有個 Python 路徑，這裏就不累述了。接下去在命令行裏面執行 Cocos2d 的 <code>setup.py</code> 文件即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#62; py setup.py</span><br></pre></td></tr></table></figure>
<p>　　接下去終端會停在下面一行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the path of NDK_ROOT (or press Enter to skip):</span><br></pre></td></tr></table></figure>
<p>　　在後面輸入你放好的 NDK 目錄即可。</p>
<p>　　如果下面又出現了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the path of ANDROID_SDK_ROOT (or press Enter to skip):</span><br></pre></td></tr></table></figure>
<p>　　你只需在裏面輸入你剛放好的 Android SDK 的目錄即可。（注意是要剛纔的 SDK 壓縮包解壓出來的 sdk 路徑）</p>
<p>　　再如果下面還出現：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the path of ANT_ROOT (or press Enter to skip):</span><br></pre></td></tr></table></figure>
<p>　　那麼再把 Ant 的路徑搞上去就好了。（又得注意這裏得是 Ant 的 bin 目錄）</p>
<p>　　最後確保終端（或者說命令行）裏面出現如下字樣：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please restart the terminal or restart computer to make added system variables take effect</span><br></pre></td></tr></table></figure>
<p>　　然後你把終端關了再開一個就好了。至此，大致就安裝完畢了。</p>
<h2 id="新建一個_Demo_項目">新建一個 Demo 項目</h2><p>　　隨意跑到一個目錄下面執行下面的命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#62; cocos new FirstGame -p in.xcoder.firstgame -l cpp -d FirstGame</span><br></pre></td></tr></table></figure>
<blockquote>
<p>大致意思就是說創建一個新的項目路徑，叫 <code>FirstGame</code>，其包名叫 <code>in.xcoder.firstgame</code>，然後語言是 <code>cpp</code>，最後 <code>-d</code> 是路徑。</p>
</blockquote>
<p>　　命令詳情幫助可以看 <code>cocos --help</code>。</p>
<h3 id="編譯_Demo">編譯 Demo</h3><p>　　讀標題，是 Win 篇。所以我們跑到項目路徑下面的 <code>proj.win32</code> 目錄下面用 M$ VS 打開 <code>FirstGame.sln</code> 就可以打開剛創建的模板項目了。</p>
<p>　　無論如何先編譯看看吧！～</p>
<p>　　如何？跑起來了吧？</p>
<h3 id="打包_Demo">打包 Demo</h3><p>　　這裏就講講如何打包安卓的版本吧：</p>
<h4 id="Debug_版本">Debug 版本</h4><p>　　跑到你的項目目錄下面（即有 <code>.cocos-project.json</code> 文件的目錄），然後執行下面的命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#62; cocos run -p android</span><br></pre></td></tr></table></figure>
<p>　　等工具編譯打包完成就 OK 了。（記得要查安卓手機並且調試模式哦～）</p>
<h4 id="Release_版本">Release 版本</h4><p>　　如果要上傳到 Google Play 之類的地方，需要有簽名。所以發佈 Release 版本之前，你先得搞好自己的簽名。</p>
<h5 id="Keytool">Keytool</h5><p>　　在終端跑到你的項目路徑下面，然後執行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#62; keytool -genkey -v -keystore FirstGame.keystore -alias FirstGame -keyalg RSA -keysize 2048 -validaty 10000</span><br></pre></td></tr></table></figure>
<p>　　照着命令行給的提示完成創建密鑰即可。</p>
<h5 id="編譯">編譯</h5><p>　　生成之後啊就直接執行編譯命令了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#62; cocos run -p android -m release</span><br></pre></td></tr></table></figure>
<p>　　在裏面呢最後會讓你輸入 <code>.keystore</code> 文件的路徑。</p>
<p>　　我們輸入相對路徑，由於我們剛纔把這個文件搞在項目根目錄，所以我們只需要輸入 <code>../FirstGame.keystore</code> 即可。接下去他會讓你輸入密碼、別名和別名信息的密碼。你都正確輸入一遍他就會安安分分跑在你的手機裏面了。</p>
<h4 id="仨版本的文件路徑">仨版本的文件路徑</h4><p>　　上面都弄好之後，你的仨版本 <code>*.apk</code> 文件也就生成了。很多人可能很困惑，爲什麼是仨版本。因爲其中 Release 版本還分帶簽名和沒簽名版本。</p>
<p>　　總之那個路徑在 <code>publish/android</code> 下面，裏面有仨 <code>*.apk</code> 文件，你拿出來發佈就可以了。</p>
<h2 id="小結">小結</h2><p>　　其實也沒什麼結不結的，這些東西你們自己去看看官方文檔就好了。總之就這樣了吧，以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　由於偷懶，所以在此感謝 Etond 的指導（喂喂喂，明明是自己懶得看文檔，明明 <a href="README"><code>READEME.md</code></a> 裏面就有！(´≖◞౪◟≖)</p>
<p>　　另，在搭建環境的時候，最好保證你在<span styl]]>
    </summary>
    
      <category term="cocos2d" scheme="http://xcoder.in/tags/cocos2d/"/>
    
      <category term="遊戲開發" scheme="http://xcoder.in/categories/%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【轉】TCP 的那些事兒（上）]]></title>
    <link href="http://xcoder.in/2014/06/07/tcp-those-things-1/"/>
    <id>http://xcoder.in/2014/06/07/tcp-those-things-1/</id>
    <published>2014-06-06T17:47:10.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>　　TCP是一個巨複雜的協議，因爲他要解決很多問題，而這些問題又帶出了很多子問題和陰暗面。所以學習 TCP 本身是個比較痛苦的過程，但對於學習的過程卻能讓人有很多收穫。關於 TCP 這個協議的細節，我還是推薦你去看 <a href="http://www.kohala.com/start/" target="_blank" rel="external">W.Richard Stevens</a> 的《<a href="http://book.douban.com/subject/1088054/" target="_blank" rel="external">TCP/IP 詳解 卷1：協議</a>》（當然，你也可以去讀一下 <a href="http://tools.ietf.org/html/rfc793" target="_blank" rel="external">RFC793</a> 以及後面 N 多的 RFC）。另外，本文我會使用英文術語，這樣方便你通過這些英文關鍵詞來查找相關的技術文檔。</p>
<p>　　之所以想寫這篇文章，目的有三個，</p>
<ul>
<li>一個是想鍛鍊一下自己是否可以用簡單的篇幅把這麼複雜的TCP協議描清楚的能力。</li>
<li>另一個是覺得現在的好多程序員基本上不會認認真真地讀本書，喜歡快餐文化，所以，希望這篇快餐文章可以讓你對TCP這個古典技術有所瞭解，並能體會到軟件設計中的種種難處。並且你可以從中有一些軟件設計上的收穫。</li>
<li>最重要的希望這些基礎知識可以讓你搞清很多以前一些似是而非的東西，並且你能意識到基礎的重要。</li>
</ul>
<p>　　所以，本文不會面面俱到，只是對 TCP 協議、算法和原理的科普。</p>
<p>　　我本來只想寫一個篇幅的文章的，但是 TCP 真 TMD 的複雜，比 C++ 複雜多了，這 30 多年來，各種優化變種爭論和修改。所以，寫着寫着就發現只有砍成兩篇。</p>
<ul>
<li>上篇中，主要向你介紹TCP協議的定義和丟包時的重傳機制。</li>
<li>下篇中，重點介紹TCP的流迭、擁塞處理。</li>
</ul>
<p>　　廢話少說，首先，我們需要知道 TCP 在網絡 OSI 的七層模型中的第四層 —— 傳輸層(Transport)，IP 在第三層 —— 網絡層(Network)，ARP 在第二層 —— 數據鏈路層(Data Link)，在第二層上的數據，我們叫 Frame，在第三層上的數據叫 Packet，第四層的數據叫 Segment。</p>
<p>　　首先，我們需要知道，我們程序的數據首先會打到 TCP 的 Segment 中，然後 TCP 的 Segment 會打到 IP 的 Packet 中，然後再打到以太網 Ethernet 的 Frame 中，傳到對端後，各個層解析自己的協議，然後把數據交給更高層的協議處理。</p>
<h2 id="TCP頭格式">TCP頭格式</h2><p>　　接下來，我們來看一下 TCP 頭的格式</p>
<p><img src="TCP-Header-01.jpg" alt="TCP 頭格式 1"></p>
<center>TCP 頭格式 1（<a href="http://nmap.org/book/tcpip-ref.html" target="_blank" rel="external">圖片來源</a>）</center>

<p>　　你需要注意這麼幾點：</p>
<ul>
<li>TCP 的包是沒有 IP 地址的，那是 IP 層上的事。但是有源端口和目標端口。</li>
<li>一個 TCP 連接需要四個元組來表示是同一個連接（<code>src_ip</code>, <code>src_port</code>, <code>dst_ip</code>, <code>dst_port</code>）準確說是五元組，還有一個是協議。但因爲這裏只是說TCP協議，所以，這裏我只說四元組。</li>
<li>注意上圖中的四個非常重要的東西：<ul>
<li><strong><em>Sequence Number</em></strong> 是包的序號，用來<strong>解決網絡包亂序（reordering）問題</strong>。</li>
<li><strong><em>Acknowledgement Number</em></strong> 就是 ACK —— 用於確認收到，<strong>用來解決不丟包的問題</strong>。</li>
<li><strong><em>Window</em></strong> 又叫 <strong><em>Advertised-Window</em></strong>，也就是著名的滑動窗口（Sliding Window），<strong>用於解決流控的</strong>。</li>
<li><strong><em>TCP Flag</em></strong> ，也就是包的類型，主要是<strong>用於操控 TCP 的狀態機的</strong>。</li>
</ul>
</li>
</ul>
<p>　　關於其它的東西，可以參看下面的圖示</p>
<p><img src="TCP-Header-02.jpg" alt="TCP 頭格式 2"></p>
<center>TCP 頭格式 2（<a href="http://nmap.org/book/tcpip-ref.html" target="_blank" rel="external">圖片來源</a>）</center>

<h2 id="TCP的狀態機">TCP的狀態機</h2><p>　　其實，<strong>網絡上的傳輸是沒有連接的，包括 TCP 也是一樣的</strong>。而 TCP 所謂的“連接”，其實只不過是在通訊的雙方維護一個“連接狀態”，讓它看上去好像有連接一樣。所以，TCP 的狀態變換是非常重要的。</p>
<p>　　下面是：“<strong>TCP 協議的狀態機</strong>”（<a href="http://www.tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm" target="_blank" rel="external">圖片來源</a>） 和 “<strong>TCP 建鏈接</strong>”、“<strong>TCP 斷鏈接</strong>”、“<strong>傳數據</strong>” 的對照圖，我把兩個圖並排放在一起，這樣方便在你對照着看。另外，下面這兩個圖非常非常的重要，你一定要記牢。（吐個槽：看到這樣複雜的狀態機，就知道這個協議有多複雜，複雜的東西總是有很多坑爹的事情，所以 TCP 協議其實也挺坑爹的）</p>
<p><img src="tcpfsm.png" alt="TCP 協議的狀態機"> <img src="tcp_open_close.jpg" alt="握手次數"></p>
<p>　　很多人會問，爲什麼建鏈接要 3 次握手，斷鏈接需要 4 次揮手？</p>
<ul>
<li><strong>對於建鏈接的 3 次握手</strong>，主要是要初始化 Sequence Number 的初始值。通信的雙方要互相通知對方自己的初始化的 Sequence Number（縮寫爲 ISN：Inital Sequence Number） —— 所以叫 SYN，全稱 Synchronize Sequence Numbers。也就上圖中的 x 和 y。這個號要作爲以後的數據通信的序號，以保證應用層接收到的數據不會因爲網絡上的傳輸的問題而亂序（TCP 會用這個序號來拼接數據）。</li>
<li><strong>對於 4 次揮手</strong>，其實你仔細看是 2 次，因爲 TCP 是全雙工的，所以，發送方和接收方都需要 Fin 和 Ack。只不過，有一方是被動的，所以看上去就成了所謂的 4 次揮手。如果兩邊同時斷連接，那就會就進入到 CLOSING 狀態，然後到達T IME_WAIT 狀態。下圖是雙方同時斷連接的示意圖（你同樣可以對照着 TCP 狀態機看）：</li>
</ul>
<p><img src="tcpclosesimul.png" alt="兩端同時斷開鏈接"></p>
<center>兩端同時斷開鏈接（<a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-4.htm" target="_blank" rel="external">圖片來源</a>）</center>

<p>　　另外，有幾個事情需要注意一下：</p>
<ul>
<li><strong>關於建連接時 SYN 超時</strong>。試想一下，如果 server 端接到了 client 發的 SYN 後回了 SYN-ACK 後 client 掉線了，server 端沒有收到 client 回來的 ACK，那麼，這個連接處於一箇中間狀態，即沒成功，也沒失敗。於是，server 端如果在一定時間內沒有收到的 TCP 會重發 SYN-ACK。在 Linux 下，默認重試次數爲 5 次，重試的間隔時間從 1s 開始每次都翻售，5 次的重試時間間隔爲 1s, 2s, 4s, 8s, 16s，總共 31s，第 5 次發出後還要等 32s 都知道第 5 次也超時了，所以，總共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 - 1 = 63s，TCP 纔會把斷開這個連接。</li>
<li><strong>關於 SYN Flood 攻擊</strong>。一些惡意的人就爲此製造了 SYN Flood 攻擊 —— 給服務器發了一個 SYN 後，就下線了，於是服務器需要默認等 63s 纔會斷開連接，這樣，攻擊者就可以把服務器的 syn 連接的隊列耗盡，讓正常的連接請求不能處理。於是，Linux 下給了一個叫 <code>tcp_syncookies</code> 的參數來應對這個事 —— 當 SYN 隊列滿了後，TCP 會通過源地址端口、目標地址端口和時間戳打造出一個特別的 Sequence Number 發回去（又叫 cookie），如果是攻擊者則不會有響應，如果是正常連接，則會把這個 SYN Cookie 發回來，然後服務端可以通過 cookie 建連接（即使你不在 SYN 隊列中）。請注意，請先千萬別用 <code>tcp_syncookies</code> 來處理正常的大負載的連接的情況。因爲，<code>synccookies</code> 是妥協版的 TCP 協議，並不嚴謹。對於正常的請求，你應該調整三個 TCP 參數可供你選擇，第一個是：<code>tcp_synack_retries</code> 可以用他來減少重試次數；第二個是：<code>tcp_max_syn_backlog</code>，可以增大 SYN 連接數；第三個是：<code>tcp_abort_on_overflow</code> 處理不過來乾脆就直接拒絕連接了。</li>
<li><strong>關於 ISN 的初始化</strong>。ISN 是不能 hard code 的，不然會出問題的 —— 比如：如果連接建好後始終用 1 來做 ISN，如果 client 發了 30 個 segment 過去，但是網絡斷了，於是 client 重連，又用了 1 做 ISN，但是之前連接的那些包到了，於是就被當成了新連接的包，此時，client 的 Sequence Number 可能是 3，而 Server 端認爲 client 端的這個號是 30 了。全亂了。RFC793 中說，ISN 會和一個假的時鐘綁在一起，這個時鐘會在每4微秒對 ISN 做加一操作，直到超過 2^32，又從 0 開始。這樣，一個ISN的週期大約是 4.55 個小時。因爲，我們假設我們的 TCP Segment 在網絡上的存活時間不會超過 Maximum Segment Lifetime（縮寫爲 MSL - Wikipedia 語條），所以，只要 MSL 的值小於 4.55 小時，那麼，我們就不會重用到 ISN。</li>
<li><strong>關於 MSL 和 TIME_WAIT</strong>。通過上面的 ISN 的描述，相信你也知道 MSL 是怎麼來的了。我們注意到，在 TCP 的狀態圖中，從 TIME_WAIT 狀態到 CLOSED 狀態，有一個超時設置，這個超時設置是 2 * MSL（RFC793 定義了 MSL 爲 2 分鐘，Linux 設置成了 30s）爲什麼要這有 TIME_WAIT？爲什麼不直接給轉成 CLOSED 狀態呢？主要有兩個原因：<ol>
<li>TIME_WAIT 確保有足夠的時間讓對端收到了 ACK，如果被動關閉的那方沒有收到 Ack，就會觸發被動端重發 Fin，一來一去正好 2 個MSL；</li>
<li>有足夠的時間讓這個連接不會跟後面的連接混在一起（你要知道，有些自做主張的路由器會緩存IP數據包，如果連接被重用了，那麼這些延遲收到的包就有可能會跟新連接混在一起）。你可以看看這篇文章《<a href="http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html" target="_blank" rel="external">TIME_WAIT and its design implications for protocols and scalable client server systems</a>》</li>
</ol>
</li>
<li><strong>關於 TIME_WAIT 數量太多</strong>。從上面的描述我們可以知道，TIME_WAIT 是個很重要的狀態，但是如果在大並發的短鏈接下，TIME_WAIT 就會太多，這也會消耗很多系統資源。只要搜一下，你就會發現，十有八九的處理方式都是教你設置兩個參數，一個叫 <code>tcp_tw_reuse</code>，另一個叫 <code>tcp_tw_recycle</code> 的參數，這兩個參數默認值都是被關閉的，後者 recyle 比前者 resue 更爲激進，resue 要溫柔一些。另外，如果使用 <code>tcp_tw_reuse</code>，必需設置 <code>tcp_timestamps = 1</code>，否則無效。這裏，你一定要注意，<strong>打開這兩個參數會有比較大的坑 —— 可能會讓 TCP 連接出一些詭異的問題</strong>（因爲如上述一樣，如果不等待超時重用連接的話，新的連接可能會建不上。正如<a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt" target="_blank" rel="external">官方文檔</a>上說的一樣“<strong><em>It should not be changed without advice/request of technical experts</em></strong>”）。<ol>
<li><strong>關於 <code>tcp_tw_reuse</code></strong>。官方文檔上說 <code>tcp_tw_reuse</code> 加上 <code>tcp_timestamps</code>（又叫 PAWS, for Protection Against Wrapped Sequence Numbers）可以保證協議的角度上的安全，但是你需要 <code>tcp_timestamps</code> 在兩邊都被打開（你可以讀一下 <code>tcp_twsk_unique</code> 的源碼 ）。我個人估計還是有一些場景會有問題。</li>
<li><strong>關於 <code>tcp_tw_recycle</code></strong>。如果是 <code>tcp_tw_recycle</code> 被打開了話，會假設對端開啓了 <code>tcp_timestamps</code>，然後會去比較時間戳，如果時間戳變大了，就可以重用。但是，如果對端是一個 NAT 網絡的話（如：一個公司只用一個 IP 出公網）或是對端的 IP 被另一臺重用了，這個事就複雜了。建鏈接的 SYN 可能就被直接丟掉了（你可能會看到 connection time out 的錯誤）（如果你想觀摩一下 Linux 的內核代碼，請參看源碼 <code>tcp_timewait_state_process</code>）。</li>
<li><strong>關於 <code>tcp_max_tw_buckets</code></strong>。這個是控制並發的 TIME_WAIT 的數量，默認值是 180000，如果超限，那麼，系統會把多的給 destory 掉，然後在日誌裏打一個警告（如：time wait bucket table overflow），官網文檔說這個參數是用來對抗 DDoS 攻擊的。也說的默認值 180000 並不小。這個還是需要根據實際情況考慮。</li>
</ol>
</li>
</ul>
<blockquote>
<p>Again，使用 <code>tcp_tw_reuse</code> 和 <code>tcp_tw_recycle</code> 來解決 TIME_WAIT 的問題是非常非常危險的，因爲這兩個參數違反了TCP協議（<a href="http://tools.ietf.org/html/rfc1122" target="_blank" rel="external">RFC 1122</a>） 。</p>
</blockquote>
<h2 id="數據傳輸中的_Sequence_Number">數據傳輸中的 Sequence Number</h2><p>　　下圖是我從 Wireshark 中截了個我在訪問 coolshell.cn 時的有數據傳輸的圖給你看一下，SeqNum 是怎麼變的。（使用 Wireshark 菜單中的 <code>Statistics -&gt; Flow Graph…</code>）</p>
<p><img src="tcp_data_seq_num.jpg" alt="數據傳輸圖"></p>
<p>　　你可以看到，SeqNum 的增加是和傳輸的字節數相關的。上圖中，三次握手後，來了兩個 Len:1440 的包，而第二個包的 SeqNum 就成了 1441。然後第一個 ACK 回的是 1441，表示第一個 1440 收到了。</p>
<blockquote>
<p><strong>注意</strong>：如果你用 Wireshark 抓包程序看 3 次握手，你會發現 SeqNum 總是爲0，不是這樣的，Wireshark 爲了顯示更友好，使用了 Relative SeqNum —— 相對序號，你只要在右鍵菜單中的 protocol preference 中取消掉就可以看到“Absolute SeqNum”了。</p>
</blockquote>
<h2 id="TCP重傳機制">TCP重傳機制</h2><p>　　TCP 要保證所有的數據包都可以到達，所以，必需要有重傳機制。</p>
<p>　　注意，接收端給發送端的 Ack 確認只會確認最後一個連續的包，比如，發送端發了 1,2,3,4,5 一共五份數據，接收端收到了 1，2，於是回 ack 3，然後收到了 4（注意此時 3 沒收到），此時的 TCP 會怎麼辦？我們要知道，因爲正如前面所說的，SeqNum 和 Ack 是以字節數爲單位，所以 ack 的時候，不能跳着確認，只能確認最大的連續收到的包，不然，發送端就以爲之前的都收到了。</p>
<h3 id="超時重傳機制">超時重傳機制</h3><p>　　一種是不回 ack，死等 3，當發送方發現收不到 3 的 ack 超時後，會重傳 3。一旦接收方收到 3 後，會 ack 回 4 —— 意味着 3 和 4 都收到了。</p>
<p>　　但是，這種方式會有比較嚴重的問題，那就是因爲要死等 3，所以會導致 4 和 5 即便已經收到了，而發送方也完全不知道發生了什麼事，因爲沒有收到 Ack，所以，發送方可能會悲觀地認爲也丟了，所以有可能也會導致 4 和 5 的重傳。</p>
<p>　　對此有兩種選擇：</p>
<ul>
<li>一種是僅重傳 timeout 的包。也就是第 3 份數據。</li>
<li>另一種是重傳 timeout 後所有的數據，也就是第 3，4，5 這三份數據。</li>
</ul>
<p>　　這兩種方式有好也有不好。第一種會節省帶寬，但是慢，第二種會快一點，但是會浪費帶寬，也可能會有無用功。但總體來說都不好。因爲都在等 timeout，timeout 可能會很長（在下篇會說 TCP 是怎麼動態地計算出 timeout 的）</p>
<h3 id="快速重傳機制">快速重傳機制</h3><p>　　於是，TCP 引入了一種叫 <strong><em>Fast Retransmit</em></strong> 的算法，不以時間驅動，而以數據驅動重傳。也就是說，如果，包沒有連續到達，就 ack 最後那個可能被丟了的包，如果發送方連續收到 3 次相同的 ack，就重傳。<strong><em>Fast Retransmit</em></strong> 的好處是不用等 timeout 了再重傳。</p>
<p>　　比如：如果發送方發出了 1，2，3，4，5 份數據，第一份先到送了，於是就 ack 回 2，結果 2 因爲某些原因沒收到，3 到達了，於是還是 ack 回 2，後面的 4 和 5 都到了，但是還是 ack 回 2，因爲 2 還是沒有收到，於是發送端收到了三個 ack = 2 的確認，知道了 2 還沒有到，於是就馬上重轉 2。然後，接收端收到了 2，此時因爲 3，4，5 都收到了，於是 ack 回 6。示意圖如下：</p>
<p><img src="FASTIncast021.png" alt="快速重傳"></p>
<p>　　Fast Retransmit 只解決了一個問題，就是 timeout 的問題，它依然面臨一個艱難的選擇，就是重轉之前的一個還是重裝所有的問題。對於上面的示例來說，是重傳 #2 呢還是重傳 #2，#3，#4，#5 呢？因爲發送端並不清楚這連續的 3 個 ack(2) 是誰傳回來的？也許發送端發了 20 份數據，是 #6，#10，#20 傳來的呢。這樣，發送端很有可能要重傳從 2 到 20 的這堆數據（這就是某些 TCP 的實際的實現）。可見，這是一把雙刃劍。</p>
<h3 id="SACK_方法">SACK 方法</h3><p>　　另外一種更好的方式叫：<strong>Selective Acknowledgment (SACK)</strong>（參看 <a href="http://tools.ietf.org/html/rfc2018" target="_blank" rel="external">RFC 2018</a>），這種方式需要在 TCP 頭里加一個 SACK 的東西，ACK 還是 Fast Retransmit 的 ACK，SACK 則是彙報收到的數據碎版。參看下圖：</p>
<p><img src="tcp_sack_example-1024x577.jpg" alt="SACK方法"></p>
<p>　　這樣，在發送端就可以根據回傳的 SACK 來知道哪些數據到了，哪些沒有到。於是就優化了 Fast Retransmit 的算法。當然，這個協議需要兩邊都支持。在 Linux 下，可以通過 <code>tcp_sack</code> 參數打開這個功能（Linux 2.4 後默認打開）。</p>
<p>　　這裏還需要注意一個問題 —— 接收方 Reneging，所謂 Reneging 的意思就是接收方有權把已經報給發送端 SACK 裏的數據給丟了。這樣幹是不被鼓勵的，因爲這個事會把問題複雜化了，但是，接收方這麼做可能會有些極端情況，比如要把內存給別的更重要的東西。所以，發送方也不能完全依賴 SACK，還是要依賴 ACK，並維護 Time-Out，如果後續的 ACK 沒有增長，那麼還是要把 SACK 的東西重傳，另外，接收端這邊永遠不能把 SACK 的包標記爲 Ack。</p>
<blockquote>
<p><strong>注意</strong>：SACK 會消費發送方的資源，試想，如果一個攻擊者給數據發送方發一堆 SACK 的選項，這會導致發送方開始要重傳甚至遍歷已經發出的數據，這會消耗很多發送端的資源。詳細的東西請參看《<a href="http://www.ibm.com/developerworks/cn/linux/l-tcp-sack/" target="_blank" rel="external">TCP SACK的性能權衡</a>》</p>
</blockquote>
<h3 id="Duplicate_SACK_–_重複收到數據的問題">Duplicate SACK – 重複收到數據的問題</h3><p>　　Duplicate SACK 又稱 D-SACK，其主要使用了 SACK 來告訴發送方有哪些數據被重複接收了。<a href="http://www.ietf.org/rfc/rfc2883.txt" target="_blank" rel="external">RFC-2833</a> 裏有詳細描述和示例。下面舉幾個例子（來源於 <a href="http://www.ietf.org/rfc/rfc2883.txt" target="_blank" rel="external">RFC-2833</a>）</p>
<p>　　D-SACK使用了SACK的第一個段來做標誌，</p>
<ul>
<li>如果 SACK 的第一個段的範圍被 ACK 所覆蓋，那麼就是 D-SACK</li>
<li>如果 SACK 的第一個段的範圍被 SACK 的第二個段覆蓋，那麼就是 D-SACK</li>
</ul>
<h4 id="示例一：ACK_丟包">示例一：ACK 丟包</h4><p>　　下面的示例中，丟了兩個 ACK，所以，發送端重傳了第一個數據包（3000 - 3499），於是接收端發現重複收到，於是回了一個 SACK = 3000 - 3500，因爲 ACK 都到了 4000 意味着收到了 4000 之前的所有數據，所以這個 SACK 就是 D-SACK —— 旨在告訴發送端我收到了重複的數據，而且我們的發送端還知道，數據包沒有丟，丟的是 ACK 包。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transmitted  Received    ACK Sent</span><br><span class="line">Segment      Segment     (Including SACK Blocks)</span><br><span class="line"></span><br><span class="line"><span class="number">3000-3499</span>    <span class="number">3000-3499</span>   3500 (ACK dropped)</span><br><span class="line"><span class="number">3500-3999</span>    <span class="number">3500-3999</span>   4000 (ACK dropped)</span><br><span class="line"><span class="number">3000-3499</span>    <span class="number">3000-3499</span>   4000, SACK=<span class="number">3000-3500</span></span><br><span class="line">                                    ---------</span><br></pre></td></tr></table></figure>
<h4 id="示例二：網絡延誤">示例二：網絡延誤</h4><p>　　下面的示例中，網絡包（1000 - 1499）被網絡給延誤了，導致發送方沒有收到 ACK，而後面到達的三個包觸發了“Fast Retransmit 算法”，所以重傳，但重傳時，被延誤的包又到了，所以，回了一個 SACK = 1000 - 1500，因爲 ACK 已到了 3000，所以，這個 SACK 是 D-SACK —— 標識收到了重複的包。</p>
<p>　　這個案例下，發送端知道之前因爲“Fast Retransmit 算法”觸發的重傳不是因爲發出去的包丟了，也不是因爲迴應的 ACK 包丟了，而是因爲網絡延時了。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Transmitted    Received    ACK Sent</span><br><span class="line">Segment        Segment     (Including SACK Blocks)</span><br><span class="line"> </span><br><span class="line"><span class="number">500-999</span>        <span class="number">500-999</span>     1000</span><br><span class="line"><span class="number">1000-1499</span>      (delayed)</span><br><span class="line"><span class="number">1500-1999</span>      <span class="number">1500-1999</span>   1000, SACK=<span class="number">1500-2000</span></span><br><span class="line"><span class="number">2000-2499</span>      <span class="number">2000-2499</span>   1000, SACK=<span class="number">1500-2500</span></span><br><span class="line"><span class="number">2500-2999</span>      <span class="number">2500-2999</span>   1000, SACK=<span class="number">1500-3000</span></span><br><span class="line"><span class="number">1000-1499</span>      <span class="number">1000-1499</span>   3000</span><br><span class="line">               <span class="number">1000-1499</span>   3000, SACK=<span class="number">1000-1500</span></span><br><span class="line">                                      ---------</span><br></pre></td></tr></table></figure>
<p>　　可見，引入了 D-SACK，有這麼幾個好處：</p>
<ol>
<li>可以讓發送方知道，是發出去的包丟了，還是回來的 ACK 包丟了。</li>
<li>是不是自己的 timeout 太小了，導致重傳。</li>
<li>網絡上出現了先發的包後到的情況（又稱 reordering）</li>
<li>網絡上是不是把我的數據包給複製了。</li>
</ol>
<p>　　<strong>知道這些東西可以很好得幫助TCP瞭解網絡情況，從而可以更好的做網絡上的流控。</strong></p>
<p>　　Linux 下的 <code>tcp_dsack</code> 參數用於開啓這個功能（Linux 2.4 後默認打開）</p>
<p>　　好了，上篇就到這裏結束了。如果你覺得我寫得還比較淺顯易懂，那麼，歡迎移步看下篇《<a href="http://coolshell.cn/articles/11609.html" target="_blank" rel="external">TCP的那些事（下）</a>》</p>
<p>　　[原文鏈接：<a href="http://coolshell.cn/articles/11564.html" target="_blank" rel="external">http://coolshell.cn/articles/11564.html</a>]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　TCP是一個巨複雜的協議，因爲他要解決很多問題，而這些問題又帶出了很多子問題和陰暗面。所以學習 TCP 本身是個比較痛苦的過程，但對於學習的過程卻能讓人有很多收穫。關於 TCP 這個協議的細節，我還是推薦你去看 <a href="http://www.kohala.co]]>
    </summary>
    
      <category term="TCP" scheme="http://xcoder.in/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一個任務隊列的 module]]></title>
    <link href="http://xcoder.in/2014/06/03/scartlet-task/"/>
    <id>http://xcoder.in/2014/06/03/scartlet-task/</id>
    <published>2014-06-02T16:17:38.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　事情很曲折，我某天在萌否收音機裏面聽到了一首歌，很好聽，叫 <code>hypnotized</code>，於是紅心了。</p>
<p>　　過了幾天我再去聽——發現這首歌變了。</p>
<p>　　最後經過多方面求證，我大概得出結果就是應該有人傳錯了歌，然後後來有人重新傳了一遍，導致我聽的不是原來那首歌了。那我那天聽的那首歌到底叫什麼名字呢？</p>
<p>　　然後大致看了一下，雖然歌被重新傳了，但是<a href="http://moe.fm/music/9600" target="_blank" rel="external">這裏</a>顯示的這首歌的時間沒變！還是11分鐘，目測是數據庫沒更新。</p>
<p>　　於是我就想了個笨辦法，去爬收音機裏面所有 tag 爲 <code>東方project</code> 的專輯，然後跑到專輯頁看歌曲的長度。</p>
<p>　　問題來了，如果我直接爬，然後爬完 <code>callback</code> 之後又直接爬，沒有任何間隔，就相當於我在 <code>DDOS</code> 它的站子。或者即使沒那麼嚴重——反正最後到一定程度併發太大我就訪問不了了。</p>
<p>　　於是我就想到了做一個任務隊列的 module。該 module 的作用就是把一堆任務扔到隊列中，完成一個纔開始下一個。</p>
<p>　　然後如果同時執行一個也太慢，module 還允許你開多幾個子隊列同時執行。</p>
<p>　　模塊的 repo 在 <a href="https://github.com/XadillaX/scarlet-task" target="_blank" rel="external">GitHub</a> 上面。名字叫 <code>Scarlet Task</code> 的原因一是我本身就喜歡二小姐，二是爲了紀念這次事件我是爲了找有關二小姐的歌。</p>
<p>　　要安裝也很簡單：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install scarlet-task</span><br></pre></td></tr></table></figure>
<p>　　然後 repo 的 <code>README.md</code> 裏面有使用方法的——大致就是實例化一個對象，然後定義好某個任務的任務標識（可以是字符串，可以是 json 對象，可以是任何類型的數據），然後再定義好處理這個任務的函數，將這個數據推倒隊列中即可。然後在處理函數中任務處理完的時候執行以下任務完成的函數即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　事情很曲折，我某天在萌否收音機裏面聽到了一首歌，很好聽，叫 <code>hypnotized</code>，於是紅心了。</p>
<p>　　過了幾天我再去聽——發現這首歌變了。</p>
<p>　　最後經過多方面求證，我大概得出結果就是應該有人傳錯了歌，然後後來有人重新傳]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="任務隊列" scheme="http://xcoder.in/tags/%E4%BB%BB%E5%8B%99%E9%9A%8A%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建 VIM 下的 Hexo 編輯環境]]></title>
    <link href="http://xcoder.in/2014/06/02/vim-hexo-environment/"/>
    <id>http://xcoder.in/2014/06/02/vim-hexo-environment/</id>
    <published>2014-06-01T20:52:30.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>　　本文只講兩個函數，對於 <code>markdown</code> 如何高亮之類的問題還請自行谷歌。</p>
<p>　　然後請打開你自己的 <code>.vimrc</code> 文件。</p>
<h2 id="預備工作">預備工作</h2><p>　　首先定義一個變量——你自己的 <code>hexo</code> 目錄，如果要跨平臺可以做個判斷之類的，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if has(&#34;win32&#34;)&#10;    let g:hexoProjectPath=&#34;E:\\cygwin\\home\\XadillaX\\hexo&#34;&#10;else&#10;    let g:hexoProjectPath=&#34;~/hexo/&#34;&#10;endif</span><br></pre></td></tr></table></figure>
<h2 id="幾個函數">幾個函數</h2><h3 id="進入_Hexo_目錄">進入 Hexo 目錄</h3><p>　　這個函數大致就是讓你進入你自己的 <code>Hexo</code> 路徑：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun! OpenHexoProjPath()&#10;    execute &#34;cd &#34; . g:hexoProjectPath&#10;endfun</span><br></pre></td></tr></table></figure>
<h3 id="打開一篇_Post">打開一篇 Post</h3><p>　　接下去就是一個打開 <code>Post</code> 的函數了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function! OpenHexoPost(...)&#10;    call OpenHexoProjPath()&#10;&#10;    let filename = &#34;source/_posts/&#34; . a:1 . &#34;.md&#34;&#10;    execute &#34;e &#34; . filename&#10;endfunction</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解析：上面的代碼大意就是進入 Hexo 路徑，然後設定好文件名，最後執行 <code>:e filename</code> 即可打開文件了。</p>
</blockquote>
<h3 id="新建一篇_Post">新建一篇 Post</h3><p>　　新建的流程跟打開相似，只不過首先要在 <code>Hexo</code> 目錄下執行一遍 <code>hexo new FOO</code> 的命令而已，命令執行完畢之後再打開即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function! NewHexoPost(...)&#10;    call OpenHexoProjPath()&#10;&#10;    let filename = a:1&#10;    execute &#34;!hexo new &#34; . filename&#10;&#10;    call OpenHexoPost(a:1)&#10;endfunction</span><br></pre></td></tr></table></figure>
<h2 id="指令映射">指令映射</h2><p>　　函數寫好後我們最後把函數映射成類似於 <code>:e</code>, <code>:w</code> 之類的後面能跟着參數的指令即可。</p>
<p>　　以前木有接觸過的同學可以參考一下<a href="http://vimdoc.sourceforge.net/htmldoc/usr_40.html#40.2" target="_blank" rel="external">這裏</a>的文檔。</p>
<h3 id="打開指令">打開指令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command -nargs=+ HexoOpen :call OpenHexoPost(&#34;&#60;args&#62;&#34;)</span><br></pre></td></tr></table></figure>
<h3 id="新建指令">新建指令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command -nargs=+ HexoNew :call NewHexoPost(&#34;&#60;args&#62;&#34;)</span><br></pre></td></tr></table></figure>
<h2 id="使用方法">使用方法</h2><p>　　當你做完以上步驟的時候，你就可以無論在什麼目錄下在 VIM 裏面通過下面的指令進行新建一篇日誌了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:HexoNew artical-name</span><br></pre></td></tr></table></figure>
<p>　　以及下面的指令來打開一篇已存在的日誌：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:HexoOpen artical-name</span><br></pre></td></tr></table></figure>
<h2 id="遺留問題">遺留問題</h2><p>　　相信看到這裏之後，大家也能自己寫出一個生成的指令了，這裏就不累述了，無非就是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!hexo generate</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　本文只講兩個函數，對於 <code>markdown</code> 如何高亮之類的問題還請自行谷歌。</p>
<p>　　然後請打開你自己的 <code>.vimrc</code> 文件。</p>
<h2 id="預備工作">預備工作</h2><p>　　首先定義一個變量—]]>
    </summary>
    
      <category term="hexo" scheme="http://xcoder.in/tags/hexo/"/>
    
      <category term="vim" scheme="http://xcoder.in/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「NBUT 2014 校賽·網絡同步賽」題解 (未完成...)]]></title>
    <link href="http://xcoder.in/2014/05/05/nbut-2014-acm-contest-solution/"/>
    <id>http://xcoder.in/2014/05/05/nbut-2014-acm-contest-solution/</id>
    <published>2014-05-05T07:08:39.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　這次比賽由 <a href="http://blog.163.com/surgy_han/" target="_blank" rel="external">Hungar</a>，<a href="http://www.cnblogs.com/Wine93/" target="_blank" rel="external">8Mao</a> 以及我負責的。明明都讀研了，還詐屍回來出題——歸結起來大概是因爲各種面試不順吧，想來虐虐學弟妹們怒刷存在感。結果網絡賽還是被虐得死去活來。（果然我是蒟蒻 (◓Д◒)✄╰⋃╯</p>
<p>　　好了廢話不多說，還是直接上題解吧。</p>
<h2 id="Minecraft_Server_Bug">Minecraft Server Bug</h2><p>　　題意大概就是說一排巖漿和水，你要拿一桶水和巖漿，並且水的下標小於巖漿。</p>
<p>　　爲了更便於理解，我們從後往前做。首先將序列讀進來之後從後往前遍歷——若是巖漿，那麼巖漿數加一，如果是水，那麼這桶水能選擇後面巖漿的任意一桶，也就是說答案加上當前的巖漿數即可。</p>
<blockquote>
<p>注意用 <code>__int64</code>。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">1000005</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c%c"</span>, ch + i, &amp;tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        __int64 ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[i] == <span class="string">'L'</span>) cnt++;</span><br><span class="line">            <span class="keyword">else</span> ans += (__int64)cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Beautiful_Walls">Beautiful Walls</h2><p>　　一堵牆，每單位高度不定。你需要選擇其中任意連續的牆，使得你選擇的牆每單位的高度都是唯一的——問有多少種選法。</p>
<p>　　先求出總的種數，然後求不滿足的數量，最後用總數減去不滿足數即爲答案。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lint long long</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> N <span class="number">100005</span></span></span><br><span class="line"><span class="keyword">int</span> p[N], A[N];</span><br><span class="line"><span class="function">lint <span class="title">solution</span><span class="params">(lint n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, -<span class="number">1</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    lint ans = n * (n + <span class="number">1</span>) / <span class="number">2</span>, Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(lint i=<span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(~p[A[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Max &lt; p[A[i]]) Max = p[A[i]];</span><br><span class="line">            p[A[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[A[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans -= Max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solution(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　這次比賽由 <a href="http://blog.163.com/surgy_han/" target="_blank" rel="external">Hungar</a>，<a href="http://www.cnblogs.com/Wine93/" targe]]>
    </summary>
    
      <category term="ACM" scheme="http://xcoder.in/tags/ACM/"/>
    
      <category term="算法" scheme="http://xcoder.in/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://xcoder.in/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[死月出品：Hero Snake 英雄蛇]]></title>
    <link href="http://xcoder.in/2014/04/11/hero-snake/"/>
    <id>http://xcoder.in/2014/04/11/hero-snake/</id>
    <published>2014-04-11T05:53:35.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>注：備份到這篇日誌的時候，感覺眼睛進了什麼奇怪的東西。（才……纔不是眼淚呢，那一定是沙子！(;´༎ຶД༎ຶ`)</p>
<p>主要引起感傷的還是這首軒轅劍的 BGM 吧。因爲 Hero Snake 的BGM就是這個。</p>
<p>這篇文章原文是在 2011年5月1日 發的。遊戲是跟 <strong>MatRush</strong> 在2011年寒假一起寫的，雖然是我邊教邊寫的。呵呵，轉眼間三年過去了。</p>
<p>想當年我還是那麼執着於遊戲行業，現在糾結於到底要從事遊戲行業還是互聯網呢？半年真的能改變很多，要是我當時沒有去汽族網實習，也許現在並不會有那麼大的改變吧。</p>
<p>自從被 <a href="http://weibo.com/shyvo" target="_blank" rel="external">@樸大</a> 刷了之後，我又開始着重考慮了。是不是我玩互聯網只是覺得新鮮好玩而已呢？畢竟我是半路出家的，雖然有着十來年的 <code>Web經歷</code>，但那都是小打小鬧哇。還記得小學的時候買的第一本電腦書——<a href="http://www.amazon.cn/%E5%9C%A8%E7%BD%91%E4%B8%8A%E5%AE%89%E4%B8%AA%E5%AE%B6-%E6%9C%B1%E6%83%A0%E5%BC%BA/dp/B0011A9QSA/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1397196202&amp;sr=1-1&amp;keywords=%E5%9C%A8%E7%BD%91%E4%B8%8A%E5%AE%89%E4%B8%AA%E5%AE%B6" target="_blank" rel="external">《在網上安個家》</a>，到現在還記得那個時候捧着書的激動心情。</p>
<p>我是不是有點偏離了自己本身的軌道呢？總之還是在這兩塊領域猶豫不決。</p>
<p>廢話有點扯遠了，還是把文章從 Capture 備份回來再說吧。</p>
</blockquote>
<p>　　這是一款正宗基於HGE的小遊戲，算是我做的遊戲中自己比較滿意的小遊戲吧。</p>
<p>　　幕後故事是這樣的：MatRush寒假找我一起做遊戲，因爲他們學校弄了一個蛋疼的遊戲製作比賽。然後命題是貪吃蛇，於是我們加了一點自己的小創意，給他講解了一些HGE的基礎之後，就寫了這個遊戲了。然後因爲我們都比較喜歡軒轅劍，於是BGM就是軒轅劍的《永遠的三個人的快樂時光》，由於MatRush比較喜歡MapleStory，便有了素材是那些像素畫面。</p>
<p>　　首先這個遊戲有兩種模式：單人模式和雙人模式。</p>
<p>　　關於單人模式，這是一個闖關型模式，大家在每一關必須通過吃道具獲得一定的分數以及吃圈圈獲得一定圈圈數才能開啓通往下一關的門，默認一共20關，可以自己編輯關卡，這是後話。下面是幾種道具的解說：</p>
<blockquote>
<p><img src="treasure0.png" alt="開山斧"></p>
<p>開山斧：撿到這貨隨機獲得1~3個斧頭並且附贈100分數。斧頭的作用是能破開木桶，安全通過，一個斧頭用一次。斧頭數在左下角的Axe(s)後面。</p>
<p><img src="treasure1.png" alt="命運之剪"></p>
<p>命運之剪：撿到這個之後獲得100分並且給你斷掉一個尾巴以降低難度。</p>
<p><img src="treasure2.png" alt="降速器"></p>
<p>降速器：因爲你每吃一個圈圈會增加一定速度，而這個降速器是降低你的速度讓你容易些。並且附贈100分。</p>
<p><img src="treasure8.png" alt="藥水"></p>
<p>藥水：藥水是裝飾變色用的，其實是送分的。前四種藥水100分，紫色的300分。</p>
<p><img src="treasure3.png" alt="降速器"></p>
<p>骷髏頭：想死的話就碰碰它試試。</p>
<p><img src="door.png" alt="傳送門"></p>
<p>傳送門：遇到這貨就說明你功德圓滿了。恭喜，可以通過它前往下一關。</p>
</blockquote>
<p>　　接下去是雙人模式。雙人模式因爲當初設想有些問題，所以實現起來僅僅是簡單的雙人走啊走，看誰碰到誰誰就輸。在雙人模式中，先要選擇一張對戰地圖，然後開始雙人走啊走啊走。</p>
<p>　　然後Rank是排行榜，Option是遊戲的一些選項，Introduction是遊戲介紹，這個介紹有些蛋疼，最後不用說Exit就是退出了。</p>
<p>　　下面是關於地圖編輯器的說明：</p>
<p>　　首先在遊戲目錄小有一個config.ini文件，是一些遊戲設置。其中levelnum是遊戲關卡數。注意這個數字必須要跟地圖數量一致或者小於它，否則會因爲找不到之後的地圖而出錯。地圖就存在data裏，命名方式是mapX.txt，從0開始。地圖編輯器則在MapEditor文件夾下。操作很簡單，說明都在編輯器下方的文字上，就幾個快捷鍵。可以用鼠標操作也可以用上下左右控制方向。</p>
<p>　　最後，預祝大家玩得愉快。附上下載地址和幾張預覽圖吧：</p>
<p>　　<a href="bin.7z">點擊下載</a></p>
<p>　　<a href="https://github.com/XadillaX/hero-snake" target="_blank" rel="external">代碼地址</a></p>
<p><img src="1.png" alt="標題畫面"><br><img src="2.png" alt="玩的畫面"><br><img src="4.png" alt="雙人模式"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>注：備份到這篇日誌的時候，感覺眼睛進了什麼奇怪的東西。（才……纔不是眼淚呢，那一定是沙子！(;´༎ຶД༎ຶ`)</p>
<p>主要引起感傷的還是這首軒轅劍的 BGM 吧。因爲 Hero Snake 的BGM就是這個。</p>
<p>這篇文章原文是在]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="HGE" scheme="http://xcoder.in/tags/HGE/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="遊戲開發" scheme="http://xcoder.in/tags/%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讓Node.js和C++一起搞基 —— 3 (未完成...)]]></title>
    <link href="http://xcoder.in/2014/04/06/nodejs-cpp-addons-3/"/>
    <id>http://xcoder.in/2014/04/06/nodejs-cpp-addons-3/</id>
    <published>2014-04-06T08:15:39.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="/2014/04/03/nodejs-cpp-addons-2/">上一章</a>我們偷偷學習瞭如何在 <code>C++</code> 中實現 <code>Node.js</code> 調用時傳參數和調用回調函數，並且我自己也心血來潮寫了個<a href="/2014/04/05/cpp-class-inline-keng/#simpleini">小 Demo</a> 供大家參考。</p>
<p>　　今天我們就不複習了，直搗黃龍吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="/2014/04/03/nodejs-cpp-addons-2/">上一章</a>我們偷偷學習瞭如何在 <code>C++</code> 中實現 <code>Node.js</code> 調用時傳參數和調用回調函數，並且我自己也心血來潮寫了個<a hr]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++中類成員函數 inline 的坑]]></title>
    <link href="http://xcoder.in/2014/04/05/cpp-class-inline-keng/"/>
    <id>http://xcoder.in/2014/04/05/cpp-class-inline-keng/</id>
    <published>2014-04-05T08:55:57.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　今天我來講一講 <code>C++</code> 中類成員函數 <code>inline</code> 修飾符的一個坑。</p>
<p>　　這個坑是我在嘗試着寫我的第一個 <code>Node.js</code> 擴展 <code>simpleini</code> 時候遇到的。</p>
<h2 id="坑描述">坑描述</h2><p>　　因爲只是嘗試着寫，所以懶得自己實現，於是網上找了個開源的 <code>C++</code> 閱讀 ini 文件的項目，名不見經傳，叫 <a href="http://miniini.tuxfamily.org/" target="_blank" rel="external">miniini</a>。</p>
<p>　　好了，問題來了，當我寫好我的源文件的時候，然後寫好了我的 <code>binding.gyp</code> ，總之一切大功告成開始編譯的時候—— <code>Windows</code> 下沒問題，<code>MacOS</code> 下也可以正常運行，但是在 <code>Linux</code> 下就出問題了：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node: symbol lookup err: .../simpleIni.node: undefined symbol: _ZNK10INISection10ReadStringEPKcRS1_</span><br></pre></td></tr></table></figure>
<p>　　大致的意思呢就是說找不到 <code>INISection</code> 的 <code>ReadString</code> 函數符號。</p>
<h2 id="問題分析">問題分析</h2><p>　　又是懷着崇敬的心情去 <a href="http://stackoverflow.com/questions/22868307/undefined-symbol-in-node-js-c-addon-under-linux-why" target="_blank" rel="external">SO</a> 求解了。</p>
<p>　　最後的解答大概<a href="http://isocpp.org/wiki/faq/inline-functions#inline-member-fns" target="_blank" rel="external">如下</a>：</p>
<blockquote>
<p>內聯成員函數的聲明看起來像一個非內聯函數的聲明：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Fred &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>但是你的內斂成員函數定義前面又加了 <code>inline</code> 這個關鍵字時，你必須把這個定義放到頭文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line"><span class="keyword">void</span> Fred::f(<span class="keyword">int</span> i, <span class="keyword">char</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這麼做的原因就是爲了避免鏈接器 <code>unresolved external</code> 的發生。如果你不這麼做，這個錯誤就將會在你從另外一個 <code>.cpp</code> 文件中調用它時出現。</p>
</blockquote>
<p>　　好嘛，原來是原作者自己寫的代碼有問題啊。但是不得不說一下又漲姿勢了。C++還真是有千奇百怪的坑和錯誤啊。</p>
<h2 id="解決方案">解決方案</h2><p>　　最後的解決方案大致就是把函數定義放到頭文件中去，或者在函數聲明前面也加上 <code>inline</code> 關鍵字。</p>
<h2 id="simpleini">simpleini</h2><p>　　我的第一個 <code>C++</code> 模塊，叫 <code>simpleini</code> ，其實只是抱着試試看 <code>Node.j</code> 的 <code>C++</code> 模塊是不是這麼寫的而已，並沒有多大實際用處。Repo 在 <a href="https://github.com/XadillaX/node-simple-ini" target="_blank" rel="external">Github</a> 上。</p>
<p>　　然後用法很簡單，先安裝：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install simpleini</span><br></pre></td></tr></table></figure>
<p>　　然後下面的代碼就是例子了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> simpleIni = <span class="built_in">require</span>(<span class="string">"simpleini"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(simpleIni.open(<span class="string">"./node_modules/simpleini/src/miniini-0.9/test/test.ini"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(simpleIni.read(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(simpleIni.read(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(simpleIni.read(<span class="string">"SETTINGS"</span>, <span class="string">"sections"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(simpleIni.read(<span class="string">"vals"</span>, <span class="string">"float"</span>));</span><br></pre></td></tr></table></figure>
<p>　　讀取配置的時候第一個參數是 <code>Section</code>，第二個參數是 <code>Key</code>，第三個參數是取不到該值時的默認值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　今天我來講一講 <code>C++</code> 中類成員函數 <code>inline</code> 修飾符的一個坑。</p>
<p>　　這個坑是我在嘗試着寫我的第一個 <code>Node.js</code> 擴展 <code>simpleini</code> 時候]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="Programming" scheme="http://xcoder.in/tags/Programming/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讓Node.js和C++一起搞基 —— 2]]></title>
    <link href="http://xcoder.in/2014/04/03/nodejs-cpp-addons-2/"/>
    <id>http://xcoder.in/2014/04/03/nodejs-cpp-addons-2/</id>
    <published>2014-04-03T14:37:15.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　好，今天讓我們更深入地搞基吧！</p>
<h2 id="溫故而知新，可以爲溼矣">溫故而知新，可以爲溼矣</h2><p>　　首先請大家記住這個 V8 的在線手冊——<a href="http://izs.me/v8-docs/main.html" target="_blank" rel="external">http://izs.me/v8-docs/main.html</a>。</p>
<p>　　還記得上次的 <code>building.gyp</code> 文件嗎？</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">targets</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">target_name</span>": <span class="value"><span class="string">"addon"</span></span>,</span><br><span class="line">      "<span class="attribute">sources</span>": <span class="value">[ <span class="string">"addon.cc"</span> ]</span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>　　就像這樣，舉一反三，如果多幾個 <code>*.cc</code> 文件的話就是這樣的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"sources": [ "addon.cc", "myexample.cc" ]</span><br></pre></td></tr></table></figure>
<p>　　上次我們把倆步驟分開了，實際上配置和編譯可以放在一起的：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node-gyp configure build</span><br></pre></td></tr></table></figure>
<p>　　複習完了嗎？沒？！</p>
<p><img src="mama.jpg" alt="啪"></p>
<p>　　好的，那我們繼續吧。</p>
<h2 id="表番">表番</h2><h3 id="函數參數">函數參數</h3><p>　　現在我們終於要講參數了呢。</p>
<p>　　讓我們設想有這樣一個函數 <code>add(a, b)</code> 代表把 <code>a</code> 和 <code>b</code> 相加返回結果，所以先把函數外框寫好：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;node.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> v8;</span><br><span class="line"></span><br><span class="line">Handle&lt;Value&gt; Add(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    HandleScope scope;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//... 又來！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Arguments">Arguments</h4><p>　　這個就是函數的參數了。我們不妨先看看 v8 的<a href="http://izs.me/v8-docs/classv8_1_1Arguments.html" target="_blank" rel="external">官方手冊參考</a>。</p>
<ul>
<li><code>int Length() const</code></li>
<li><code>Local&lt;Value&gt; operator[](int i) const</code></li>
</ul>
<p>　　其它的我們咱不關心，這兩個可重要了！一個代表傳入函數的參數個數，另一箇中括號就是通過下標索引來訪問第 <code>n</code> 個參數的。</p>
<p>　　所以如上的需求，我們大致就可以理解爲 <code>args.Length()</code> 爲 <code>2</code>，<code>args[0]</code> 代表 <code>a</code> 以及 <code>args[1]</code> 代表 <code>b</code> 了。並且我們要判斷這兩個數的類型必須得是 <code>Number</code>。</p>
<p>　　注意到沒，中括號的索引操作符返回結果是一個 <code>Local&lt;Value&gt;</code> 也就是 <code>Node.js</code> 的所有類型基類。所以傳進來的參數類型不定的，我們必須得自己判斷是什麼參數。這就關係到了這個 <code>Value</code> 類型的一些<a href="http://izs.me/v8-docs/classv8_1_1Value.html" target="_blank" rel="external">函數</a>了。</p>
<ul>
<li><code>IsArray()</code></li>
<li><code>IsBoolean()</code></li>
<li><code>IsDate()</code></li>
<li><code>IsFunction()</code></li>
<li><code>IsInt32()</code></li>
<li><code>IsNativeError()</code></li>
<li><code>IsNull()</code></li>
<li><code>IsNumber()</code></li>
<li><code>IsRegExp()</code></li>
<li><code>IsString()</code></li>
<li>…</li>
</ul>
<p>　　我就不一一列舉了，剩下的自己看文檔。｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡</p>
<h4 id="ThrowException">ThrowException</h4><p>　　這個是我們等下要用到的一個函數。具體在 <a href="http://izs.me/v8-docs/namespacev8.html#a2469af0ac719d39f77f20cf68dd9200e" target="_blank" rel="external">v8 文檔</a>中可以找到。</p>
<p>　　顧名思義，就是拋出錯誤啦。執行這個語句之後，相當於在 <code>Node.js</code> 本地文件中執行了一條 <code>throw()</code> 語句一樣。比如說：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThrowException(Exception::TypeError(String::New(<span class="string">"Wrong number of arguments"</span>)));</span><br></pre></td></tr></table></figure>
<p>　　就相當於執行了一條 <code>Node.js</code> 的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Wrong number of arguments"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Undefined()">Undefined()</h4><p>　　這個函數呢也在<a href="http://izs.me/v8-docs/namespacev8.html#ad39cfade81e77137fc11ff3a24284340" target="_blank" rel="external">文檔</a>裏面。</p>
<p>　　具體就是一個空值，因爲有些函數並不需要返回什麼具體的值，或者說沒有返回值，這個時候就需要用 <code>Undefined()</code> 來代替了。</p>
<h4 id="動手吧騷年！">動手吧騷年！</h4><p>　　在理解了以上的幾個要點之後，我相信你們很快就能寫出 <code>a + b</code> 的邏輯了，我就把 <code>Node.js</code> 官方手冊的代碼抄過來給你們過一遍就算完事了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;node.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> v8;</span><br><span class="line"></span><br><span class="line">Handle&lt;Value&gt; Add(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    HandleScope scope;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代表了可以傳入 2 個以上的參數，但實際上我們只用前兩個</span></span><br><span class="line">    <span class="keyword">if</span>(args.Length() &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 拋出錯誤</span></span><br><span class="line">        ThrowException(Exception::TypeError(String::New(<span class="string">"Wrong number of arguments"</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回空值</span></span><br><span class="line">        <span class="keyword">return</span> scope.Close(Undefined());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若前兩個參數其中一個不是數字的話</span></span><br><span class="line">    <span class="keyword">if</span>(!args[<span class="number">0</span>]-&gt;IsNumber() || !args[<span class="number">1</span>]-&gt;IsNumber())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 拋出錯誤並返回空值</span></span><br><span class="line">        ThrowException(Exception::TypeError(String::New(<span class="string">"Wrong arguments"</span>)));</span><br><span class="line">        <span class="keyword">return</span> scope.Close(Undefined());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具體參考 v8 文檔</span></span><br><span class="line">    <span class="comment">//     http://izs.me/v8-docs/classv8_1_1Value.html#a6eac2b07dced58f1761bbfd53bf0e366)</span></span><br><span class="line">    <span class="comment">// 的 `NumberValue` 函數</span></span><br><span class="line">    Local&lt;Number&gt; num = Number::New(args[<span class="number">0</span>]-&gt;NumberValue() + args[<span class="number">1</span>]-&gt;NumberValue());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scope.Close(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　函數大功告成！</p>
<p>　　最後把尾部的導出函數給寫好就 OK 了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(Handle&lt;Object&gt; exports)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    exports-&gt;Set(String::NewSymbol(<span class="string">"add"</span>),</span><br><span class="line">        FunctionTemplate::New(Add)-&gt;GetFunction());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NODE_MODULE(addon, Init)</span><br></pre></td></tr></table></figure>
<p>　　等你編譯好之後，我們就能這樣用了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addon = <span class="built_in">require</span>(<span class="string">'./build/Release/addon'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(addon.add(<span class="number">1</span>, <span class="number">1</span>) + <span class="string">"b"</span>);</span><br></pre></td></tr></table></figure>
<p>　　你會看到一個 <code>2b</code> ！✧<em>｡٩(ˊᗜˋ</em>)و✧*｡</p>
<h3 id="回調函數">回調函數</h3><p>　　上一章我們只講了個 <code>Hello world</code>，這一章阿婆主就良心發現一下，再來個回調函數的寫法。</p>
<p>　　慣例我們先寫好框架：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;node.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> v8;</span><br><span class="line"></span><br><span class="line">Handle&lt;Value&gt; RunCallback(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">  HandleScope scope;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 噼裏啪啦噼裏啪啦</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> scope.Close(Undefined());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　然後我們決定它的用法是這樣的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　即它會給回調函數傳入一個參數，我們設想它是一個字符串，然後我們可以 <code>console.log()</code> 出來看。</p>
<h4 id="首先你要有一個字符串系列">首先你要有一個字符串系列</h4><p>　　廢話不多說，先給它一個字符串餵飽了再說吧。<em>(√ ζ ε:)</em></p>
<p>　　不過我們得讓這個字符串是通用類型的，因爲 <code>Node.js</code> 代碼是弱類型的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local&lt;Value&gt;::New(String::New(<span class="string">"hello world"</span>));</span><br></pre></td></tr></table></figure>
<p>　　什麼？你問我什麼是 <code>Local&lt;Value&gt;</code>？</p>
<p>　　那我稍稍講一下吧，參考自<a href="http://cnodejs.org/topic/4f16442ccae1f4aa270010c5" target="_blank" rel="external">這裏</a>和<a href="http://izs.me/v8-docs/classv8_1_1Local.html" target="_blank" rel="external">V8參考文檔</a>。</p>
<p>　　如文檔所示，<code>Local&lt;T&gt;</code> 實際上繼承自 <code>Handle&lt;T&gt;</code>，我記得<a href="/2014/04/02/nodejs-cpp-addons-1/#Handle&lt;Value">上一章</a>已經講過 <code>Handle&lt;T&gt;</code> 這個東西了。</p>
<p>　　然後下面就是講 Local 了。</p>
<blockquote>
<p>Handle 有兩種類型， Local Handle 和 Persistent Handle ，類型分別是 <code>Local&lt;T&gt; : Handle&lt;T&gt;</code> 和 <code>Persistent&lt;T&gt; : Handle&lt;T&gt;</code> ，前者和 <code>Handle&lt;T&gt;</code> 沒有區別生存週期都在 scope 內。而後者的生命週期脫離 scope ，你需要手動調用 <code>Persistent::Dispose</code> 結束其生命週期。也就是說 Local Handle 相當於在 C++`在棧上分配對象而 Persistent Handle 相當於 C++ 在堆上分配對象。</p>
</blockquote>
<h4 id="然後你要有個參數表系列">然後你要有個參數表系列</h4><p>　　終端命令行調用 C/C++ 之後怎麼取命令行參數？</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　對了，這裏的 <code>argc</code> 就是命令行參數個數，<code>argv[]</code> 就是各個參數了。那麼調用 <code>Node.js</code> 的回調函數，<code>v8</code> 也採用了類似的<a href="http://izs.me/v8-docs/classv8_1_1Function.html#ac61877494d2d8bb81fcef96003ec4059" target="_blank" rel="external">方法</a>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">V8EXPORT Local&lt;Value&gt; v8::Function::Call(Handle&lt;Object&gt;recv,</span><br><span class="line">    <span class="keyword">int</span> argc,</span><br><span class="line">    Handle&lt;Value&gt; argv[]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><del>QAQ 卡在了 <code>Handle&lt;Object&gt; recv</code> 了！！！明天繼續寫。</del></p>
</blockquote>
<p>　　好吧，新的一天開始了我感覺我充滿了力量。(∩^o^)⊃━☆ﾟ.*･｡</p>
<p>　　經過我多方面求證（<a href="http://segmentfault.com/q/1010000000456217" target="_blank" rel="external">SegmentFault</a>和<a href="http://stackoverflow.com/questions/22842908/what-does-the-first-argument-of-functioncall-in-v8-engine-mean/22848601?noredirect=1#22848601" target="_blank" rel="external">StackOverflow</a>以及一個扣扣羣），終於解決了上面這個函數仨參數的意思。</p>
<p>　　後面兩個參數就不多說了，一個是參數個數，另一個就是一個參數的數組了。至於第一個參數 <code>Handle&lt;Object&gt; recv</code>，StackOverflow 仁兄的解釋是這樣的：</p>
<blockquote>
<p>It is the same as apply in JS. In JS, you do</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = ...;</span><br><span class="line">cb.apply(context, [ ...args...]);</span><br></pre></td></tr></table></figure>
<p>The object passed as the first argument becomes this within the function scope. More documentation on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN</a>. If you don’t know JS well, you can read more about JS’s this here: <a href="http://unschooled.org/2012/03/understanding-javascript-this/" target="_blank" rel="external">http://unschooled.org/2012/03/understanding-javascript-this/</a></p>
<p style="text-align: right;">—— 摘自 <a href="http://stackoverflow.com/questions/22842908/what-does-the-first-argument-of-functioncall-in-v8-engine-mean/22848601?noredirect=1#22848601" target="_blank" rel="external">StackOverflow</a></p>

</blockquote>
<p>　　總之其作用就是指定了被調用函數的 <code>this</code> 指針。這個 <code>Call</code> 的用法就跟 JavaScript 中的 <code>bind()</code>、<code>call()</code>、<code>apply()</code> 類似。</p>
<p>　　所以我們要做的事情就是先把參數表建好，然後傳入這個 <code>Call</code> 函數供其執行。</p>
<p>　　第一步，顯示轉換函數，因爲本來是 <code>Object</code> 類型：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>　　第二步，建立參數表（數組）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local&lt;Value&gt; argv[argc] = &#123; Local&lt;Value&gt;::New(String::New(<span class="string">"hello world"</span>)) &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="最後調用函數系列">最後調用函數系列</h4><p>　　調用 <code>cb</code> ，把參數傳進去：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cb-&gt;Call(Context::GetCurrent()-&gt;Global(), <span class="number">1</span>, argv);</span><br></pre></td></tr></table></figure>
<p>　　這裏第一個參數 <code>Context::GetCurrent()-&gt;Global()</code> 所代表的意思就是獲取全局上下文作爲函數的 <code>this</code>；第二個參數就是參數表中的個數（畢竟雖然 <code>Node.js</code> 的數組是有長度屬性的，但是 <code>C++</code> 裏面數組的長度實際上系統是不知道的，還得你自己傳進一個數來說明數組長度）；最後一個參數就是剛纔我們建立好的參數表了。</p>
<h4 id="終章之結束文件系列">終章之結束文件系列</h4><p>　　相信這一步大家已經輕車熟路了吧，就是把函數寫好，然後放進導出函數裏面，最後申明一下。</p>
<p>　　我就直接放出代碼吧，或者直接跑去 <code>Node.js</code> 的<a href="http://nodejs.org/api/addons.html#addons_callbacks" target="_blank" rel="external">文檔</a>看也行。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;node.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> v8;</span><br><span class="line"></span><br><span class="line">Handle&lt;Value&gt; RunCallback(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    HandleScope scope;</span><br><span class="line">    Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> argc = <span class="number">1</span>;</span><br><span class="line">    Local&lt;Value&gt; argv[argc] = &#123; Local&lt;Value&gt;::New(String::New(<span class="string">"hello world"</span>)) &#125;;</span><br><span class="line">    cb-&gt;Call(Context::GetCurrent()-&gt;Global(), argc, argv);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scope.Close(Undefined());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    module-&gt;Set(String::NewSymbol(<span class="string">"exports"</span>),</span><br><span class="line">        FunctionTemplate::New(RunCallback)-&gt;GetFunction());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NODE_MODULE(addon, Init)</span><br></pre></td></tr></table></figure>
<p>　　Well done! 最後剩下的步驟就自己去吧。至於 <code>Js</code> 裏面這麼調用這個函數，我在<a href="#回調函數">之前</a>已經提到過了。</p>
<h2 id="番外">番外</h2><p>　　嘛嘛，我感覺我的學習筆記寫得越來越奔放了求破～</p>
<p>　　今天就先寫到這裏吧，寫學習筆記的過程中我又漲姿勢了，比如說那個 <code>Call</code> 函數的參數意義。</p>
<p>　　如果你們覺得本系列學習筆記對你們還有幫助的話，就來和我一起搞基吧麼麼噠～Σ&gt;―(〃°ω°〃)♡→</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　好，今天讓我們更深入地搞基吧！</p>
<h2 id="溫故而知新，可以爲溼矣">溫故而知新，可以爲溼矣</h2><p>　　首先請大家記住這個 V8 的在線手冊——<a href="http://izs.me/v8-docs/main.html" target="_bl]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讓Node.js和C++一起搞基 —— 1]]></title>
    <link href="http://xcoder.in/2014/04/02/nodejs-cpp-addons-1/"/>
    <id>http://xcoder.in/2014/04/02/nodejs-cpp-addons-1/</id>
    <published>2014-04-01T16:53:22.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　N久之前的一個坑——用 <strong>Node.js</strong> 來重構 NBUT 的 <strong>Online Judge</strong>，包括評測端也得重構一遍。（至於什麼時候完成大家就不要關心了，(／‵Д′)／~ ╧╧</p>
<p>　　總之我們現在要做的其實簡而言之就是——用C/C++來實現 <strong>Node.js</strong> 的模塊。</p>
<h2 id="準備工作">準備工作</h2><p>　　工欲善其事，必先<del>耍流氓</del>利其器。</p>
<h3 id="node-gyp">node-gyp</h3><p>　　首先你需要一個 <code>node-gyp</code> 模塊。</p>
<p>　　在任意角落，執行：</p>
<figure class="highlight crmsh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install <span class="keyword">node</span><span class="identifier"></span><span class="title">-gyp</span> -g</span><br></pre></td></tr></table></figure>
<p>　　在進行一系列的 <code>blahblah</code> 之後，你就安裝好了。</p>
<h3 id="Python">Python</h3><p>　　然後你需要有個 <code>python</code> 環境。</p>
<p>　　自己去<a href="http://python.org/" target="_blank" rel="external">官網</a>搞一個來。</p>
<blockquote>
<p><strong>注意：</strong> 根據 <code>node-gyp</code> 的<a href="https://github.com/TooTallNate/node-gyp#installation" target="_blank" rel="external">GitHub</a>顯示，請務必保證你的 <code>python</code> 版本介於 <code>2.5.0</code> 和 <code>3.0.0</code> 之間。</p>
</blockquote>
<h3 id="編譯環境">編譯環境</h3><p>　　嘛嘛，我就偷懶點不細寫了，還請自己移步到 <a href="https://github.com/TooTallNate/node-gyp#installation" target="_blank" rel="external">node-gyp</a> 去看編譯器的需求。並且倒騰好。</p>
<h2 id="入門">入門</h2><p>　　我就拿<a href="http://nodejs.org/api/addons.html#addons_hello_world" target="_blank" rel="external">官網的入門 Hello World</a>說事兒了。</p>
<h3 id="Hello_World">Hello World</h3><p>　　請準備一個 <code>C++</code> 文件，比如就叫 <del>sb.cc</del> hello.cc。</p>
<p>　　然後我們一步步來，先往裏面搞出頭文件和定義好命名空間：</p>
<figure class="highlight cpp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;node.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;v8.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> v8;</span><br></pre></td></tr></table></figure>
<h4 id="主要函數">主要函數</h4><p>　　接下去我們寫一個函數，其返回值是 <code>Handle&lt;Value&gt;</code>。</p>
<figure class="highlight cs"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Handle&lt;Value&gt; <span class="title">Hello</span>(<span class="params"><span class="keyword">const</span> Arguments&amp; args</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//... 嗷嗷待寫</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　然後我來粗粗解析一下這些東西：</p>
<h5 id="Handle&lt;Value&gt;">Handle&lt;Value&gt;</h5><p>　　做人要有節操，我事先申明我是從<a href="http://cnodejs.org/topic/4f16442ccae1f4aa270010c5" target="_blank" rel="external">這裏</a>(<a href="http://cnodejs.org/user/fool" target="_blank" rel="external">@fool</a>)參考的。</p>
<blockquote>
<p>V8 裏使用 Handle 類型來託管 JavaScript 對象，與 C++ 的 std::sharedpointer 類似，Handle 類型間的賦值均是直接傳遞對象引用，但不同的是，V8 使用自己的 GC 來管理對象生命週期，而不是智能指針常用的引用計數。</p>
<p>JavaScript 類型在 C++ 中均有對應的自定義類型，如 String 、 Integer 、 Object 、 Date 、 Array 等，嚴格遵守在 JavaScript 中的繼承關係。 C++ 中使用這些類型時，必須使用 Handle 託管，以使用 GC 來管理它們的生命週期，而不使用原生棧和堆。</p>
</blockquote>
<p>　　而這個所謂的 <strong>Value</strong> ，從 V8 引擎的頭文件 <a href="http://code.google.com/p/v8/source/browse/trunk/include/v8.h#1417" target="_blank" rel="external">v8.h</a> 中的各種繼承關係中可以看出來，其實就是 JavaScript 中各種對象的基類。</p>
<p>　　在瞭解了這件事之後，我們大致能明白上面那段函數的申明的意思就是說，我們寫一個 <code>Hello</code> 函數，其返回的是一個不定類型的值。</p>
<blockquote>
<p><strong>注意：</strong> 我們只能返回特定的類型，即在 Handle 託管下的 String 啊 Integer 啊等等等等。</p>
</blockquote>
<h5 id="Arguments">Arguments</h5><p>　　這個就是傳入這個函數的參數了。我們都知道在 <code>Node.js</code> 中，參數個數是亂來的。而這些參數傳進去到 <code>C++</code> 中的時候，就轉變成了這個 <code>Arguments</code> 類型的對象了。</p>
<p>　　具體的用法我們在後面再說，在這裏只需要明白這個是個什麼東西就好。（爲毛要賣關子？因爲 <code>Node.js</code> 官方文檔中的<a href="https://github.com/rvagg/node-addon-examples" target="_blank" rel="external">例子</a>就是分開來講的，我現在只是講第一個 <code>Hello World</code> 的例子而已( ´థ౪థ）σ</p>
<h4 id="添磚加瓦">添磚加瓦</h4><p>　　接下去我們就開始添磚加瓦了。就最簡單的兩句話：</p>
<figure class="highlight d"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handle&lt;Value&gt; Hello(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    HandleScope <span class="keyword">scope</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">scope</span>.Close(String::New(<span class="string">"world"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　這兩句話是什麼意思呢？大致的意思就是返回一個 <code>Node.js</code> 中的字符串 <code>&quot;world&quot;</code>。</p>
<h5 id="HandleScope">HandleScope</h5><p>　　同參考自<a href="http://cnodejs.org/topic/4f16442ccae1f4aa270010c5" target="_blank" rel="external">這裏</a>。</p>
<blockquote>
<p>Handle 的生命週期和 C++ 智能指針不同，並不是在 C++ 語義的 scope 內生存（即{} 包圍的部分），而需要通過 HandleScope 手動指定。HandleScope 只能分配在棧上，HandleScope 對象聲明後，其後建立的 Handle 都由 HandleScope 來管理生命週期，HandleScope 對象析構後，其管理的 Handle 將由 GC 判斷是否回收。</p>
</blockquote>
<p>　　所以呢，我們得在需要管理他的生命週期的時候申明這個 <code>Scope</code> 。好的，那麼爲什麼我們的代碼不這麼寫呢？</p>
<figure class="highlight julia"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handle&lt;Value&gt; Hello(<span class="keyword">const</span> Arguments&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    HandleScope scope;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span><span class="type-annotation">::</span>New(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　因爲當函數返回時，<code>scope</code> 會被析構，其管理的Handle也都將被回收，所以這個 <code>String</code> 就會變得沒有意義。</p>
<p>　　所以呢 V8 就想出了個神奇的點子——<code>HandleScope::Close(Handle&lt;T&gt; Value)</code> 函數！這個函數的用處就是關閉這個 Scope 並且把裏面的參數轉交給上一個 Scope 管理，也就是進入這個函數前的 Scope。</p>
<p>　　於是就有了我們之前的代碼 <code>scope.Close(String::New(&quot;world&quot;));</code>。</p>
<h5 id="String::New">String::New</h5><p>　　這個 <code>String</code> 類所對應的就是 <code>Node.js</code> 中原生的字符串類。繼承自 <code>Value</code> 類。與此類似，還有：</p>
<ul>
<li>Array</li>
<li>Integer</li>
<li>Boolean</li>
<li>Object</li>
<li>Date</li>
<li>Number</li>
<li>Function</li>
<li>…</li>
</ul>
<p>　　這些東西有些是繼承自 <code>Value</code>，有些是二次繼承。我們這裏就不多做研究，自己可以看看 V8 的代碼（至少是頭文件）研究研究或者看看這個<a href="http://bespin.cz/~ondras/html/classv8_1_1Value.html#a70d4afaccc7903e6a01f40a46ad04188" target="_blank" rel="external">手冊</a>。</p>
<p>　　而這個 <code>New</code> 呢？<a href="http://bespin.cz/~ondras/html/classv8_1_1String.html" target="_blank" rel="external">這裏</a>可以看的。就是新建一個 <code>String</code> 對象。</p>
<p>　　至此，這個主要函數我們就解析完畢了。</p>
<h4 id="導出對象">導出對象</h4><p>　　我們來溫習一下，如果是在 <code>Node.js</code> 裏面寫的話，我們怎麼導出函數或者對象什麼的呢？</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.hello = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>　　那麼，在 <code>C++</code> 中我們該如何做到這一步呢？</p>
<h5 id="初始化函數">初始化函數</h5><p>　　首先，我們寫個初始化函數：</p>
<figure class="highlight aspectj"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Handle&lt;Object&gt; exports)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//... 嗷嗷待寫你妹啊！#ﾟÅﾟ）⊂彡☆))ﾟДﾟ)･∵</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　這是龜腚！函數名什麼的無所謂，但是傳入的參數一定是一個 <code>Handle&amp;lt;Object&gt;</code>，代表我們下面將要在這貨上導出東西。</p>
<p>　　然後，我們就在這裏面寫上導出的東西了：</p>
<figure class="highlight lasso"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">void</span> init(<span class="keyword">Handle</span>&lt;Object&gt; exports)</span><br><span class="line">&#123;</span><br><span class="line">    exports<span class="subst">-&gt;</span><span class="built_in">Set</span>(<span class="built_in">String</span><span class="tag">::NewSymbol</span>(<span class="string">"hello"</span>),</span><br><span class="line">        FunctionTemplate<span class="tag">::New</span>(Hello)<span class="subst">-&gt;</span>GetFunction());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　大致的意思就是說，爲這個 <code>exports</code> 對象添加一個字段叫 <code>hello</code>，所對應的東西是一個<a href="http://bespin.cz/~ondras/html/classv8_1_1FunctionTemplate.html" target="_blank" rel="external">函數</a>，而這個函數就是我們親愛的 <code>Hello</code> 函數了。</p>
<p>　　用僞代碼寫直白點就是：</p>
<figure class="highlight dart"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> init(Handle&lt;<span class="built_in">Object</span>&gt; exports)</span><br><span class="line">&#123;</span><br><span class="line">    exports.<span class="built_in">Set</span>(<span class="string">"hello"</span>, function hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　大功告成！</p>
<p>　　（大功告成你妹啊！閉嘴( ‘д‘⊂彡☆))Д´)</p>
<h5 id="真·導出">真·導出</h5><p>　　這纔是最後一步，我們最後要申明，這個就是導出的入口，所以我們在代碼的末尾加上這一行：</p>
<figure class="highlight stylus"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">NODE_MODULE</span><span class="params">(hello, init)</span></span></span><br></pre></td></tr></table></figure>
<p>　　納了個尼？！這又是什麼東西？</p>
<p>　　彆着急，這個 <code>NODE_MODULE</code> 是一個宏，它的意思呢就是說我們採用 <code>init</code> 這個初始化函數來把要導出的東西導出到 <code>hello</code> 中。那麼這個 <code>hello</code> 哪來呢？</p>
<p>　　<strong>它來自文件名！</strong>對，沒錯，它來自文件名。你並不需要事先申明它，你也不必擔心不能用，總之你的這個最終編譯好的二進制文件名叫什麼，這裏的 <code>hello</code> 你就填什麼，當然要除去後綴名了。</p>
<p>　　詳見<a href="http://nodejs.org/api/addons.html#addons_hello_world" target="_blank" rel="external">官方文檔</a>。</p>
<blockquote>
<p>Note that all Node addons must export an initialization function:</p>
<figure class="highlight lisp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void Initialize <span class="list">(<span class="keyword">Handle&lt;Object&gt;</span> exports)</span><span class="comment">;</span></span><br><span class="line">NODE_MODULE<span class="list">(<span class="keyword">module_name</span>, Initialize)</span></span><br></pre></td></tr></table></figure>
<p>There is no semi-colon after NODE_MODULE as it’s not a function (see node.h).</p>
<p>The module_name needs to match the filename of the final binary (minus the .node suffix).</p>
</blockquote>
<h3 id="編譯_(๑•́_₃_•̀๑)">編譯 (๑•́ ₃ •̀๑)</h3><p>　　來吧，讓我們一起編譯吧！</p>
<p>　　我們再新建一個類似於 <code>Makefile</code> 的歸檔文件吧——<code>binding.gyp</code>。</p>
<p>　　並且在裏面添加這樣的<a href="https://github.com/TooTallNate/node-gyp#the-bindinggyp-file" target="_blank" rel="external">代碼</a>：</p>
<figure class="highlight json"><figcaption><span>json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">targets</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">target_name</span>": <span class="value"><span class="string">"hello"</span></span>,</span><br><span class="line">      "<span class="attribute">sources</span>": <span class="value">[ <span class="string">"hello.cc"</span> ]</span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>　　爲什麼這麼寫呢？可以參考 <code>node-gyp</code> 的<a href="http://code.google.com/p/gyp/wiki/GypUserDocumentation#Skeleton_of_a_typical_Chromium_.gyp_file" target="_blank" rel="external">官方文檔</a>。</p>
<h4 id="configure">configure</h4><p>　　在文件搞好之後，我們要在這個目錄下面執行這個命令了：</p>
<figure class="highlight crmsh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"></span><span class="title">-gyp</span> configure</span><br></pre></td></tr></table></figure>
<p>　　如果一切正常的話，應該會生成一個 <code>build</code> 的目錄，然後裏面有相關文件，也許是 <strong>M$ Visual Studio</strong> 的 <code>vcxproj</code> 文件等，也許是 <code>Makefile</code> ，視平臺而定。</p>
<h4 id="build">build</h4><p>　　<code>Makefile</code> 也生成好之後，我們就開始構造編譯了：</p>
<figure class="highlight crmsh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"></span><span class="title">-gyp</span> build</span><br></pre></td></tr></table></figure>
<p>　　等到一切編譯完成，纔算是真正的大功告成了！不信你去看看 <code>build/Release</code> 目錄，下面是不是有一個 <code>hello.node</code> 文件了？沒錯，這個就是 C++ 等下要給 Node.js 撿的肥皂！</p>
<h3 id="搞基吧！Node_ヽ(✿ﾟ▽ﾟ)ノ_C++">搞基吧！Node ヽ(✿ﾟ▽ﾟ)ノ C++</h3><p>　　我們在剛纔那個目錄下新建一個文件 <code>jianfeizao.js</code>：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addon = <span class="built_in">require</span>(<span class="string">"./build/Release/hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(addon.hello());</span><br></pre></td></tr></table></figure>
<p>　　看到沒！看到沒！出來了出來了！Node.js 和 C++ 搞基的結果！這個 <code>addon.hello()</code> 就是我們之前在 C++ 代碼中寫的 <code>Handle&lt;Value&gt; Hello(const Arguments&amp; args)</code> 了，我們現在就已經把它返回的值給輸出了。</p>
<h2 id="洗洗睡吧，下節更深入">洗洗睡吧，下節更深入</h2><p>　　時間不早了，今天就寫到這裏了，至此爲止大家都能搞出最基礎的 <strong>Hello world</strong> 的 C++ 擴展了吧。下一次寫的應該會更深入一點，至於下一次是什麼時候，我也不知道啦其實。<br>　　（喂喂喂，擼主怎麼可以這麼不負責！(ｏﾟﾛﾟ)┌┛Σ(ﾉ´<em>ω</em>`)ﾉ</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　N久之前的一個坑——用 <strong>Node.js</strong> 來重構 NBUT 的 <strong>Online Judge</strong>，包括評測端也得重構一遍。（至於什麼時候完成大家就不要關心了，(／‵Д′)／~ ╧╧</p>
<p>　　總之我們現在]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[～公衆檔所～項目解析]]></title>
    <link href="http://xcoder.in/2014/03/27/node-public-file-house/"/>
    <id>http://xcoder.in/2014/03/27/node-public-file-house/</id>
    <published>2014-03-26T17:34:04.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　所謂“公衆檔所”，其實就是一個公共的臨時網盤了。這個東西是一個老物了，在我剛接觸 <code>Expressjs</code> 的時候寫的。當時還隨便搞了一下 <code>backbone.js</code>，但是沒有深入，勿笑。關於深入構架 <code>Expressjs</code> 方面也沒做，只是粗粗寫了下最基礎的路由，所以整個文件結構也不是很規範。但是應該能比較適合剛學 <code>Node.js</code> 以及剛接觸 <code>Expressjs</code> 的人吧。</p>
<p>　　Repo地址在<a href="https://github.com/XadillaX/public-file-house" target="_blank" rel="external">我的Github</a>上。Demo地址在 <a href="http://dang.kacaka.ca/" target="_blank" rel="external">http://dang.kacaka.ca/</a>，由於個人電腦的不穩定性，所以不保證你們隨時可以訪問，保不定哪天就失效了，所以最好的辦法還是自己 <code>clone</code> 下來啪啪啪。</p>
<p>　　它所需要的東西大致就是 <code>Expressjs</code> + <code>Redis</code> + <code>Backbone</code> 了。不過都是最最基礎的代碼。</p>
<h2 id="部署">部署</h2><p>　　把部署寫在最前面是爲了能讓你們自己電腦上有一個能跑的環境啦。公衆檔所在我自己這邊的環境裏面是由三臺電腦組成的。</p>
<ul>
<li>網關“服務器”。這是我這邊環境一致對外的機器。實際上是一片樹莓派，裝了 <code>nginx</code>，然後對內部做反向代理。</li>
<li>本體“服務器”。跑了 <strong>公衆檔所</strong> 本體。</li>
<li>數據庫“服務器”。我們用的數據庫實際上不是嚴格意義上的數據庫，只是 <code>redis</code> 罷了，也沒做與其它數據庫的持久化，只是用了他內部自帶的持久化。</li>
</ul>
<p>　　<strong>如果你們裝一臺機子上，那麼就是：</strong></p>
<p>　　將 <code>repo</code> 給 clone 到自己的機子上。</p>
<figure class="highlight crmsh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/XadillaX/public-file-house</span><br></pre></td></tr></table></figure>
<p>　　裝好 <strong>redis</strong>，並根據需要修改 <code>redis.conf</code> 文件。</p>
<p>　　執行 <code>redis.sh</code> 文件開啓數據庫。如果你自己本身已經開啓數據庫或者用其它方法開啓了，請忽略上面數據庫相關步驟。</p>
<p>　　然後打開 <code>commonConst.js</code> 文件進行編輯，把相關的一些信息改成自己所需要的。</p>
<p>　　哦對了，還有一個“潔癖相關”的步驟。我以前年輕不懂事，把 <code>node_modules</code> 文件夾也給加到版本庫中了，而且也在裏面居然自己加了兩個沒有弄到 <code>nmp</code> 去的模塊（<strong>而且這兩個模塊本來就不應該放在這個文件夾下，但是不要在意這些細節，反正我現在肯定不會做這麼傻的事了</strong>）。</p>
<p>　　至於爲什麼不要這麼做，就跟 <code>node_modules</code> 文件夾的意義相關了。而且裏面有可能有一些在我本機編譯好的模塊，所以最好還是清理下自己重新裝一遍爲佳。</p>
<p>　　具體呢大致就是把 <code>node_modules</code> 文件夾裏面的 <code>alphaRandomer.js</code> 文件和 <code>smpEncoder.js</code> 文件拷貝出來備份到任意文件夾，然後刪除整個 <code>node_module</code> 文件夾。接下去跑到項目根目錄執行：</p>
<figure class="highlight cmake"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>　　把三方模塊重新裝好之後，把剛纔拷出去的倆文件放回這個目錄下。（<strong>但是以後你們自己寫別的項目的話千萬別學我這個壞樣子啊，以前年輕不懂事 QAQ</strong>）</p>
<p>　　最後跑起來就行啦：</p>
<figure class="highlight crmsh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"> </span><span class="title">pfh</span>.js</span><br></pre></td></tr></table></figure>
<h2 id="解析">解析</h2><p>接下去就是要剖析這小破東西了。</p>
<h3 id="基礎文件">基礎文件</h3><h4 id="pfh-js">pfh.js</h4><p>　　這個文件其實是 <code>Expressjs</code> 自動生成的，以前不是很懂他，所以也沒怎麼動，基本上是保持原封不動的。</p>
<h4 id="router-js">router.js</h4><p>　　這個是路由定義的文件。比較醜陋的一種方法，把需要定義的所有路由都寫進兩個 <code>json</code> 對象中，一個 <code>POST</code> 和一個 <code>GET</code>。</p>
<p>　　看過 <code>Expressjs</code> 文檔的人或者教程的人都知道，最基礎的路由註冊寫法其實就是：</p>
<figure class="highlight vbnet"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="keyword">KEY</span>, <span class="keyword">FUNCTION</span>);</span><br></pre></td></tr></table></figure>
<p>　　或者：</p>
<figure class="highlight delphi"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.post(KEY, <span class="function"><span class="keyword">FUNCTION</span>);</span></span><br></pre></td></tr></table></figure>
<p>　　所以我下面有一個函數：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exports.setRouter = <span class="function"><span class="keyword">function</span><span class="params">(app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.getRouter) &#123;</span><br><span class="line">        app.<span class="keyword">get</span>(key, <span class="keyword">this</span>.getRouter[key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.postRouter) &#123;</span><br><span class="line">        app.post(key, <span class="keyword">this</span>.postRouter[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　其大致意思就是把之前我們定義好的兩個路由對象裏的內容一一給註冊到系統的路由當中去。這個是我最初最簡陋的思想，不過後來我把它稍稍完善了一下寫到<a href="https://github.com/XadillaX/exframess/blob/master/config/router.js#L17" target="_blank" rel="external">別的地方</a>去了。</p>
<h3 id="模型">模型</h3><h4 id="model/fileModel-js">model/fileModel.js</h4><p>　　這個就是模型層了，主要就是 <code>redis</code> 的一些操作了。在這裏我用的是 <a href="https://github.com/mranney/node_redis" target="_blank" rel="external"><code>redis</code></a> 這個模塊，具體的用法大家可以看它 <code>repo</code> 的 <code>README.md</code> 文件。</p>
<p>　　大致就三個函數：</p>
<ol>
<li><code>fileModel.prototype.keyExists</code>: 判斷某個提取碼存在與否。</li>
<li><code>fileModel.prototype.get</code>: 獲取某個驗證碼的文件信息。</li>
<li><code>fileModel.prototype.addFile</code>: 添加一個文件信息。</li>
</ol>
<blockquote>
<p>不過有個壞樣子大家不要學，<code>Node.js</code> 大家都約定俗成的回調函數參數一般都是 <code>callback(err, data, blahblah...)</code> 的，第一個參數都是錯誤，如果沒錯誤都是 <code>null</code> 或者是 <code>undefined</code> 的。但是以前也沒這種意識，所以回調函數的參數也都是比較亂的。</p>
</blockquote>
<h3 id="控制器">控制器</h3><h4 id="action/index-js">action/index.js</h4><p>　　這是一些基礎控制器。</p>
<h5 id="exports-index">exports.index</h5><p>　　純粹的首頁顯示。</p>
<h5 id="exports-download">exports.download</h5><p>　　文件下載控制器。由代碼可知，首先獲取 <code>token</code> 和 <code>code</code>。 <code>token</code> 是驗證 <strong>URL</strong> 的有效性而 <code>code</code> 即提取碼了。</p>
<p>　　期間我們驗證了下 <code>token</code>：</p>
<figure class="highlight gcode"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span><span class="comment">(!functions.verifyBlahblah(token)</span>) &#123;</span><br><span class="line">    resp.redirect<span class="comment">(baseConfig.webroot)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　而這個 <code>verifyBlahblah</code> 函數就在<a href="https://github.com/XadillaX/public-file-house/blob/master/plugin/functions.js#L21" target="_blank" rel="external">這個文件</a>裏面。</p>
<figure class="highlight php"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">exports.verifyBlahblah = <span class="function"><span class="keyword">function</span><span class="params">(blahblah)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">array</span> = blahblah.split(<span class="string">"^"</span>);</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">array</span>[<span class="keyword">array</span>.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">array</span>.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encoder = <span class="keyword">require</span>(<span class="string">"smpEncoder"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> text = encoder.norBack(<span class="keyword">array</span>, time.toString());</span><br><span class="line">        text = encoder.decode(text);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> now = text.substr(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">var</span> token = text.substr(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(parseInt(Date.now() / <span class="number">1000</span>) - parseInt(now) &gt; <span class="number">300</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(token !== <span class="keyword">require</span>(<span class="string">"../commonConst"</span>).token) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　大體意思就是把其打散到數組裏面，其中時間戳是最後一位。然後解密。最後驗證解密後的 <code>token</code> 是否等於系統的 <code>token</code> 以及時間戳有沒有過期。</p>
<p>　　大家通過截取 <code>Chrome</code> 或者 <code>Firefox</code> 的請求信息，不難發現有這麼個地址：</p>
<figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">Request URL:http://localhost/download?file=</span><span class="number">662</span><span class="xml">ZE&amp;token=</span><span class="number">65</span><span class="xml"></span><span class="keyword">^97</span><span class="xml"></span><span class="keyword">^74</span><span class="xml"></span><span class="keyword">^68</span><span class="xml"></span><span class="keyword">^106</span><span class="xml"></span><span class="keyword">^125</span><span class="xml"></span><span class="keyword">^88</span><span class="xml"></span><span class="keyword">^115</span><span class="xml"></span><span class="keyword">^65</span><span class="xml"></span><span class="keyword">^96</span><span class="xml"></span><span class="keyword">^66</span><span class="xml"></span><span class="keyword">^105</span><span class="xml"></span><span class="keyword">^127</span><span class="xml"></span><span class="keyword">^114</span><span class="xml"></span><span class="keyword">^87</span><span class="xml"></span><span class="keyword">^123</span><span class="xml"></span><span class="keyword">^123</span><span class="xml"></span><span class="keyword">^114</span><span class="xml"></span><span class="keyword">^84</span><span class="xml"></span><span class="keyword">^124</span><span class="xml"></span><span class="keyword">^114</span><span class="xml"></span><span class="keyword">^125</span><span class="xml"></span><span class="keyword">^120</span><span class="xml"></span><span class="keyword">^121</span><span class="xml"></span><span class="keyword">^99</span><span class="xml"></span><span class="keyword">^116</span><span class="xml"></span><span class="keyword">^100</span><span class="xml"></span><span class="keyword">^118</span><span class="xml"></span><span class="keyword">^116</span><span class="xml"></span><span class="keyword">^98</span><span class="xml"></span><span class="keyword">^124</span><span class="xml"></span><span class="keyword">^120</span><span class="xml"></span><span class="keyword">^109</span><span class="xml"></span><span class="keyword">^98</span><span class="xml"></span><span class="keyword">^120</span><span class="xml"></span><span class="keyword">^100</span><span class="xml"></span><span class="keyword">^80</span><span class="xml"></span><span class="keyword">^119</span><span class="xml"></span><span class="keyword">^120</span><span class="xml"></span><span class="keyword">^87</span><span class="xml"></span><span class="keyword">^119</span><span class="xml"></span><span class="keyword">^105</span><span class="xml"></span><span class="keyword">^116</span><span class="xml"></span><span class="keyword">^8</span><span class="xml"></span><span class="keyword">^1395904110</span><span class="xml"></span><br><span class="line">Request Method:GET</span><br><span class="line">Status Code:</span><span class="number">200</span><span class="xml"> OK</span></span><br></pre></td></tr></table></figure>
<p>　　而這一坨 <code>65^97^74^68^106^125^88^115^65^96^66^105^127^114^87^123^123^114^84...^1395904110</code> 便是所謂的 <code>token</code> 了。而且本來就是個demo，這個 <code>token</code> 也就是隨便做做樣子罷了。</p>
<p>　　接下去通過驗證之後，便可以從數據庫中讀取文件信息了。如果有文件，那麼通過 <code>resp.download</code> 函數呈現給用戶。</p>
<figure class="highlight armasm"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">var</span> fileModel = new FileModel()<span class="comment">;</span></span><br><span class="line"><span class="label">fileModel.get</span>(<span class="preprocessor">code</span>, <span class="preprocessor">function</span>(status, error, obj) &#123;</span><br><span class="line">    <span class="preprocessor">if</span>(error) resp.redirect(<span class="keyword">baseConfig.webroot);</span><br><span class="line"></span>    <span class="preprocessor">else</span> &#123;</span><br><span class="line">        <span class="preprocessor">if</span>(obj === null) &#123;</span><br><span class="line">            resp.redirect(<span class="keyword">baseConfig.webroot </span>+ <span class="string">"/get/"</span> + <span class="preprocessor">code</span> + <span class="string">"/not-exist"</span>)<span class="comment">;</span></span><br><span class="line">        &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">            resp.download(<span class="keyword">baseConfig.uploadDir </span>+ <span class="preprocessor">code</span>, <span class="preprocessor">require</span>(<span class="string">"urlencode"</span>)(obj.filename))<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h5 id="exports-getToken">exports.getToken</h5><p>　　這個函數就是生產一個有效的 <code>token</code> 用的。在前端是通過 <strong>ajax</strong> 來獲取的。</p>
<figure class="highlight nimrod"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encoder = require(<span class="string">"smpEncoder"</span>);</span><br><span class="line"><span class="keyword">var</span> token = baseConfig.token;</span><br><span class="line"><span class="keyword">var</span> now = parseInt(<span class="type">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = encoder.encode(now + token);</span><br><span class="line"><span class="literal">result</span> = encoder.norGo(<span class="literal">result</span>, now.toString());</span><br><span class="line"><span class="keyword">var</span> resultString = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="literal">result</span>.length; i++) resultString += (<span class="literal">result</span>[i] + <span class="string">"^"</span>);</span><br></pre></td></tr></table></figure>
<p>　　大體呢就是根據目前的時間戳和系統 <code>token</code> 一起加密生產一個有效的 <code>token</code>。</p>
<h5 id="exports-send2fetion">exports.send2fetion</h5><p>　　通過自己的飛信給自己發送提取碼以備忘。</p>
<p>　　這裏的話用了一個 <code>fetion-sender</code> 的模塊。<code>Repo</code> 在<a href="https://github.com/XadillaX/fetion-sender" target="_blank" rel="external">這裏</a>。</p>
<h4 id="action/upload-js">action/upload.js</h4><p>　　這個文件裏面其實就一個 <code>exports.upload</code> 函數，另一個是生成提取碼用的。</p>
<h5 id="function_genAlphaKey(time,_callback)">function genAlphaKey(time, callback)</h5><p>　　生成提取碼。我們假設最多嘗試10次，若嘗試10次還沒有生成唯一的驗證碼就輸出錯誤讓用戶重試。所以就有了：</p>
<figure class="highlight nimrod"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function genAlphaKey(time, callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> keyLength = config.uploadLen;</span><br><span class="line">    <span class="keyword">var</span> filename = alphaRandomer.rand(keyLength);</span><br><span class="line">    <span class="keyword">var</span> fileModel = new <span class="type">FileModel</span>();</span><br><span class="line"></span><br><span class="line">    fileModel.keyExists(filename, function(status, <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!status) &#123;</span><br><span class="line">            <span class="keyword">if</span>(time &lt; maxTryTime) &#123;</span><br><span class="line">                genAlphaKey(time + <span class="number">1</span>, callback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="literal">false</span>, <span class="literal">result</span>, <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">result</span>) genAlphaKey(time, callback);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="literal">true</span>, <span class="string">""</span>, filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　不斷地生成定長的提取碼，然後通過模型的 <code>keyExists</code> 函數來確定這個提取碼是否存在，如果存在了就遞歸調用重新生成，否則就直接回調。</p>
<h5 id="exports-upload">exports.upload</h5><p>　　上傳文件的頁面了。</p>
<figure class="highlight nimrod"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.files.files.length !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="literal">result</span>.status = <span class="literal">false</span>;</span><br><span class="line">    <span class="literal">result</span>.msg = <span class="string">"請用正確的姿勢餵我文件。"</span>;</span><br><span class="line">    resp.send(<span class="number">200</span>, <span class="literal">result</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fileInfo = req.files.files[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(fileInfo.size &gt; config.maxUploadSize) &#123;</span><br><span class="line">    <span class="literal">result</span>.status = <span class="literal">false</span>;</span><br><span class="line">    <span class="literal">result</span>.msg = <span class="string">"文件太大啦，公衆檔所一次只能吃10M的文件哦。"</span>;</span><br><span class="line">    resp.send(<span class="number">200</span>, <span class="literal">result</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　前面一堆話大致就是做下有效性判斷而已。然後調用函數來生成有效的提取碼：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">genAlphaKey(<span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">(status, msg, filename)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　如果生成成功的話就往數據庫中添加文件信息：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileModel = <span class="keyword">new</span> FileModel();</span><br><span class="line">fileModel.addFile(filename,</span><br><span class="line">    fileInfo.name,</span><br><span class="line">    fileInfo.headers[<span class="string">"content-type"</span>],</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(status, msg)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>　　如果添加也成功了的話，那麼把剛上傳到臨時文件夾的文件給移動到上傳文件儲存目錄中，以便以後可以被下載：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(fileInfo.path, uploadDir + filename, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　如果移動也成功了的話，那麼返回一個成功的json信息：</p>
<figure class="highlight nimrod"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">result</span>.status = <span class="literal">true</span>;</span><br><span class="line"><span class="literal">result</span>.code = filename;</span><br><span class="line">resp.send(<span class="number">200</span>, <span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h3 id="視圖">視圖</h3><p>　　這裏視圖就一個 <code>index.ejs</code> 。然後通過 <code>backbone.js</code> 來調用不同的頁內模板和邏輯來實現的類似於 <strong>SPA <del>(Solus Par Agula)</del> (Single Page Application)</strong> 的效果。</p>
<h4 id="views/index/index-ejs">views/index/index.ejs</h4><p>　　像類似於下面的這種就是 <code>backbone.js</code> 的模板概唸了：</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/template"</span> <span class="attribute">id</span>=<span class="value">"faq-template"</span>&gt;</span><span class="undefined"></span><br><span class="line">...</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　到時候就可以通過 <code>backbone.js</code> 中的函數來填充到頁面實體當中去。</p>
<h4 id="public/js/index-js">public/js/index.js</h4><p>　　在擁有了所有的前端js依賴之後，這個文件就是這個 <code>SPA</code> 的入口了。</p>
<p>　　邏輯很簡單：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workspace = <span class="literal">null</span>;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    workspace = <span class="keyword">new</span> Workspace();</span><br><span class="line">    Backbone.history.start(&#123; pushState: <span class="literal">true</span>, hashChange: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　新建一個 <code>Workscpace</code>，然後對 <code>backbone</code> 進行一點配置。</p>
<blockquote>
<p>To indicate that you’d like to use HTML5 pushState support in your application, use Backbone.history.start({pushState: true}). If you’d like to use pushState, but have browsers that don’t support it natively use full page refreshes instead, you can add {hashChange: false} to the options.</p>
<p style="text-align: right">——摘自 <a href="http://backbonejs.org/#History-start" target="_blank" rel="external">backbonejs.org</a></p>

</blockquote>
<p>　　然後這個 <code>Workspace</code> 即這個 <code>SPA</code> 的本體了。</p>
<h4 id="public/backbone/router/workspace-js">public/backbone/router/workspace.js</h4><p>　　這裏定義了幾個路由，即什麼路由要用哪個類去處理。這樣才能在 <code>URL</code> 當中各種跳轉。其實無非就是把待渲染元素渲染成頁內模板，然後把頁面的各種事件響應邏輯改掉即可。對於 <code>Backbone</code> 我其實只用過兩次，現在也忘不大多了，怕誤人子弟，所以一些具體的函數啊用法啊還是去參考下官網比較好來着。</p>
<h4 id="public/backbone/view/*-js">public/backbone/view/*.js</h4><p>　　就是各路由所對應的視圖了。</p>
<h5 id="uploadView-js">uploadView.js</h5><p>　　比如說 <code>uploadView.js</code> 文件當中，執行渲染函數：</p>
<figure class="highlight groovy"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line"><span class="string">render      :</span> function() &#123;</span><br><span class="line">    $(<span class="keyword">this</span>.el).html(Mustache.to_html(</span><br><span class="line">        <span class="keyword">this</span>.template</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#uploadfile"</span>).fileupload(&#123;</span><br><span class="line">        <span class="string">url         :</span> <span class="string">"../../upload.pfh"</span>,</span><br><span class="line">        <span class="string">dataType    :</span> <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">done        :</span> <span class="keyword">this</span>.uploaded,</span><br><span class="line">        <span class="string">progressall :</span> <span class="keyword">this</span>.processUpload,</span><br><span class="line">        <span class="string">start       :</span> <span class="keyword">this</span>.startUpload</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">".template"</span>).show(<span class="string">"normal"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　就是用頁內模板來渲染：</p>
<figure class="highlight cpp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>.el).html(Mustache.to_html(</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">template</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p>　　而這個 <code>this.el</code> 是在 <code>Workspace</code> 中定義的：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">upload      : <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uploadView = <span class="keyword">new</span> UploadView(&#123; el: <span class="string">"#main-template-container"</span> &#125;);</span><br><span class="line">    uploadView.render();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　如你所見，就是這個 <code>#main-template-container</code> 了。</p>
<p>　　這個渲染完畢之後，然後把 <code>#uploadfile</code> 給變成上傳按鈕（用了 <strong>jquery.fileupload.js</strong>）。再然後把渲染好的頁面給 <code>show</code> 出來。</p>
<p>　　然後這個　<code>uploadView.js</code> 中還定義了兩個<a href="http://backbonejs.org/#View-delegateEvents" target="_blank" rel="external">響應事件</a>：</p>
<figure class="highlight lasso"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">...</span>,</span><br><span class="line"></span><br><span class="line">events      : &#123;</span><br><span class="line">    <span class="string">"click .upbutton"</span>   : <span class="string">"upload"</span>,</span><br><span class="line">    <span class="string">"click #uploadpage-to-download"</span> : <span class="string">"goDownload"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attribute">...</span></span><br></pre></td></tr></table></figure>
<p>　　即在按下 <code>.upbutton</code> 的時候會執行 <code>upload</code> 函數，在按下“去下載”的按鈕時會執行 <code>goDownload</code> 函數。</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">upload      : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#uploadfile"</span>).click();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　執行上傳函數的時候，實際上是自動觸動了 <code>#uploadfile</code> 按鈕的 <code>click</code> 事件。這個時候就會按照之前定義好的 <code>$(&quot;#uploadfile&quot;).fileupload(...)</code> 去處理了。</p>
<h5 id="getView-js">getView.js</h5><p>　　這個是獲取文件的視圖。</p>
<p>　　渲染時會獲取 <code>code</code> 。這個 <code>code</code> 同樣是 <code>Workspace</code> 傳入的：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>         : <span class="function"><span class="keyword">function</span><span class="params">(code, err)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getView = <span class="keyword">new</span> GetView(&#123; el: <span class="string">"#main-template-container"</span> &#125;);</span><br><span class="line">    getView.setCode(code);</span><br><span class="line">    <span class="keyword">if</span>(err !== <span class="literal">undefined</span>) getView.setError(err);</span><br><span class="line">    getView.render();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　上面關於 <code>get</code> 的路由是 <code>get/:code</code> 之類的，所以這個 <code>code</code> 會作爲一個路由參數傳給 <code>get</code> 函數。</p>
<p>　　有了這個 <code>code</code> 之後就可以把頁面渲染出來了。這就是爲什麼我們地址輸入 <code>http://localhost/get/XXXXX</code> 的時候輸入框裏面就有提取碼了。把這個渲染出來之後，我們對“二維碼”的兩張圖片做下響應：鼠標移動上去會顯示出來。再然後我們要獲取二維碼了（<code>this.genQRCode()</code>）：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">genQRCode   : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="keyword">this</span>.code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dpage = <span class="string">"http://dang.kacaka.ca/get/"</span> + code;</span><br><span class="line">    dpage = UrlEncode(dpage);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="string">'&lt;img style="width: 150; height: 150;" src="https://chart.googleapis.com/chart?cht=qr&amp;chs=150x150&amp;choe=UTF-8&amp;chld=L|4&amp;chl='</span> + dpage + <span class="string">'" /&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#download-page-qr"</span>).attr(<span class="string">"data-content"</span>, img);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> opage = <span class="string">"http://dang.kacaka.ca/download?"</span>;</span><br><span class="line">    <span class="keyword">this</span>.getToken(<span class="function"><span class="keyword">function</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">undefined</span> === token) &#123;</span><br><span class="line">            $(<span class="string">"#download-origin-qr"</span>).attr(<span class="string">"data-content"</span>, <span class="string">'&lt;div style="text-align: center;"&gt;二維碼生成失敗。&lt;/div&gt;'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        opage += <span class="string">"token="</span> + token;</span><br><span class="line">        opage += <span class="string">"&amp;file="</span> + code;</span><br><span class="line">        opage = UrlEncode(opage);</span><br><span class="line">        <span class="keyword">var</span> img = <span class="string">'&lt;div style="text-align: center;"&gt;&lt;img style="width: 150; height: 150;" src="https://chart.googleapis.com/chart?cht=qr&amp;chs=150x150&amp;choe=UTF-8&amp;chld=L|4&amp;chl='</span> + opage + <span class="string">'" /&gt;&lt;br /&gt;&lt;small&gt;該二維碼有效期五分鐘。&lt;/small&gt;&lt;/div&gt;'</span>;</span><br><span class="line">        $(<span class="string">"#download-origin-qr"</span>).attr(<span class="string">"data-content"</span>, img);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">""</span> === <span class="keyword">this</span>.code) &#123;</span><br><span class="line">        $(<span class="string">"h2 small"</span>).css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> $(<span class="string">"h2 small"</span>).css(<span class="string">"display"</span>, <span class="string">"inline-block"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　無非就是調用谷歌的 API 然後生成圖片地址放上去罷了。一個地址就是當前頁面地址，另一個就是加上 <code>token</code> 之後的直接下載地址。</p>
<p>　　如你所見，獲取token是通過ajax往服務器請求的：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">getToken    : <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>&#123;</span><br><span class="line">    $.<span class="keyword">get</span>(<span class="string">"../../blahblah"</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">        callback(e.token);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　然後事件的話：</p>
<figure class="highlight livescript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">events      : &#123;</span><br><span class="line">    <span class="string">"click <span class="subst">#downloadpage-<span class="keyword">to</span>-upload</span>"</span> : <span class="string">"toUpload"</span>,</span><br><span class="line">    <span class="string">"click <span class="subst">#download-btn</span>"</span>   : <span class="string">"toDownload"</span>,</span><br><span class="line">    <span class="string">"keydown <span class="subst">#download-code</span>"</span>: <span class="string">"toDownloadKeydown"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"keyup <span class="subst">#download-code</span>"</span>  : <span class="string">"navCode"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　按了“去上傳”按鈕會跑去上傳。如果按下“下載”按鈕就下載文件了。然後輸入框裏面彈起鍵盤的話，會導致輸入框文字變化，這個時候就要更新二維碼以及URL了。</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">navCode     : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = $(<span class="string">"#download-code"</span>).val();</span><br><span class="line">    workspace.navigate(<span class="string">"get/"</span> + code);</span><br><span class="line">    <span class="keyword">this</span>.code = code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(code === <span class="string">""</span>) &#123;</span><br><span class="line">        $(<span class="string">"h2 small"</span>).css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.genQRCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　每當輸入框變化之後，地址欄就要變成新的 <code>get/:code</code> (<code>workspace.navigate(&quot;get/&quot; + code)</code>) 了，然後重新獲取一遍二維碼。</p>
<p>　　下載按鈕的邏輯代碼如下：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">toDownload  : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = $(<span class="string">"#download-code"</span>).val();</span><br><span class="line">    workspace.navigate(<span class="string">"get/"</span> + code);</span><br><span class="line">    <span class="keyword">this</span>.getToken(<span class="function"><span class="keyword">function</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(token === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            alert(<span class="string">"獲取驗證信息失敗，請稍後重試。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"../../download?file="</span> + code + <span class="string">"&amp;token="</span> + token;</span><br><span class="line">            <span class="built_in">window</span>.location.href = url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　反正就是根據 <code>code</code> 來生成地址，然後從獲取token的地址中把token拿出來拼接成下載地址之後再訪問（<code>window.location.href = url</code>）就好了。</p>
<h5 id="uploadedView-js">uploadedView.js</h5><p>　　這個視圖是上傳成功視圖。功能很簡單，就是現實下提取碼，然後飛信能發送一下，以及能複製驗證碼罷了。</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">render      : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">undefined</span> === <span class="keyword">this</span>.code) &#123;</span><br><span class="line">        workspace.navigate(<span class="string">"upload"</span>, &#123; trigger: <span class="literal">true</span>, replace: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="keyword">this</span>.el).html(Mustache.to_html(</span><br><span class="line">        <span class="keyword">this</span>.template,</span><br><span class="line">        &#123; code: <span class="keyword">this</span>.code &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> phoneinfo = store.get(<span class="string">"fetion-info"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">undefined</span> !== phoneinfo) &#123;</span><br><span class="line">        $(<span class="string">"#phonenumber"</span>).val(phoneinfo.phonenumber);</span><br><span class="line">        $(<span class="string">"#password"</span>).val(phoneinfo.password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">".template"</span>).show(<span class="string">"normal"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'#copy-code-btn-parent'</span>).zclip(&#123;</span><br><span class="line">            path:<span class="string">'../../ZeroClipboard.swf'</span>,</span><br><span class="line">            copy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(<span class="string">"#code-input"</span>).val();</span><br><span class="line">            &#125;,</span><br><span class="line">            afterCopy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">"提取碼已經成功複製到剪切板了。"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　通過判斷有沒有 <code>code</code> 來判斷是否上傳成功。這個 <code>code</code> 的來源是 <code>uploadView.js</code> 中的 <code>uploaded (done: this.uploaded)</code> 函數：</p>
<figure class="highlight nimrod"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">uploaded    : function(e, data) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = data.<span class="literal">result</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="literal">result</span>.status) &#123;</span><br><span class="line">        $(<span class="string">"#progress"</span>).css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">        $(<span class="string">"#progress .progress-bar"</span>).html(<span class="string">"已上傳 0%"</span>);</span><br><span class="line">        $(<span class="string">"#progress .progress-bar"</span>).attr(<span class="string">"aria-valuenow"</span>, <span class="string">"0"</span>);</span><br><span class="line">        $(<span class="string">"#progress .progress-bar"</span>).css(<span class="string">"width"</span>, <span class="string">"0%"</span>);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#upload-div #feed-doc"</span>).removeClass(<span class="string">"alert-info"</span>);</span><br><span class="line">        $(<span class="string">"#upload-div #feed-doc"</span>).addClass(<span class="string">"alert-danger"</span>);</span><br><span class="line">        $(<span class="string">"#upload-div #feed-doc"</span>).html(<span class="literal">result</span>.msg);</span><br><span class="line">        $(<span class="string">"#upload-div #feed-doc"</span>).css(<span class="string">"display"</span>, <span class="string">"block"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        store.<span class="type">set</span>(<span class="string">"code"</span>, <span class="literal">result</span>.code);</span><br><span class="line">        workspace.navigate(<span class="string">"uploaded"</span>, &#123; trigger: <span class="literal">true</span>, replace: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　<code>e</code> 和 <code>data</code> 這兩個參數哪來？首先這個 <code>uploaded</code> 函數是在之前渲染的時候定義成 <code>jquery.fileupload</code> 的上傳結束回調函數的，所以這兩個參數自然是 <code>jquery.fileupload</code> 傳過來的。詳見<a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Options#done" target="_blank" rel="external">這裏</a>。</p>
<p>　　總之就是上次成功之後，這個upload函數會獲取一個 <code>code</code>，然後它就會拿這個 <code>code</code> 存到 <code>store</code> 中。這個 <code>store.js</code> 是一個 <code>localStorage</code> 的封裝。它的代碼和文檔在<a href="https://github.com/cloudhead/store.js" target="_blank" rel="external">這裏</a>。</p>
<p>　　存好之後讓 <code>Workspace</code> 給導航到 <code>uploaded</code> 視圖中。</p>
<p>　　而這個 <code>uploaded</code> 視圖的初始化函數裏面有這樣的代碼：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line">initialize  : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.code = store.get(<span class="string">"code"</span>);</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#sending"</span>).click(self.sending);</span><br><span class="line">    $(<span class="string">"#cancel-sending"</span>).click(self.cancelSending);</span><br><span class="line">    $(<span class="string">"#phonenumber, #password"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>) self.sending(); &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>　　就是初始化的時候，從 <code>localStorage</code> 中把 <code>code</code> 給取出來。</p>
<h2 id="結束">結束</h2><p>　　代碼量少，用到的東西也是基礎；不過以前的代碼由於不瞭解 <code>Node.js</code> 啊 <code>Expressjs</code> 啊等等的，所以導致代碼雜亂無章、髒亂無比，所以一定程度上阻礙了可讀性的存在。</p>
<p>　　希望本文能給各位看官稍稍理清思路。我也不必寫得面面俱到，只是在某個程度上點題一下而已。更多的大家自己看代碼即可了。不過希望還不要把大家給誤導了就好，畢竟這代碼我自己現在看覺得好丟臉啊 QAQ。大家就去其糟粕取其精華吧。（喂喂喂，我去年買了個表，哪有什麼精華啊！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　所謂“公衆檔所”，其實就是一個公共的臨時網盤了。這個東西是一個老物了，在我剛接觸 <code>Expressjs</code> 的時候寫的。當時還隨便搞了一下 <code>backbone.js</code>，但是沒有深入，勿笑。關於深入構架 <code>Express]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="Project Parse" scheme="http://xcoder.in/tags/Project-Parse/"/>
    
      <category term="Document" scheme="http://xcoder.in/categories/Document/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浙江大學XPlan項目新聞爬蟲手機屏幕適配文檔]]></title>
    <link href="http://xcoder.in/2013/12/28/xplan-spider-doc/"/>
    <id>http://xcoder.in/2013/12/28/xplan-spider-doc/</id>
    <published>2013-12-27T16:00:00.000Z</published>
    <updated>2016-07-12T11:26:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><strong>XPlan</strong> 是一個“基於校園強關係的社交應用”的開發代號。其中有一個功能是從學校網站上通過網絡爬蟲（Web Crawler）形式將學校新聞抓取到XPlan自身的數據庫當中。</p>
<p>而這裏出現的一個問題就是學校網站上面的文章是通過類似於 <a href="http://kindeditor.net/" target="_blank" rel="external"><code>KindEditor</code></a>、<a href="http://ueditor.baidu.com/website/" target="_blank" rel="external"><code>UEditor</code></a>這類<strong>在線富文本編輯器</strong>生成的代碼。</p>
<p>這類代碼有幾個共性：</p>
<ol>
<li>代碼有大量冗餘、多重無用嵌套。</li>
<li>非常低的代碼可讀性。</li>
<li>在PC瀏覽器中表現力不錯，往往能以低效的代碼實現預期排版。</li>
</ol>
<p>所以這些富文本編輯器可以在PC各大內核瀏覽器中表現良好，但是不便人工修改代碼。</p>
<p>而 <strong>XPlan</strong> 確是一個由智能手機主導的應用，新聞將會通過一個 <strong>WebView</strong> 體現出來。所以就需要一定的方法將這些髒亂的代碼適配成手機屏幕下表現力良好的代碼。</p>
<h2 id="預處理">預處理</h2><p>在這裏，我們將新聞的代碼鎖定在新聞內容排版，而排除了其它類似於新聞標題、新聞作者等其它信息。</p>
<p>以我們浙江大學軟件學院爲例，我們爬取的新聞內容代碼將如下：</p>
<figure class="highlight applescript"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"vid_wz"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>所有內容將被包括在這個類型爲 <code>vid_wz</code> 的 <code>div</code> 當中。</p>
<p>這時，我們將其包括在一個自己實現定義好的模板當中。該模板與新聞內容將會形成一個完整的網頁，包括完整的 <code>html</code>、<code>head</code>、<code>body</code> 等標籤。</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>新聞內頁<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">article</span> <span class="attribute">id</span>=<span class="value">"_xplan-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"vid_wz"</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這裏需要注意的一點的就是其中的一個 <code>meta</code> 標籤：</p>
<figure class="highlight applescript"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>它的意思是定義 <code>viewport</code> 的一些屬性，實現了初步的手機網頁適配。</p>
<h3 id="Viewport">Viewport</h3><p>手機瀏覽器是把頁面放在一個虛擬窗口（即 <code>viewport</code>）中，用戶可以通過平移和縮放來看網頁的不同部分。</p>
<p>通過 <code>viewport</code> 我們能對頁面的一些縮放進行手機適配。</p>
<p>我們所需要做的僅是在 <code>head</code> 中插入一個 <code>meta</code> 標籤，命名爲 <code>viewport</code>，然後定義好其 <code>content</code>。</p>
<p><code>content</code> 的語法如下：</p>
<h4 id="width">width</h4><p>控制 <code>viewport</code> 的寬度，可以指定一個值或者特殊的值，如 <code>device-width</code> 爲設備寬度。</p>
<h4 id="height">height</h4><p>與 <code>width</code> 相對應，指定高度</p>
<h4 id="initial-scale">initial-scale</h4><p>初始縮放，即頁面初始縮放程度。這是一個浮點值，是頁面大小的一個乘數。例如，如果你設置初始縮放爲 <code>1.0</code>，那麼頁面在展現的時候就會以分辨率的1:1來展現。如果你設置爲<code>2.0</code>，那麼這個頁面就會放大爲2倍。</p>
<h4 id="maximum-scale">maximum-scale</h4><p>最大放大倍數。</p>
<h4 id="user-scaleble">user-scaleble</h4><p>用戶調整縮放，即用戶是否能改變頁面縮放程度。如果爲 <code>yes</code> 即爲可以， <code>no</code> 爲不可以。</p>
<h2 id="Cheerio模塊*">Cheerio模塊*</h2><p>由於 <strong>XPlan</strong> 的後端是基於 <code>node.js</code> 構架的，所以 <strong>cheerio</strong> 模塊是一個 <code>node.js</code> 專有的模塊。</p>
<p>它的作用是將一段HTML代碼轉換爲一棵DOM元素樹。</p>
<p>在其官網上是這麼詮釋的：爲服務端定製的快速、靈活、輕量級實現的 jQuery 內核。通常熟悉 jQuery 使用的開發者應該會對其使用方法比較熟悉。</p>
<p>所以在我們做接下去適配修改的之前，我們需要將我們剛纔生成的完整HTML代碼 轉換爲一棵我們可以操作的DOM元素樹。</p>
<figure class="highlight lasso"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> cheerio = <span class="keyword">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line">$ = cheerio<span class="built_in">.</span>load(<span class="attribute">...</span>);</span><br></pre></td></tr></table></figure>
<p>這時我們便能以熟悉的jQuery模式對其進行操作了，如：</p>
<figure class="highlight elixir"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"p"</span>).html(<span class="string">"hello foo!"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Bootstrap">Bootstrap</h2><p>Bootstrap是Twitter推出的一個開源的用於前端開發的工具包。它有一個非常好的響應式的頁面風格，使其在個尺寸屏幕上表現良好。</p>
<p>爲了能更好適應屏幕，我們決定採用其自帶的柵格系統，於是剛纔的頁面模板就有了新的變化：</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>新聞內頁<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">article</span> <span class="attribute">class</span>=<span class="value">"container"</span> <span class="attribute">id</span>=<span class="value">"_xplan-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"vid_wz"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先最外框的 <code>container</code>，用其包裹的元素將實現居中對齊。在不同的媒體查詢閾值範圍內都爲 <code>container</code> 設置了 <code>width</code>，用以匹配柵格系統。</p>
<p><code>row</code> 是一行柵格系統的外包元素。一行可以有12個柵格。</p>
<p>以 <code>.col-md-</code> 開頭的柵格的最大 <code>container</code> 寬度爲970，最大列寬爲78，並能自適應屏幕。</p>
<h2 id="細節處理">細節處理</h2><p>在完成了以上操作以後，我們將對各元素進行微調處理。</p>
<p>好在在手機瀏覽器或者 <code>WebView</code> 中，對各種字體的設置不是非常敏感，所以我們仍然可以不處理一些關於字體變更的設置，以減輕開髮量。</p>
<p>這裏距幾個微調的例子。</p>
<h3 id="&lt;img_/&gt;">&lt;img /&gt;</h3><p>在新聞當中，圖片充當的基本上是新聞照片的角色，在手機當中以單行出現爲佳。</p>
<p>而 Bootstrap 當中本身就有元素類型來讓圖片元素響應屏幕寬度，並可以加上圓角邊框。</p>
<p>所以我們需要做的就是爲所有圖片加上響應的類型：</p>
<figure class="highlight elixir"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"img"</span>).addClass(<span class="string">"img-thumbnail"</span>);</span><br><span class="line"><span class="variable">$(</span><span class="string">"img"</span>).addClass(<span class="string">"img-responsive"</span>);</span><br><span class="line"><span class="variable">$(</span><span class="string">"img"</span>).removeAttr(<span class="string">"style"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 最後的一個移除 <code>img</code> 元素自帶的 <code>style</code> 屬性是因爲在文章發佈的時候，有可能會被富文本編輯器自動加上一些寬高、邊框等信息。爲了統一所有圖片風格以及讓響應式生效，需要將其 <code>style</code> 屬性全部移除。</p>
</blockquote>
<p>下面是是適配前與適配後的對比：</p>
<p><img src="./xplan-news-2.jpg" alt="適配前"><br><img src="./xplan-news-1.jpg" alt="適配後"></p>
<h3 id="&lt;table&gt;&lt;/table&gt;">&lt;table&gt;&lt;/table&gt;</h3><p>對於 <code>table</code> 元素也需要對它進行自適配，不然很有可能會溢出屏幕，使其多出了一個橫向的滾動條。</p>
<figure class="highlight elixir"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"table"</span>).removeAttr(<span class="string">"style"</span>);</span><br><span class="line"><span class="variable">$(</span><span class="string">"table"</span>).removeAttr(<span class="string">"border"</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$(</span><span class="string">"table"</span>).addClass(<span class="string">"table"</span>);</span><br><span class="line"><span class="variable">$(</span><span class="string">"table"</span>).addClass(<span class="string">"table-bordered"</span>);</span><br><span class="line"><span class="variable">$(</span><span class="string">"table"</span>).addClass(<span class="string">"table-striped"</span>);</span><br></pre></td></tr></table></figure>
<p>上面兩句是移除 <code>table</code> 的原有的一些風格信息以及屬性。後面是爲其加上 Bootstrap 特有的 <code>table</code> 類型。</p>
<p>當然，更多的 <code>table</code> 元素還需要其它更多操作。不過就目前爲止，<strong>XPlan</strong> 還沒有着手關於 <code>table</code> 的更深一層容錯處理。不過這裏可以提供一個思路。</p>
<p>比如說 <a href="http://www.cst.zju.edu.cn/index.php?c=Index&amp;a=detail&amp;catid=72&amp;id=1885" target="_blank" rel="external">這篇文章中</a>，不知道是誰給的在線富文本編輯器勇氣，使其下面幾張圖片都各自被一個 <code>table</code> 及其子元素所包含。更有甚者，有一篇文章的一個段落被一個 <code>table</code> 所包容，並且在其左側還有一個看不見的 <code>td</code> 元素。</p>
<p>我們可以提供的思路就是如果一個 <code>table</code> 只有一行一列就直接將其內容取出並刪除該 <code>table</code> 。</p>
<h3 id="&lt;a_/&gt;">&lt;a /&gt;</h3><p>超鏈接元素是一個新聞與用戶互動的比較重要的元素之一。我們需要保持其美觀性。</p>
<p>舉幾個例子來說，我們可以將超鏈接以一個類按鈕的形式出現：</p>
<figure class="highlight smalltalk"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$(</span><span class="comment">"a"</span>).removeAttr(<span class="comment">"style"</span>);</span><br><span class="line"><span class="char">$(</span><span class="comment">"a"</span>).addClass(<span class="comment">"btn btn-default btn-xs btn-info"</span>);</span><br></pre></td></tr></table></figure>
<p>然後我們甚至可以對其做一些細微的詞彙修改。</p>
<p>比如當新聞發佈者上傳了一個附件然後不負責任地直接將文件名貼上的時候，我們可以貼心地將其顯示文字改爲“下載附件”。</p>
<p>再比如發佈者直接以URL形式顯示一個超鏈接的時候，我們可以貼心地將其改變爲“打開鏈接”等等。</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).html().match(<span class="regexp">/.*\.(doc|xls|ppt|docx|xlsx|pptx)/</span>)) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).html(<span class="string">"&lt;i class='glyphicon glyphicon-paperclip'&gt;&lt;/i&gt; 下載附件"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).removeClass(<span class="string">"btn-info"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"btn-warning"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>($(<span class="keyword">this</span>).html().match(<span class="regexp">/http.*\/\/.*/</span>)) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).html(<span class="string">"&lt;i class='glyphicon glyphicon-flag'&gt;&lt;/i&gt; 打開鏈接"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).removeClass(<span class="string">"btn-info"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"btn-warning"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然後我們再處理幾個由於誤操作而增加的錯誤鏈接，如在經上面操作後，還存在着url與顯示內容相關的超鏈接可以直接取消，如這類：</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">讓我們蕩<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"起雙槳"</span>&gt;</span>起雙槳<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="結束語">結束語</h2><p>至此，當下版本的 <strong>XPlan</strong> 的新聞爬蟲手機屏幕適配基本完成。其中當然還存在着一些細節處理和顯示錯誤處理的不足，但是已經定下了基本的適配思路。</p>
<p>我們還在探索更好的適配方法，而當下的適配形式暫時已經可以滿足了我們項目的需求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p><strong>XPlan</strong> 是一個“基於校園強關係的社交應用”的開發代號。其中有一個功能是從學校網站上通過網絡爬蟲（Web Crawler）形式將學校新聞抓取到XPlan自身的數據庫當中。</p>
<p>而這裏出現的一]]>
    </summary>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="XPlan" scheme="http://xcoder.in/tags/XPlan/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TopCoder SRM 589 DIV 2]]></title>
    <link href="http://xcoder.in/2013/08/31/srm-589-div2/"/>
    <id>http://xcoder.in/2013/08/31/srm-589-div2/</id>
    <published>2013-08-30T16:00:00.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　好久沒擼 <strong>TC</strong> 了，手都生了。前兩天剛折騰好 <strong>LinuxMint</strong> + <strong>Cinnamon</strong>，順便手賤把 <strong>TC</strong> 環境配好了。</p>
<p>　　隨便進去扯了一套最新的 <strong>SRM</strong> 來搞，全跑完之後才發現原來這場比賽還處於 <strong>System Running</strong> 階段。於是知道了比賽一結束還在 <strong>Running</strong> 的時候你就已經可以自己拉出來做了。小綠名大家不要笑。</p>
<!-- 我是小小分割符 -->
<h2 id="Summary">Summary</h2><p>　　這次 <strong>DIV 2</strong> 的難度一般，一道簽到題加兩道普通的 <strong>DP</strong>。</p>
<p>　　<a href="https://github.com/XadillaX/xadillax-topcoder/tree/master/code/SRM589-DIV2" target="_blank" rel="external">Code on GitHub</a>.</p>
<h2 id="250pt_-_Goose_Tattarrattat">250pt - Goose Tattarrattat</h2><p>題意很簡單，就是給你一個字符串，問你最少改變多少字符讓字符串所有字符都一樣。</p>
<p>簽到題，找最多的字符跟總長度一減就OK了。</p>
<figure class="highlight cpp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SIZE(x) ((int)(x.size()))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LENGTH(x) ((int)(x.length()))</span></span><br><span class="line"><span class="keyword">class</span> GooseTattarrattatDiv2 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="built_in">string</span> S)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GooseTattarrattatDiv2::getmin(<span class="built_in">string</span> S)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> maxsame = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(S); i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	mp[S[i]]++;</span><br><span class="line">    	maxsame = max(maxsame, mp[S[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> LENGTH(S) - maxsame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="500pt_-_Gears">500pt - Gears</h2><p>有 <strong><em>N</em></strong> 個齒輪圍成一圈，相鄰兩個齒輪要反方向轉才能正常運轉不卡到其它輪子。你要從中間拿掉幾個齒輪（留空了就不影響其左邊的左邊的齒輪），問最少拿掉幾個使得所有齒輪能正常轉。</p>
<p>我們建兩個二維 <strong><em>dp</em></strong> 數組，或者一個三維 <strong><em>dp</em></strong> 數組：</p>
<figure class="highlight markdown"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">0|1</span>][<span class="link_label">0|1</span>]</span><br></pre></td></tr></table></figure>
<p>第一維 <code>i</code> 代表當前是第 <code>i</code> 個齒輪。第二維若是 <code>0</code> 則表示這個齒輪拿走，若是 <code>1</code> 代表留下。第三維若是 <code>0</code> 則代表第一個齒輪拿走，<code>1</code> 代表第一個齒輪留下。整個數組的每個元素就代表該齒輪留下或者拿走且第一個齒輪是留下或者拿走的情況下的最少拿走齒輪數。</p>
<p>所以我們能得到幾個狀態轉移方程：</p>
<blockquote>
<h3 id="第一個齒輪">第一個齒輪</h3></blockquote>
<figure class="highlight markdown"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">0</span>][<span class="link_label">0</span>] = 1;</span><br><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">0</span>][<span class="link_label">1</span>] = INF;</span><br><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">1</span>][<span class="link_label">1</span>] = 0;</span><br><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">1</span>][<span class="link_label">0</span>] = INF;</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="第二個齒輪">第二個齒輪</h3><p>如果與第一個同向那麼就有了一留一走或者兩個都走的情況。否則就是四種情況都可以。</p>
</blockquote>
<figure class="highlight cpp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(與第一個齒輪同向)</span><br><span class="line">&#123;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="之後的所有齒輪">之後的所有齒輪</h3><p>若該齒輪與前一個齒輪方向相同 ，那麼該齒輪留下的時候，前一個齒輪必須得走，那麼就是 <code>dp[i - 1][0][?]</code>;該齒輪走的時候，前一個齒輪可走可留，就是 <code>dp[i - 1][0|1][?] + 1</code> 的稍微小一點那個。</p>
<p>若方向不相同 ，那麼就是該齒輪留下的時候，前一個齒輪也可以留下。</p>
</blockquote>
<figure class="highlight accesslog"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if(與前一個齒輪同向)</span><br><span class="line">&#123;</span><br><span class="line">    dp<span class="string">[i]</span><span class="string">[1]</span><span class="string">[0]</span> = dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[0]</span>;</span><br><span class="line">    dp<span class="string">[i]</span><span class="string">[1]</span><span class="string">[1]</span> = dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[1]</span>;</span><br><span class="line"></span><br><span class="line">    dp<span class="string">[i]</span><span class="string">[0]</span><span class="string">[0]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[0]</span>, dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[0]</span>) + <span class="number">1</span>;</span><br><span class="line">    dp<span class="string">[i]</span><span class="string">[0]</span><span class="string">[1]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[1]</span>, dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[0]</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">    dp <span class="string">[i]</span><span class="string">[1]</span><span class="string">[0]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[0]</span>, dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[0]</span>);</span><br><span class="line">    dp <span class="string">[i]</span><span class="string">[1]</span><span class="string">[1]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[1]</span>, dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[1]</span>);</span><br><span class="line"></span><br><span class="line">    dp <span class="string">[i]</span><span class="string">[0]</span><span class="string">[0]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[0]</span>, dp<span class="string">[i - 1]</span><span class="string">[0]</span><span class="string">[0]</span>) + <span class="number">1</span>;</span><br><span class="line">    dp <span class="string">[i]</span><span class="string">[0]</span><span class="string">[1]</span> = min(dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[1]</span>, dp<span class="string">[i - 1]</span><span class="string">[1]</span><span class="string">[1]</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後若最後一個齒輪與第一個齒輪同向，那麼在 <code>dp[i - 1][0][0]</code>、<code>dp[i - 1][0][1]</code>、<code>dp[i - 1][1][0]</code> 中挑一個。若不同向，那麼多了個 <code>dp[i - 1][1][1]</code> 這個選擇。</p>
<p>下面就是代碼了：</p>
<figure class="highlight cpp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GearsDiv2 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="built_in">string</span> Directions)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GearsDiv2::getmin(<span class="built_in">string</span> Directions)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(Directions); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">10000000</span>;</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">10000000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Directions[i] == Directions[i - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">                dp[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">10000000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">                dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(Directions[i] == Directions[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]) + <span class="number">1</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]) + <span class="number">1</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">int</span> mi = LENGTH(Directions) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Directions[mi] == Directions[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        ans = min(dp[mi][<span class="number">0</span>][<span class="number">0</span>], min(dp[mi][<span class="number">1</span>][<span class="number">0</span>], dp[mi][<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = min(min(dp[mi][<span class="number">0</span>][<span class="number">0</span>], dp[mi][<span class="number">1</span>][<span class="number">1</span>]), min(dp[mi][<span class="number">0</span>][<span class="number">1</span>], dp[mi][<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1000pt_-_Flipping_Bits">1000pt - Flipping Bits</h2><p>給你一個 <strong>01串</strong> 與一個正整數 <strong><em>M</em></strong>。<strong>01串</strong> 有如下三種操作:</p>
<ul>
<li>隨便反轉一位（0 -&gt; 1, 1 -&gt; 0）。</li>
<li>將開頭 <code>k * M</code> 位反轉。k 可以是任何正整數。</li>
<li>將末尾 <code>k * M</code> 位反轉。k 可以是任何正整數。</li>
</ul>
<p>問最少需要幾步將整個字符串變成都是 <code>1</code>。</p>
<p>這又是一個 <strong>DP</strong> 的題目。</p>
<p>我們先設有 <strong><em>G</em></strong> 組，一組 <strong><em>M</em></strong> 個 <code>01字符</code>。那麼就能有</p>
<figure class="highlight markdown"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp1[<span class="link_label">i</span>][<span class="link_reference">0|1</span>]</span><br><span class="line">dp2[<span class="link_label">i</span>][<span class="link_reference">0|1</span>]</span><br></pre></td></tr></table></figure>
<p>其中 <code>i</code> 代表第 <code>i</code> 組，第二維如果是 <code>0</code> 就代表這一組採用一位位反轉的操作將這組全變成 <code>1</code>，如果是 <code>1</code> 則將整組全部反轉再採用一位位反轉的操作將這組全變成 <code>1</code> 。至於 <code>dp1</code> 和 <code>dp2</code> 則代表從頭到尾和從尾到頭。</p>
<p>由於只有 <code>0</code> 和 <code>1</code> 反轉，那麼一組反轉兩次就能還原原狀——這是一個非常重要的性質。</p>
<p>如果某一組採用<strong>整組反轉</strong>的操作，若前一組也是<strong>整組反轉</strong>，那麼就相當於操作次數不變，只是將前一組的反轉範圍延續到這一組；若前一組是<strong>非整組反轉</strong>，那麼就相當於從頭到這一組反轉之後，前面的所有組再反轉回去——相當於是多了兩次操作。於是就有了（先只拿 <code>dp1</code> 作爲例子）：</p>
<figure class="highlight markdown"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp1[<span class="link_label">i</span>][<span class="link_reference">1</span>] = min(</span><br><span class="line"><span class="code">    dp[i - 1][0] + 這一組1的數量 + 2,</span></span><br><span class="line"><span class="code">    dp[i - 1][1] + 這一組1的數量 </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>如果某一組採用<strong>非整組反轉</strong>，那麼操作次數就是前一組的<strong>整組反轉</strong>或者<strong>非整組反轉</strong>的操作次數加上這一組 <code>0</code> 的數量：</p>
<figure class="highlight markdown"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp1[<span class="link_label">i</span>][<span class="link_reference">0</span>] = min(</span><br><span class="line"><span class="code">    dp[i - 1][0] + 這一組0的數量,</span></span><br><span class="line"><span class="code">    dp[i - 1][0] + 這一組0的數量</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>用上面的轉移方程把正反向都求了一遍之後，我們就可以求總答案了，總答案就是我們枚舉中間只有<strong>操作1</strong>的段的首尾，加上該中間段前部分的 <strong><em>dp</em></strong> 答案和其後部分的 <strong><em>dp</em></strong> 答案，取出最小值就是了。</p>
<figure class="highlight cpp"><figcaption><span>cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> FlippingBitsDiv2 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; S, <span class="keyword">int</span> M)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> group;</span><br><span class="line">    <span class="keyword">int</span> tn1[<span class="number">2600</span>], tnsum1[<span class="number">2600</span>];</span><br><span class="line">    <span class="keyword">int</span> tn2[<span class="number">2600</span>], tnsum2[<span class="number">2600</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dp1[<span class="number">2600</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> dp2[<span class="number">2600</span>][<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calcsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tot = tnsum1[r] - tnsum1[l - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FlippingBitsDiv2::getmin(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; S, <span class="keyword">int</span> M)</span><br><span class="line">&#123;</span><br><span class="line">    str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE(S); i++) str += S[i];</span><br><span class="line">    group = LENGTH(str) / M;</span><br><span class="line">    ZERO(tn1);</span><br><span class="line">    ZERO(tn2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// init.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; group; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op = i * M;</span><br><span class="line">        <span class="keyword">int</span> ed = op + M;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = op; j &lt; ed; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j] == <span class="string">'0'</span>) tn1[i]++, tn2[group - i - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp1[i][<span class="number">0</span>] = <span class="number">100000</span>;</span><br><span class="line">        dp1[i][<span class="number">1</span>] = <span class="number">100000</span>;</span><br><span class="line">        dp2[i][<span class="number">0</span>] = <span class="number">100000</span>;</span><br><span class="line">        dp2[i][<span class="number">1</span>] = <span class="number">100000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// tnsum</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; group; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) tnsum1[<span class="number">0</span>] = tn1[<span class="number">0</span>], tnsum2[<span class="number">0</span>] = tn2[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tnsum1[i] = tnsum1[i - <span class="number">1</span>] + tn1[i];</span><br><span class="line">            tnsum2[i] = tnsum2[i - <span class="number">1</span>] + tn2[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= group; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dp1[i][<span class="number">0</span>] = dp1[i][<span class="number">1</span>] = dp2[i][<span class="number">0</span>] = dp2[i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// head -&gt; tail</span></span><br><span class="line">            dp1[i][<span class="number">0</span>] = tn1[i - <span class="number">1</span>];</span><br><span class="line">            dp1[i][<span class="number">1</span>] = <span class="number">1</span> + (M - tn1[i - <span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// tail -&gt; head</span></span><br><span class="line">            dp2[i][<span class="number">0</span>] = tn2[i - <span class="number">1</span>];</span><br><span class="line">            dp2[i][<span class="number">1</span>] = <span class="number">1</span> + (M - tn2[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// head -&gt; tail</span></span><br><span class="line">            dp1[i][<span class="number">0</span>] = min(</span><br><span class="line">                dp1[i - <span class="number">1</span>][<span class="number">0</span>] + tn1[i - <span class="number">1</span>],</span><br><span class="line">                dp1[i - <span class="number">1</span>][<span class="number">1</span>] + tn1[i - <span class="number">1</span>]</span><br><span class="line">            );</span><br><span class="line">            dp1[i][<span class="number">1</span>] = min(</span><br><span class="line">                dp1[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">2</span> + (M - tn1[i - <span class="number">1</span>]),</span><br><span class="line">                dp1[i - <span class="number">1</span>][<span class="number">1</span>] + (M - tn1[i - <span class="number">1</span>])</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// tail -&gt; head</span></span><br><span class="line">            dp2[i][<span class="number">0</span>] = min(</span><br><span class="line">                dp2[i - <span class="number">1</span>][<span class="number">0</span>] + tn2[i - <span class="number">1</span>],</span><br><span class="line">                dp2[i - <span class="number">1</span>][<span class="number">1</span>] + tn2[i - <span class="number">1</span>]</span><br><span class="line">            );</span><br><span class="line">            dp2[i][<span class="number">1</span>] = min(</span><br><span class="line">                dp2[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">2</span> + (M - tn2[i - <span class="number">1</span>]),</span><br><span class="line">                dp2[i - <span class="number">1</span>][<span class="number">1</span>] + (M - tn2[i - <span class="number">1</span>])</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> minans = <span class="number">100000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= group; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= group - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> zzl = i;</span><br><span class="line">            <span class="keyword">int</span> zzr = group - j - <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            minans = min(minans,</span><br><span class="line">                min(dp1[i][<span class="number">0</span>], dp1[i][<span class="number">1</span>]) +</span><br><span class="line">                min(dp2[j][<span class="number">0</span>], dp2[j][<span class="number">1</span>]) +</span><br><span class="line">                calcsum(zzl, zzr)</span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> minans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　好久沒擼 <strong>TC</strong> 了，手都生了。前兩天剛折騰好 <strong>LinuxMint</strong> + <strong>Cinnamon</strong>，順便手賤把 <strong>TC</strong> 環境配好了。</p>
<p>]]>
    </summary>
    
      <category term="SRM" scheme="http://xcoder.in/tags/SRM/"/>
    
      <category term="TopCoder" scheme="http://xcoder.in/tags/TopCoder/"/>
    
      <category term="Programming" scheme="http://xcoder.in/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一起擼Node.JS（壹）——基本語法和類型]]></title>
    <link href="http://xcoder.in/2013/08/16/node-4-base/"/>
    <id>http://xcoder.in/2013/08/16/node-4-base/</id>
    <published>2013-08-15T16:00:00.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Node.js</strong> 的基礎是 <strong>JavaScript</strong> 這門 <strong><em>腳本語言</em></strong>。而大多數的腳本語言一個共同的特點就是“<a href="http://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1#.E5.BC.B7.E5.9E.8B.E5.88.A5.E5.92.8C.E5.BC.B1.E5.9E.8B.E5.88.A5" target="_blank" rel="external">弱類型</a>”。</p>
<p>　　不同於 <strong>PHP</strong> 的是，<strong>PHP</strong> 就是是有了新變量也無需申明，而 <strong>JavaScript</strong> 則還是需要 <code>var</code> 來申明一下的。而這個 <code>var</code> 涵蓋了 <strong>C++</strong> 中的<code>int</code>、<code>string</code>、<code>char</code>等一切類型的含義，甚至是 <code>function</code>。</p>
<p>　　本篇以及後篇的所有內容都是在 <strong>Linux</strong> 或者 <strong>Cygwin</strong> 下用 <strong>vim</strong> 進行編輯（若不是則請自行轉變成你自己的方法），然後在命令行下進行查看結果的。</p>
<!-- 我是小小分割符 -->
<h2 id="基本語法">基本語法</h2><h3 id="變量聲明">變量聲明</h3><p>在 <strong>C/C++</strong> 中，我們這麼聲明變量的：</p>
<figure class="highlight cpp"><figcaption><span>c++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">float</span> c = <span class="number">1.0f</span>;</span><br><span class="line"><span class="keyword">void</span> (*d)() = foo;  <span class="comment">///&lt; 忘了是不是這麼寫的了，總之是函數指針</span></span><br></pre></td></tr></table></figure>
<p>而在 <strong>Node.js</strong> 中則是這樣的：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">var</span> d = foo;</span><br></pre></td></tr></table></figure>
<p>所以，無論是什麼類型的變量，在 <strong>Node.js</strong> 中都是以一個 <code>var</code> 來解決的。</p>
<h3 id="循環語句">循環語句</h3><h4 id="for…i">for…i</h4><p>這個循環語句基本上跟 <strong>C/C++</strong> 一樣，都是</p>
<figure class="highlight cpp"><figcaption><span>c++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; foo; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而鑑於 <strong>Node.js</strong> 是弱類型，所以只需要：</p>
<figure class="highlight matlab"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; foo; <span class="built_in">i</span>++) <span class="cell">&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="for…in">for…in</h4><p>這是一種後有型的循環語句，類似於 <strong>PHP</strong> 的 <code>foreach</code>。</p>
<p>比如我們有一個 <strong>JSON對象</strong> 如下：</p>
<figure class="highlight kotlin"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> foo</span> = &#123;</span><br><span class="line">    <span class="string">"hello"</span>     : <span class="string">"world"</span>,</span><br><span class="line">    <span class="string">"node"</span>      : <span class="string">"js"</span>,</span><br><span class="line">    <span class="string">"blahblah"</span>  : <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這個時候我們就可以用 <code>for...in</code> 來循環遍歷了：</p>
<figure class="highlight processing"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="variable">key</span> in foo) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="variable">key</span> + <span class="string">": "</span> + foo[<span class="variable">key</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們如果在命令行中打入下面的命令：</p>
<figure class="highlight crmsh"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"> </span><span class="title">foo</span>.js</span><br></pre></td></tr></table></figure>
<p>屏幕上就會顯示下面的內容了：</p>
<figure class="highlight http"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hello</span>: <span class="string">world</span></span><br><span class="line"><span class="attribute">node</span>: <span class="string">js</span></span><br><span class="line"><span class="attribute">blahblah</span>: <span class="string">bar</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：由上可知，<code>for...in</code> 語句是用來遍歷 <strong>JSON對象</strong>、<strong>數組</strong>、<strong>對象</strong>的鍵名的，而不提供鍵值的遍歷。如果要獲取鍵值，只能通過</p>
</blockquote>
<figure class="highlight fsharp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo<span class="annotation">[&lt;當前鍵名&gt;]</span></span><br></pre></td></tr></table></figure>
<p>的形式來獲取。這個跟 <strong>PHP</strong> 的 <code>foreach</code> 還是有一定區別的。</p>
<h4 id="while…do,_do…while">while…do, do…while</h4><p>這個就不多做解釋了，跟其它語言沒什麼大的區別，無非就是如果有變量聲明的話，需要用 <code>var</code> 就夠了。</p>
<h3 id="運算符">運算符</h3><h4 id="+,_-,_*,_/">+, -, *, /</h4><p>這幾個運算符也就這樣，要注意的是 <code>+</code>。它既可以作用於字符串，也可以作用於數值運算。弱類型語言雖然說類型是弱的，數字有時候可以以字符串的形態出現，字符串有時候可以用數值的形態出現，但是在必要的時候也還是要說一下它是什麼類型的，我們可以用下面的代碼去看看結果：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(a) + b);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>這裏的 <code>parseInt</code> 是 <strong>Node.js</strong> 的一個內置函數，作用是將一個字符串解析成 <code>int</code> 類型的變量。</p>
</blockquote>
<p>上面的代碼執行結果是</p>
<figure class="highlight cpp"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>第一個 <code>console.log</code> 結果是 <code>12</code>，由於 <code>a</code> 是字符串，所以 <code>b</code> 也被系統以字符串的姿態進行加操作，結果就是將兩個字符串黏連在一起就變成了 <code>12</code>。而第二個 <code>console.log</code> 結果是 <code>3</code>，是因爲我們將第一個 <code>a</code> 轉變爲了 <code>int</code> 類型，兩個 <code>int</code> 型的變量相加即數值相加，結果當然就是 <code>3</code> 了。</p>
<h4 id="==,_===,_!=,_!==">==, ===, !=, !==</h4><p>這裏有一點要解釋，當這個邏輯運算符長度爲 <code>2</code> 的時候（<code>==</code>, <code>!=</code>），只是判斷外在的值是不是一樣的，而不會判斷類型。如</p>
<figure class="highlight autohotkey"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="literal">a</span> = <span class="number">1</span>, b = <span class="string">"1"</span><span class="comment">;</span></span><br><span class="line">console.log(<span class="literal">a</span> == b)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>它輸出的結果就是 <code>true</code>。但是如果我們在中間判斷的時候再加上一個等號，那麼就是嚴格判斷了，需要類型和值都一樣的時候纔會是 <code>true</code>，否則就是 <code>false</code>。也就是說</p>
<figure class="highlight autohotkey"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="literal">a</span> = <span class="number">1</span>, b = <span class="string">"1"</span><span class="comment">;</span></span><br><span class="line">console.log(<span class="literal">a</span> === b)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>的時候，返回的結果就是 <code>false</code> 了，因爲 <code>a</code> 是 <code>int</code> 型的，而 <code>b</code> 則是字符串。</p>
<blockquote>
<p>順帶着就把條件語句講了吧，其實這裏的 <code>if</code> 跟別的語言沒什麼兩樣，就是幾個邏輯運算符兩個等號三個等號的問題。所以就不多做累述了。</p>
</blockquote>
<h4 id="typeof">typeof</h4><p>這裏我姑且把它當成是一個運算符而不是函數了。</p>
<p>這個運算符的作用是判斷一個變量的類型，會返回一個字符串，即類型名，具體的執行下面的代碼就知道了：</p>
<figure class="highlight stata"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = 0;</span><br><span class="line"><span class="keyword">var</span> b = '噓~蛋花湯在睡覺。';</span><br><span class="line"><span class="keyword">var</span> c = 1.0;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">d</span> = foo;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">e</span> = &#123; <span class="string">"a"</span> : a &#125;;</span><br><span class="line"><span class="keyword">var</span> f = [ 1, 2, 3 ];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">g</span> = null;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">h</span> = undefined;</span><br><span class="line"></span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> a);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> b);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> c);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> <span class="keyword">d</span>);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> <span class="keyword">e</span>);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> f);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> <span class="keyword">g</span>);</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">typeof</span> <span class="keyword">h</span>);</span><br></pre></td></tr></table></figure>
<p>這裏的執行結果就將會是：</p>
<figure class="highlight scala"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">number</span><br><span class="line">string</span><br><span class="line">number</span><br><span class="line">function</span><br><span class="line"><span class="class"><span class="keyword">object</span></span><br><span class="line"></span><span class="class"><span class="keyword">object</span></span><br><span class="line"></span><span class="class"><span class="keyword">object</span></span><br><span class="line"></span>undefined</span><br></pre></td></tr></table></figure>
<h3 id="null,_undefined,_NaN">null, undefined, NaN</h3><p>在 <strong>JavaScript</strong> 中，有三個特殊的值，如標題所示。其中第一個大家可能都比較熟悉吧，<strong>C/C++</strong> 裏面也有，不過是大寫的，其本質就是一個</p>
<figure class="highlight stylus"><figcaption><span>c++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine NULL <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>而在 <strong>JavaScript</strong> 中，這三個值所代表的意義都不同。</p>
<h4 id="null">null</h4><p><code>null</code> 是一種特殊的 <strong>object</strong>，大致的意思就是空。比如說：</p>
<figure class="highlight kotlin"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> a</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>大家都能看懂，就不多做解釋了。但是跟 <strong>C/C++</strong> 不同的是，這個 <code>null</code> 跟 <code>0</code> 不相等。</p>
<h4 id="undefined">undefined</h4><p>這個東西的意思就是說這個變量未聲明。爲了能夠更好地區分 <code>null</code>，我們的樣例代碼如下寫：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="string">"foo"</span>       : <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">"foo"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">"bar"</span>]);</span><br></pre></td></tr></table></figure>
<p>上面的代碼中，我們讓 <code>a[&quot;foo&quot;]</code> 的值爲空，即 <code>null</code>。而壓根沒有聲明 <code>a[&quot;bar&quot;]</code> 這個東西，它連空都不是。輸出的結果大家都差不多應該猜到了：</p>
<figure class="highlight actionscript"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="NaN">NaN</h4><p>這是一個空的數值，是一個特殊的 <code>number</code>。它的全稱是 <code>Not a Number</code>。有點奇怪，大家可以理解爲 <strong>不是數字形態，或者數值出錯的 <code>number</code> 類型變量</strong>。</p>
<p>多在浮點型數值運算錯誤（如被0除）的情況下出現，甚至可以是用戶自己讓一個變量等於 <code>NaN</code> 以便返回一個錯誤值讓大家知道這個函數運算出錯了云云。</p>
<h3 id="小雜碎">小雜碎</h3><p>其它剩餘的語句也跟已存在的其它語言差不多，比如說 <code>break</code> 啊、<code>switch</code> 啊、<code>continue</code> 啊等等等等。</p>
<h2 id="變量類型">變量類型</h2><p>這一節主要講的是 <strong>JavaScript</strong> 對象，其它類型差不多一帶而過吧。</p>
<h3 id="基礎類型">基礎類型</h3><p><strong>Node.js</strong> 包含的基礎類型差不多有如下幾個：</p>
<ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>array</li>
</ul>
<p>其中前三種類型可以直接賦值，而 <code>array</code> 的賦值只是一個引用賦值而已，在新變量中改變某個值的話舊變量的值也會改變，直接可以試試下面的代碼：</p>
<figure class="highlight cpp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line">var bar = foo;</span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">console.<span class="built_in">log</span>(foo);</span><br></pre></td></tr></table></figure>
<p>它得出的結果是：</p>
<figure class="highlight json"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure>
<p>也就是說 <code>array</code> 要是複製出一個新的數組的話，不能用直接賦值的方法，而必須“<strong><a href="#深拷貝">深拷貝</a></strong>”。</p>
<p>這裏有必要講一下 <code>array</code> 的三種創建方法。</p>
<p>第一種：</p>
<figure class="highlight cpp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var dog = <span class="keyword">new</span> Array();</span><br><span class="line">dog[<span class="number">0</span>] = <span class="string">"噓~"</span>;</span><br><span class="line">dog[<span class="number">1</span>] = <span class="string">"蛋花湯"</span>;</span><br><span class="line">dog[<span class="number">2</span>] = <span class="string">"在睡覺"</span>;</span><br></pre></td></tr></table></figure>
<p>第二種：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="built_in">Array</span>( <span class="string">"噓~"</span>, <span class="string">"蛋花湯"</span>, <span class="string">"在睡覺"</span> );</span><br></pre></td></tr></table></figure>
<p>第四種：</p>
<figure class="highlight kotlin"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> dog</span> = [</span><br><span class="line">    <span class="string">"噓~"</span>,</span><br><span class="line">    <span class="string">"蛋花湯"</span>,</span><br><span class="line">    <span class="string">"在睡覺"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>我個人比較喜歡第三種寫法，比較簡潔。</p>
<h3 id="JSON對象">JSON對象</h3><p>這裏我把 <strong>JSON對象</strong> 單獨拎出來而不是把它歸類爲 <strong>JavaScript對象</strong>，如果覺得我有點誤人子弟就可以直接跳過這一節了。</p>
<p>本人對於 <strong>JSON對象</strong> 和 <strong>JavaScript</strong> 對象的區分放在 <strong>是否只用來存儲數據，而並非是一個類的實例化</strong>。其實 <strong>JSON</strong> 的本質便是 <strong>JavaScript Object Notation</strong>。</p>
<blockquote>
<p>更多有關 <strong><a href="http://zh.wikipedia.org/wiki/JSON" target="_blank" rel="external">JSON</a></strong> 的信息請自行百科。</p>
</blockquote>
<p>在 <strong>Node.js</strong> 中聲明一個 <strong>JSON對象</strong> 非常簡單：</p>
<figure class="highlight kotlin"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> dog</span> = &#123;</span><br><span class="line">    <span class="string">"pre"</span>       : <span class="string">"噓~"</span>,</span><br><span class="line">    <span class="string">"sub"</span>       : &#123;</span><br><span class="line">        <span class="string">"name"</span>  : <span class="string">"蛋花湯"</span>,</span><br><span class="line">        <span class="string">"act"</span>   : <span class="string">"在睡覺"</span>,</span><br><span class="line">        <span class="string">"time"</span>  : <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"suf"</span>       : [ <span class="string">"我說了"</span>, <span class="string">"它在睡覺"</span>, <span class="string">"就是在睡覺"</span> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有兩種方式能得到 <strong>JSON對象</strong> 中的某個鍵名的鍵值，第一種是用點連接，第二種是用中括號：</p>
<figure class="highlight css"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">dog</span><span class="class">.pre</span>;</span><br><span class="line"><span class="tag">dog</span><span class="attr_selector">["pre"]</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>試試看</strong>：現在你自己動手試試看，用 <code>for...in</code> 的形式遍歷一遍上面的 <code>JSON對象</code>。別忘了用上 <code>typeof</code> 喵~</p>
</blockquote>
<h3 id="類（對象）的基礎">類（對象）的基礎</h3><p>嚴格意義上來講，<strong>Node.js</strong> 的類不能算是類，其實它只是一個函數的集合體，加一些成員變量。它的本質其實是一個函數。</p>
<p>不過爲了通俗地講，我們接下去以及以後都將其稱爲“類”，實例化的叫“對象”。</p>
<p>因爲類有着很多 <strong>函數</strong> 的特性，或者說它的本質就是一個 <strong>函數</strong>，所以這裏面我們可能一不留神就順帶着把函數基礎給講了。</p>
<h4 id="類的聲明和實例化">類的聲明和實例化</h4><p>聲明一個類非常簡單，大家不要笑：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，我們已經寫好了一個 <code>foo</code> 類了。</p>
<blockquote>
<p>真的假的？！真的。</p>
</blockquote>
<p>不信？不信你可以接下去打一段代碼看看：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo();</span><br></pre></td></tr></table></figure>
<p>別看它是一個函數，如果以這樣的形式（<code>new</code>）寫出來，它就是這個類的實例化。</p>
<p>而這個所謂的 <code>foo()</code> 其實就是這個 <code>foo()</code> 類的構造函數。</p>
<h4 id="成員變量">成員變量</h4><p>成員變量有好兩種方法。</p>
<p>第一種就是在類的構造函數或者任何構造函數中使用 <code>this.&lt;變量名&gt;</code> 。你可以在任何時候聲明一個成員變量，在外部不影響使用，反正就算在還未聲明的時候使用它，也會有一個 <code>undefined</code> 來撐着。所以說這就是第一種方法：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：只有在加了 <code>this</code> 的時候纔是調用類的<strong>成員變量</strong>，否則只是函數內的一個局部變量而已。要分清楚有沒有 <code>this</code> 的時候變量的作用範圍。</p>
</blockquote>
<p>第二種方法就是在構造函數或者任何成員函數外部聲明，其格式是 <code>&lt;類名&gt;.prototype.&lt;變量名&gt;</code>：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.prototype.hello = <span class="string">"world"</span>;</span><br></pre></td></tr></table></figure>
<p>無聊上面哪種方法都是對成員變量的聲明，我們可以看看效果：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo();</span><br><span class="line"><span class="built_in">console</span>.log(bar.hello);</span><br></pre></td></tr></table></figure>
<p>甚至你可以這麼修改這個類：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.prototype.hello = <span class="string">"蛋花湯"</span>;</span><br></pre></td></tr></table></figure>
<p>然後再用上面的代碼輸出。</p>
<blockquote>
<p>想想看爲什麼輸出的還是 <code>world</code> 而不是 <code>蛋花湯</code>。</p>
</blockquote>
<h4 id="構造函數">構造函數</h4><p>我們之前說過了這個 <code>foo()</code> 實際上是一個 <strong>構造函數</strong>。那麼顯然我們可以給構造函數傳參數，所以就有了下面的代碼：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代碼2.1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(hello)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hello === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = <span class="string">"world"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們看到上面有一個奇葩的判斷 <code>if(hello === undefined)</code>，這個判斷有什麼用呢？第一種可能，就是開發者很蛋疼地特意傳進去一個 <code>undefined</code> 進去，這個時候它是 <code>undefined</code> 無可厚非。</p>
<p>還有一種情況。我們一開始就說了 <strong>JavaScript</strong> 是一門弱類型語言，其實不僅僅是弱類型，它的傳參數也非常不嚴謹。你可以多傳或者少傳（只要保證你多傳或者少傳的時候可以保證程序不出錯，或者邏輯不出錯），原則上都是可以的。多傳的參數會被自動忽略，而少傳的參數會以 <code>undefined</code> 補足。</p>
<p>看看下面的代碼就明白了：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上接代碼2.1</span></span><br><span class="line"><span class="keyword">var</span> bar1 = <span class="keyword">new</span> foo();</span><br><span class="line"><span class="keyword">var</span> bar2 = <span class="keyword">new</span> foo(<span class="string">"蛋花湯"</span>);</span><br></pre></td></tr></table></figure>
<p>請自行輸出一下兩個 <code>bar</code> 的 <code>hello</code> 變量，會發現一個是 <strong>world</strong> 一個是 <strong>蛋花湯</strong>。顯而易見，我們的第一個 <code>bar1</code> 在聲明的時候，被 <strong>Node.js</strong> 自動看成了：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar1 = <span class="keyword">new</span> foo(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure>
<p>所以就有了它是 <strong>world</strong> 一說。</p>
<p>還有就是在這個構造函數中，我們看到了傳進去的參數是 <code>hello</code> 而這個類中本來就有個成員變量就是 <code>this.hello</code>。不過我們之前說過了有 <code>this</code> 和沒 <code>this</code> 的時候作用域不同，那個參數只是作用於構造函數中，而加了 <code>this</code> 的那個則是成員變量。用一個 <code>this</code> 就馬上區分開來他們了，所以即使同名也沒關係。</p>
<h4 id="成員函數">成員函數</h4><h5 id="成員函數聲明">成員函數聲明</h5><p>成員函數的聲明跟成員變量的第二種聲明方法差不多，即 <code>&lt;類名&gt;.prototype.&lt;函數名&gt; = &lt;函數&gt;;</code></p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上接代碼2.1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHello</span><span class="params">(hello)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = hello;</span><br><span class="line">&#125;</span><br><span class="line">foo.prototype.setHello = setHello;</span><br><span class="line"></span><br><span class="line">bar1.setHello(<span class="string">"雞蛋餅"</span>);</span><br></pre></td></tr></table></figure>
<p>上面這段代碼顯而易見，我們實現了 <code>foo</code> 類的 <code>setHello</code> 函數，能通過它修改 <code>foo.hello</code> 的值。</p>
<p>但是這麼寫是不是有點麻煩？接下去我要講一個 <strong>JavaScript</strong> 函數重要的特性了。</p>
<h4 id="★_匿名函數">★ 匿名函數</h4><p>很多時候我們的某些函數只在一個地方被引用或者調用，那麼我們爲這個函數起一個名字就太不值了，沒必要，所以我們可以臨時寫好這個函數，直接讓引用它的人引用它，調用它的人調用它。所以函數可以省略函數名，如：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(hello)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至於怎麼引用或者調用呢？如果是上面的那個類需要引用的話，就是寫成這樣的：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.prototype.setHello = <span class="function"><span class="keyword">function</span><span class="params">(hello)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的寫法跟 <strong><a href="#成員函數聲明">2.3.3.1. 成員函數聲明</a></strong> 是一個效果的，而且省了很多的代碼量。而且實際上，基本上的類成員函數的聲明都是採用這種匿名函數的方式來聲明的。</p>
<p>至於說怎麼樣讓匿名函數被調用呢？這通常用於傳入一個只被某個函數調用的函數時這樣寫。</p>
<p>比如我們有一個函數的原型是：</p>
<figure class="highlight swift"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 我們將傳入a，b兩個變量，</span><br><span class="line"> * 在算出a+b的值後，交由func(num)</span><br><span class="line"> * 去進行輸出</span><br><span class="line"> */</span></span><br><span class="line">function sumab(a, b, <span class="func"><span class="keyword">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">c</span> = a + b;</span><br><span class="line">    <span class="func"><span class="keyword">func</span><span class="params">(a, b, <span class="built_in">c</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如我們有兩個版本的輸出函數，一個是中文輸出，一個是英文輸出，那麼如果不用匿名函數時候是這麼寫的：</p>
<figure class="highlight cpp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">zh</span><span class="params">(a, b, sum)</span> </span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(a + <span class="string">" + "</span> + b + <span class="string">" 的值是："</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">en</span><span class="params">(a, b, sum)</span> </span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(a + <span class="string">" plus "</span> + b + <span class="string">" is "</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumab(<span class="number">1</span>, <span class="number">2</span>, zh);</span><br><span class="line">sumab(<span class="number">3</span>, <span class="number">4</span>, en);</span><br></pre></td></tr></table></figure>
<p>執行一遍這段代碼，輸出的結果將會是：</p>
<figure class="highlight cpp"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> 的值是：<span class="number">3</span></span><br><span class="line"><span class="number">3</span> plus <span class="number">4</span> is <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>這樣的代碼如果採用匿名函數的形式則將會是：</p>
<figure class="highlight lisp"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sumab<span class="list">(<span class="number">1</span>, <span class="number">2</span>, function<span class="list">(<span class="keyword">a</span>, b, sum)</span> &#123;</span><br><span class="line">    console.log<span class="list">(<span class="keyword">a</span> + <span class="string">" + "</span> + b + <span class="string">" 的值是："</span> + sum)</span><span class="comment">;</span></span><br><span class="line">&#125;)</span><span class="comment">;</span></span><br><span class="line">sumab<span class="list">(<span class="number">3</span>, <span class="number">4</span>, function<span class="list">(<span class="keyword">a</span>, b, sum)</span> &#123;</span><br><span class="line">    console.log<span class="list">(<span class="keyword">a</span> + <span class="string">" plus "</span> + b + <span class="string">" is "</span> + sum)</span><span class="comment">;</span></span><br><span class="line">&#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>這種形式通常使用於回調函數。回調機制算是 <strong>Node.js</strong> 或者說 <strong>JavaScript</strong> 的精髓。在以後的篇章會做介紹。</p>
<h4 id="成員函數聲明的匿名函數聲明方式">成員函數聲明的匿名函數聲明方式</h4><p>雖然上一節講過了，不過還是再講一遍吧。</p>
<p>通常我們聲明類的成員函數時候都是用匿名函數來聲明的，因爲反正那個函數也就是這個類的一個成員函數而已，不會在其它地方被單獨引用或者調用，所以就有了下面的代碼：</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上接代碼2.1</span></span><br><span class="line">foo.prototype.setHello = <span class="function"><span class="keyword">function</span><span class="params">(hello)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣我們就使得 <code>foo</code> 類有了 <code>setHello</code> 這個函數了。</p>
<h4 id="類的隨意性">類的隨意性</h4><p>這個又是我胡扯的。所謂類的隨意性即 <strong>JavaScript</strong> 中你可以在任何地方修改你的類，這跟 <strong>Ruby</strong> 有着一定的相似之處。</p>
<p>比如說 <code>string</code> ，它其實也是一個類，有着諸如 <code>length</code> 這樣的成員變量，也有 <code>indexOf</code>、<code>substr</code> 等成員函數。但是萬一我們覺得這個 <code>string</code> 有些地方不完善，想加自己的方法，那麼可以在你想要的地方給它增加一個函數，比如：</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.sb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newstr = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> === <span class="number">0</span>) newstr += <span class="string">"s"</span>;</span><br><span class="line">        <span class="keyword">else</span> newstr += <span class="string">"b"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newstr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這個函數的意思就是填充一個字符串，使其變成 <code>sb</code> 的化身。</p>
<p>我們來測試一下：</p>
<figure class="highlight openscad"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">"噓~蛋花湯在睡覺。"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.sb());</span><br></pre></td></tr></table></figure>
<p>你將會得到這樣的結果：</p>
<figure class="highlight"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbsbsbsbs</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你跟你的電腦說“噓~蛋花湯在睡覺。”，你的電腦會罵你四次半傻逼。（趕快砸了它）</p>
</blockquote>
<h2 id="附">附</h2><h3 id="深拷貝">深拷貝</h3><p>所謂深拷貝就是自己新建一個數組或者對象，把源數組或者對象中的基礎類型變量值一個個手動拷過去，而不是隻把源數組或者對象的引用拿過來。所以這就涉及到了一個遞歸的調用什麼的。</p>
<p>下面是我實現的一個深拷貝函數，大家可以寫一個自己的然後加入到自己的 <strong>Node.js</strong> 知識庫中。</p>
<figure class="highlight actionscript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span><span class="params">(src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dest = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> src === <span class="string">"object"</span>) dest[key] = cloneObject(src[key]);</span><br><span class="line">        <span class="keyword">else</span> dest[key] = src[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="系統默認對象參考手冊">系統默認對象參考手冊</h3><ul>
<li><strong>字符串</strong>：<a href="http://www.w3school.com.cn/js/jsref_obj_string.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_string.asp</a></li>
<li><strong>數字</strong>: <a href="http://www.w3school.com.cn/js/jsref_obj_number.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_number.asp</a></li>
<li><strong>數組</strong>: <a href="http://www.w3school.com.cn/js/jsref_obj_array.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_array.asp</a></li>
<li><strong>布爾</strong>: <a href="http://www.w3school.com.cn/js/jsref_obj_boolean.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_boolean.asp</a></li>
<li><strong>日期</strong>: <a href="http://www.w3school.com.cn/js/jsref_obj_date.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_date.asp</a></li>
<li><strong>數學庫</strong>：<a href="http://www.w3school.com.cn/js/jsref_obj_math.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/jsref_obj_math.asp</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Node.js</strong> 的基礎是 <strong>JavaScript</strong> 這門 <strong><em>腳本語言</em></strong>。而大多數的腳本語言一個共同的特點就是“<a href="http://zh.wikiped]]>
    </summary>
    
      <category term="JavaScript" scheme="http://xcoder.in/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="一起擼Node.JS" scheme="http://xcoder.in/tags/%E4%B8%80%E8%B5%B7%E6%93%BCNode-JS/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一起擼Node.JS（負貳）——環境]]></title>
    <link href="http://xcoder.in/2013/08/15/node-2-environment-in-windows/"/>
    <id>http://xcoder.in/2013/08/15/node-2-environment-in-windows/</id>
    <published>2013-08-14T16:00:00.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　由於<a href="!--￼11--&gt;#linux-環境">Linux</a>中的環境搭建比較簡單，所以草草略過。</p>
<p>　　其實<a href="!--￼12--&gt;#windows-環境">Windows</a>下也不算麻煩，但是這裏會講一定量的別的環境的搭建。</p>
<!-- 我是小小分割符 -->
<h2 id="Linux_環境">Linux 環境</h2><p>講到這個就很簡單了，跟着下面的 <strong>bash</strong> 操作即可：</p>
<figure class="highlight crmsh"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/bin</span><br><span class="line">$ wget http://nodejs.org/dist/v0.<span class="number">00.00</span>/<span class="keyword">node</span><span class="identifier"></span><span class="title">-v0</span>.<span class="number">00.00</span>-linux-x00.tar.gz</span><br><span class="line">$ tar zxf <span class="keyword">node</span><span class="identifier"></span><span class="title">-v0</span>.<span class="number">00.00</span>-linux-x00.tar.gz</span><br><span class="line">$ cd <span class="keyword">node</span><span class="identifier"></span><span class="title">-v0</span>.<span class="number">00.00</span>-linux-x00</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中將上方的 <strong>v0.00.00</strong> 替換成 <strong>Node.js</strong> 最新的版本號，把 <strong>x00</strong> 替換成你自己電腦的位數。</p>
<p>也可以直接去官網 <a href="http://nodejs.org/download/" target="_blank" rel="external">http://nodejs.org/download/</a> 找到相應的地址。</p>
</blockquote>
<p>最後將其的連接加入到 <code>/usr/bin</code> 下即可。</p>
<figure class="highlight crmsh"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd bin</span><br><span class="line">$ ln <span class="keyword">node</span><span class="identifier"> </span><span class="title">/usr</span>/bin</span><br><span class="line">$ ln npm /usr/bin</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>： 該用 <code>sudo</code> 的地方就用 <code>sudo</code> 或者 <code>su</code> 。</p>
</blockquote>
<p>至此，<strong>Linux</strong> 下的 <strong>Node.js</strong> 環境基本搭建完畢。</p>
<h2 id="Windows_環境">Windows 環境</h2><h3 id="Cygwin_安裝和配置">Cygwin 安裝和配置</h3><p><strong><em>Cygwin</em></strong> 是一個在 <strong><em>Windows</em></strong> 平臺上運行的 <strong><em>Unix</em></strong> 模擬環境。對於學習 <strong><em>Unix/Linux</em></strong> 操作環境，或者從 <strong><em>Unix</em></strong> 到 <strong><em>Windows</em></strong> 的應用程序移植，或者進行某些特殊的開發工作，尤其是使用 <strong><em>GNU工具集</em></strong> 在 <strong><em>Windows</em></strong> 上進行嵌入式系統開發，非常有用。</p>
<h4 id="Cygwin_安裝">Cygwin 安裝</h4><p>我們先跑到 <strong>Cygwin</strong> 的官網上去把東西下來：</p>
<blockquote>
<p><a href="http://cygwin.com/install.html" target="_blank" rel="external">http://cygwin.com/install.html</a></p>
<blockquote>
<p>注意，最好下 <strong>x86</strong> 的包，因爲我們之後要講一個 <code>cyg-apt</code> 的腳本插件，這是一個能讓 <strong>Cygwin</strong> 能跟 <strong>Linux</strong> 一樣通過腳本從源安裝軟件包的腳本。爲了方便修改，我們將其下成 <strong>x86</strong> 的版本。</p>
</blockquote>
</blockquote>
<p>然後就是安裝步驟了。</p>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-1.png" alt="從網絡安裝"></center><br><center><small>[圖2.1]</small></center>

<p>到 <strong>[圖2.1]</strong> 這個步驟的時候，選擇默認的 <code>Install from Internet</code> 即可。</p>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-2.png" alt="選擇安裝路徑"></center><br><center><small>[圖2.2]</small></center>

<p>在 <strong>[圖2.2]</strong> 的時候選一個安裝路徑。</p>
<blockquote>
<p><strong>注意</strong>：儘可能讓這個安裝路徑簡單，而不要是類似於</p>
<p><code>c:\Program Files\blahblah</code></p>
<p>這樣的文件路徑。</p>
</blockquote>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-3.png" alt="本地包路徑"></center><br><center><small>[圖2.3]</small></center>

<p><strong>[圖2.3]</strong> 的時候選一個本地包的路徑，我這裏選的是 <code>e:\cygwin\tmp</code>。</p>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-4.png" alt="直連"></center><br><center><small>[圖2.4]</small></center>

<p><strong>[圖2.4]</strong> 選擇直接連接。</p>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-5.png" alt="163"></center><br><center><small>[圖2.5]</small></center>

<p>我們國內的用戶源還是選擇 <code>163</code> 的速度比較快。所以在 <strong>[圖2.5]</strong> 這一步的時候就直接選用默認的 <code>163</code> 的源了。如果不是默認的話，請選中它。</p>
<p>在 <strong>Select Package</strong> 也就是選擇預安裝的軟件的時候，把下列表中的軟件包勾選起來：</p>
<blockquote>
<ul>
<li><strong>wget</strong>: 在 <strong>Utils</strong> 中</li>
<li><strong>vim</strong>: 在 <strong>Editors</strong> 中</li>
<li><strong>gcc</strong>: 在 <strong>Devel</strong> 中</li>
<li><strong>gcc-g++</strong>: 在 <strong>Devel</strong> 中</li>
<li><strong>make</strong>: 在 <strong>Devel</strong> 中</li>
<li><strong>cmake</strong>: 在 <strong>Devel</strong> 中</li>
</ul>
</blockquote>
<p>若是這些選項已經被選起來了就不用再選了，如果沒有選起來則把它選中。</p>
<p>勾選好了之後就可以下一步安裝了，直至安裝完畢，你就可以打開你的 <strong>Cygwin</strong> 了。</p>
<center><img src="http://blog-xcoder-in.qiniudn.com/cygwin-install-6.png" alt="Cygwin"></center><br><center><small>[圖2.6]</small></center>

<blockquote>
<p><strong>提示</strong>：你可以點擊窗口左上角的小圖片，然後裏面的 <strong>Options</strong> 中，你可以調整你自己的 <strong>Cygwin</strong> 外觀。</p>
</blockquote>
<h3 id="vim_配置">vim 配置</h3><p>上一步我們已經選中了 <strong>vim</strong> ，也就是說我們已經在 <strong>Cygwin</strong> 中裝上了 <strong>vim</strong>。但是由於這裏的 <strong>vim</strong> 默認配置非常蛋疼，所以我們得改一下。</p>
<p>在你的 <strong>Cygwin</strong> 中一句句輸入下面的命令：</p>
<figure class="highlight crystal"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd /home/&lt;你自己的用戶名&gt;</span><br><span class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/blog-xcoder-in.qiniudn.com/</span>.vimrc</span><br><span class="line"><span class="variable">$ </span>mkdir .vim</span><br><span class="line"><span class="variable">$ </span>cd .vim</span><br><span class="line"><span class="variable">$ </span>mkdir colors</span><br><span class="line"><span class="variable">$ </span>cd colors</span><br><span class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/blog-xcoder-in.qiniudn.com/molokai</span>.vim</span><br></pre></td></tr></table></figure>
<p>這樣你的 <strong>vim</strong> 就用上了上面的那個地址的配置文件，當然你也可以編輯你自己的配置文件或者說從網上下別的配置文件以滿足你的個性化需求。</p>
<p><strong>vim</strong> 配置以及使用請參照：<a href="https://wiki.archlinux.org/index.php/Vim" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Vim</a></p>
<blockquote>
<p>事無鉅細問 <strong>ArchWiki</strong>。</p>
<div style="text-align: right;"><em>– <a href="https://github.com/kalxd" target="_blank" rel="external">kalxd</a></em></div>

</blockquote>
<h3 id="apt-cyg">apt-cyg</h3><blockquote>
<p>apt-cyg is a command-line installer for Cygwin which cooperates with Cygwin Setup and uses the same repository. The syntax is similar to apt-get.</p>
<div style="text-align: right;"><em>– From apt-cyg googlecode page</em></div>

</blockquote>
<p>總之意思就是說 <code>apt-cyg</code> 是類似於 <strong>Linux</strong> 中的 <code>apt-get</code>， <code>yum</code>, <code>zypper</code> 等命令行軟件包安裝器一樣，可以通過</p>
<ul>
<li><code>apt-cyg install &lt;package names&gt;</code> 來安裝軟件包</li>
<li><code>apt-cyg remove &lt;package names&gt;</code> 來移除軟件包</li>
<li><code>apt-cyg update</code> 來更新 setup.ini</li>
<li><code>apt-cyg show</code> 來列出已安裝的軟件包</li>
<li><code>apt-cyg find &lt;pattern(s)&gt;</code> 來查找符合條件的軟件包</li>
<li><code>apt-cyg describe &lt;pattern(s)&gt;</code> 來描述符合條件的軟件包</li>
<li><code>apt-cyg packageof &lt;commands or files&gt;</code> 來定位其父軟件包</li>
</ul>
<h4 id="apt-cyg_安裝">apt-cyg 安裝</h4><p>其實也不能說是安裝，純粹是把腳本從網絡上拷到自己的 <strong>Cygwin</strong> 的環境目錄中。</p>
<p>在你的 <strong>Cygwin</strong> 中輸入以下命令：</p>
<figure class="highlight crystal"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd /usr/local/bin</span><br><span class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/apt-cyg.googlecode.com/svn</span><span class="regexp">/trunk/apt</span>-cyg</span><br></pre></td></tr></table></figure>
<p>這樣你就“安裝”好了 <strong>apt-cyg</strong> 了。不過這裏用的是默認的源，所有東西都是默認的。</p>
<p>如果你現在已經心安理得或者不想折騰了可以跳過 <strong><a href="#apt-cyg-修改">2.1.3.2. apt-cyg 修改</a></strong>，如果你想把源換成 <code>163</code> 的話那麼稍微看一下吧。</p>
<h4 id="apt-cyg_修改">apt-cyg 修改</h4><p>接下去我們要對 <strong>apt-cyg</strong> 做一些編輯。</p>
<p>你有下面兩個選擇：</p>
<ol>
<li>如果你想學習 <strong>vim</strong> 操作或者你已經熟悉了，那麼直接使用 <code>vim apt-cyg</code> 來進行編輯。</li>
<li>如果你是懶人還是想要直接編輯的話，請跑到你的 <strong>Cygwin</strong> 的安裝目錄，找到 <strong>usr</strong> 文件夾，飛進 <strong>local/bin</strong> 目錄中去，用你自己喜歡的文本編輯器打開並編輯。</li>
</ol>
<p>大約是 <code>68</code> 行上下吧，有一句是：</p>
<figure class="highlight groovy"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirror=<span class="string">ftp:</span><span class="comment">//mirror.mcs.anl.gov/pub/cygwin</span></span><br></pre></td></tr></table></figure>
<p>將其改成：</p>
<figure class="highlight groovy"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirror=<span class="string">http:</span><span class="comment">//mirrors.163.com/cygwin</span></span><br></pre></td></tr></table></figure>
<p>還有就是大概在 <code>98</code> 行和 <code>105</code> 行左右：</p>
<figure class="highlight xquery"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N <span class="variable">$mirror</span>/setup.bz2</span><br><span class="line">...</span><br><span class="line">wget -N <span class="variable">$mirror</span>/setup.ini</span><br></pre></td></tr></table></figure>
<p>修改成：</p>
<figure class="highlight xquery"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N <span class="variable">$mirror</span>/x86/setup.bz2</span><br><span class="line">...</span><br><span class="line">wget -N <span class="variable">$mirror</span>/x86/setup.ini</span><br></pre></td></tr></table></figure>
<p>至此，你的 <strong>Cygwin</strong> 環境基本完成，以後可以再慢慢完善。</p>
<h3 id="Node-js_安裝">Node.js 安裝</h3><p>這個就很簡單了，打開 <strong><a href="http://nodejs.org/download/" target="_blank" rel="external">Node.js</a></strong> 官網下載安裝即可。</p>
<blockquote>
<p>選擇 <strong>Windows Installer (.msi)</strong> 或者 <strong>Windows Binary (.exe)</strong>。</p>
</blockquote>
<p>安裝好後就能直接在 <strong>Cygwin</strong> 裏面使用了。</p>
<h2 id="真·Hello_World">真·Hello World</h2><p>現在，無論你是 <strong>Linux</strong> 用戶還是 <strong>Windows</strong> 用戶，都可以用一樣的步驟來完成下面的 <code>Hello World</code> 了。</p>
<p>隨便跑一個目錄裏面新建一個文件並且用 <strong>vim</strong> 編輯：</p>
<figure class="highlight crystal"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vim hello.js</span><br></pre></td></tr></table></figure>
<p>在裏面輸入下面的東西：</p>
<figure class="highlight applescript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="command">log</span>(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure>
<p>然後退出 <strong>vim</strong> 執行：</p>
<figure class="highlight crmsh"><figcaption><span>sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"> </span><span class="title">hello</span>.js</span><br></pre></td></tr></table></figure>
<p>終於，<strong>真·Hello world</strong> 出現在了你的眼前，而不需要藉助 <strong><a href="http://ideone.com/" target="_blank" rel="external">IDEOne</a></strong> 了。</p>
<p><strong><em>To be continued…</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　由於<a href="!--￼11--&gt;#linux-環境">Linux</a>中的環境搭建比較簡單，所以草草略過。</p>
<p>　　其實<a href="!--￼12--&gt;#windows-環境">Windows</a>下也不算麻煩，但是這裏會講一定量的]]>
    </summary>
    
      <category term="JavaScript" scheme="http://xcoder.in/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="一起擼Node.JS" scheme="http://xcoder.in/tags/%E4%B8%80%E8%B5%B7%E6%93%BCNode-JS/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一起擼Node.JS（負叄）——概述]]></title>
    <link href="http://xcoder.in/2013/08/13/node-1-summary/"/>
    <id>http://xcoder.in/2013/08/13/node-1-summary/</id>
    <published>2013-08-12T16:00:00.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　本系列教程主要是寫給我帶的那幫熊孩子們看的。我自己的 <strong>Node.js</strong> 水平半斤八兩，措辭之中也免不了有自己錯誤的理解，會誤人子弟。但是對於初學者來說，某些自己助記的理解還是可取的。有些概念性的錯誤可以等他們進一步深入研究之後再自行更正。</p>
<p>　　由於那幫人大多還處於使用 <strong>M$ Windows</strong> 的令人不愉快的階段，所以本教程將會退而求其次，使其在 <strong>Cygwin</strong> 中模擬 <strong>linux</strong> 的命令（Windows的bat腳本實在是讓人不敢恭維）。以及在這裏會講述一些 <strong>Git</strong> 操作的初步。當然，如果你已經在使用 <strong>linux</strong> 進行開發的話，可以跳過前面一堆令人感到厭煩的環境配置章節。或者你在使用 <strong>M$ Windows</strong> 但卻不想改變自己的腳本習慣的話，也可以選擇性地跳過一些章節和步驟。</p>
<!-- 我是小小分割符 -->
<h2 id="Node-JS是什麼？">Node.JS是什麼？</h2><p>很多人都知道JS是一門語言，而且是一門腳本語言，其全稱就是 <strong>JavaScript</strong>，而且與所謂的 <strong>Java</strong> 沒有一個屁的關係。</p>
<h3 id="前端_JavaScript">前端 JavaScript</h3><p>在好多年前，<strong>JavaScript</strong> 是網頁的一個寄生蟲，它必須依賴於網頁的瀏覽器中才能執行，並且作爲網頁的一部分，以</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line"><span class="comment">//blahblah...</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>標籤進行包含，這樣才能提供其上下文環境。或者說將其單獨寫入一個 <code>*.js</code> 文件中，並且在網頁裏以</p>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"foo/bar.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>的形式將其包含進來。</p>
<p>但總而言之，<strong>JavaScript</strong> 只是寄生在網頁裏面的一隻小小可憐蟲罷了。它的作用無非就是使網頁的交互性更強，頁面效果更多而已。</p>
<p>後來，這幫不甘寂寞的人類將 <strong>JavaScript</strong> 從網頁（或者說前端）的帝國中獨立了出來（小心快遞），於是就出現了 <strong>CommonJS</strong>。</p>
<h3 id="CommonJS">CommonJS</h3><p><strong>CommonJS</strong> 其實不是一門新的語言，甚至都不能說它是一個新的解釋器——實際上它只是一個概念或者是一個規範。</p>
<p>在這個規範中，它定義了很多 <strong>API</strong> ，講通俗點或者直截了當點就是函數啊類啊什麼的，而這些 <strong>API</strong> 是爲那些普通應用程序（Native App）而非瀏覽器應用使用。它的終極目標就是提供一個類似於 <strong>Python</strong>、<strong>Ruby</strong> 之類的腳本一樣的標準庫，開發者可以用這樣的東西一樣來做到 <strong>Python</strong>、<strong>Ruby</strong> 能做到的事，而非僅僅侷限於網頁中的效果或者功能實現，它也可以跑在本地。</p>
<p>所以說下面的事情對於 <strong>JavaScript</strong> 來說不再是夢：</p>
<ul>
<li>服務端JavaScript應用</li>
<li>命令行工具</li>
<li>圖形界面應用</li>
<li>混合應用（Titanium、Adobe AIR等）</li>
</ul>
<p>那麼，它具體彌補了 <strong>前端JavaScript</strong> 的哪些空白呢？其實這也涉及了很多 <strong>前端JavaScript</strong> 所沒有涉及的東西，如二進制、編碼、IO、文件、系統、斷言測試、套接字、事件隊列、Worker、控制檯等等。</p>
<p>關於 <strong>CommonJS</strong> 的更進一步瞭解可以翻閱一下其 <strong><a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="external">Wiki</a></strong>。</p>
<h3 id="Node-JS">Node.JS</h3><p>上面講了那麼多，卻始終停留在“規範”這個層面上。而 <strong>Node.JS</strong> 的出現便是讓 <strong>CommonJS</strong> 成爲了現實。</p>
<p>這裏要大家明確的一點的就是 <strong>Node.JS</strong> 並不是一門新的語言，它的語言還是 <strong>JavaScript</strong> ，硬要說是一門新的語言那也應該是 <strong>Common JavaScript</strong>。<strong>Node.JS</strong> 只是 <strong>CommonJS</strong> 的一個<a href="http://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8" target="_blank" rel="external">解釋器</a>罷了。</p>
<p>它是基於 <strong>Google</strong> 的 <strong>V8虛擬機</strong>(Chrome瀏覽器所使用的JavaScript執行環境) 的一個解釋器。</p>
<p>很多人印象中的概念還是沒能擺脫 <strong>前端JavaScript</strong> 的陰霾，認爲 <strong>JavaScript</strong> 就是做網站的， <strong>Node.JS</strong> 也是如此。</p>
<p>包括本人在 <strong><a href="http://cnodejs.org/" target="_blank" rel="external">cnodejs.org</a></strong> 中看到的帖子大多也都是講 <strong>Node.JS</strong> 如何如何做網站（服務端）云云，如何如何使用 <strong>Express</strong> 模塊來搭建一個網站云云。</p>
<blockquote>
<p>這是一個誤區。</p>
</blockquote>
<p><strong>PHP</strong> 還能用 <strong><a href="http://www.php-cli.com/" target="_blank" rel="external">PHP-CLI</a></strong> 來寫個腳本放本地跑呢，<strong>Node.JS</strong> 更是可以寫任何程序。雖然這麼講有些誇大了，但是我這麼說的理由是希望大家能擺脫這麼一個誤區。</p>
<p>舉個簡單的例子吧，大家都是搞過 <strong>ACM</strong> 的孩子了，總對終端窗口的輸入輸出有一定感覺了吧。現在給我以最快速度碼一個 <strong><em><a href="http://acm.nbut.edu.cn/problem/view.xhtml?id=1000" target="_blank" rel="external">A + B Problem</a></em></strong> 給我看看。</p>
<p>輕車熟路，我知道。但是你們現在做的事用 <strong>Node.JS</strong> 同樣能做到。</p>
<figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.resume();</span><br><span class="line">process.stdin.setEncoding(<span class="string">"utf8"</span>);</span><br><span class="line">process.stdin.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = chunk.trim().split(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> ab = datas[i].trim().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(ab[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(ab[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由於<del>我們學校</del>我的前任學校OJ不支持 <strong>Node.JS</strong>，所以請你們移步到 <strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1000" target="_blank" rel="external">AIZU OJ</a></strong> 去把上面的代碼交過去看看結果看。</p>
<blockquote>
<p><strong>注意</strong>：語言要選擇 <strong>JavaScript</strong>。</p>
</blockquote>
<p>怎麼樣，同樣能過題的對吧？</p>
<h2 id="小結">小結</h2><p>上面對這些東西做了個簡單的介紹，我需要你們知道的東西很簡單：</p>
<ol>
<li><strong>Node.JS</strong> 是一個腳本解釋器，用的語言是 <strong>JavaScript</strong>。</li>
<li><strong>Node.JS</strong> 功能很強大，不是隻能拿來做網站的，眼光放開闊些。</li>
<li>給我好好學。</li>
</ol>
<h2 id="番外">番外</h2><blockquote>
<p>有個碼畜老了，想學學書法來修身養性。當他展開宣紙，猶豫了半天之後，終於揮毫潑墨，在紙上龍飛鳳舞寫下幾個大字：</p>
<blockquote>
<p><strong><em>Hello World</em></strong></p>
</blockquote>
</blockquote>
<p>雖然這一篇文章沒有講到任何 <strong>Node.JS</strong> 的語法，但是還是可以讓你們練練書法的。</p>
<p><strong>C語言</strong> 的標準輸出函數是 <code>printf</code>，而 <strong>Node.JS</strong> 的標準輸出則是：</p>
<figure class="highlight applescript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="command">log</span>(<span class="string">"blahblah..."</span>);</span><br></pre></td></tr></table></figure>
<p>好的，即使沒有裝上 <strong>Node.JS</strong> 環境也阻止不了我們向世界問好。</p>
<p>打開 <strong><a href="http://ideone.com/" target="_blank" rel="external">IDEOne</a></strong>，將你的 <code>Hello World</code> 貼到編輯框中，然後在左側的語言欄裏面選中 <strong>Node.JS</strong> ，點擊送出，你就能看到你的第一個 <strong>Node.JS</strong> 程序的運行結果了。</p>
<p><strong><em>To be continued…</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　本系列教程主要是寫給我帶的那幫熊孩子們看的。我自己的 <strong>Node.js</strong> 水平半斤八兩，措辭之中也免不了有自己錯誤的理解，會誤人子弟。但是對於初學者來說，某些自己助記的理解還是可取的。有些概念性的錯誤可以等他們進一步深入研究之後再自行更正。]]>
    </summary>
    
      <category term="JavaScript" scheme="http://xcoder.in/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://xcoder.in/tags/Node-js/"/>
    
      <category term="一起擼Node.JS" scheme="http://xcoder.in/tags/%E4%B8%80%E8%B5%B7%E6%93%BCNode-JS/"/>
    
      <category term="NodeJS" scheme="http://xcoder.in/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[關於JavaScript中callback函數的this指針重定義]]></title>
    <link href="http://xcoder.in/2013/07/15/javascript-callback-this-bind/"/>
    <id>http://xcoder.in/2013/07/15/javascript-callback-this-bind/</id>
    <published>2013-07-15T06:20:29.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近在寫 <strong>NBUT Virtual Judge</strong> 的內核框架，用的又是 <strong>Node.JS</strong> 了，把它當作一個本地運行的腳本不斷進行輪詢。</p>
<p>　　衆所周知JS中的一個精髓就是異步回調。</p>
<p>　　所以在我自己寫的框架中也經常會出現類似於下面的代碼：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.bar(a, b, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>　　總而言之就是寫一個函數，這個函數將會調用一個回調函數。</p>
<p>　　但是問題出現了：在那個回調函數 <code>function</code> 中，你如果使用了一個 <code>this</code> 指針的話，它將會指向根，而不是 <code>foo</code> 的本體。</p>
<p>　　那麼如果我們想在 <code>function</code> 中也用 <code>this</code> 來指代這個 <code>foo</code> 對象該怎麼辦呢？</p>
<p>　　結果還是IRC有用。本人跑 <strong>Node.JS</strong> 的 <strong>IRC</strong> 上問了這個問題，結果有人就這樣回覆我了：</p>
<blockquote>
<p>13:07 &lt;shama&gt; xadillax: foo(a, b callback.bind(foo))</p>
<p>13:10 &lt;olalonde&gt; foo (a, b fn) { fn = fn.bind(this); …. }</p>
</blockquote>
<p>　　然後還很熱心地給了我個網址：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a></p>
<p>　　總之最後得出的結論就是說：</p>
<p>　　你只要給你的 <code>callback</code> 函數指定一個 <code>this</code> 指針即可。</p>
<p>　　如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb = callback.bind(foo);</span><br><span class="line">foo.bar(a, b, cb);</span><br></pre></td></tr></table></figure>
<p>　　這樣就能在回調函數中使用foo來作爲其this指針了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近在寫 <strong>NBUT Virtual Judge</strong> 的內核框架，用的又是 <strong>Node.JS</strong> 了，把它當作一個本地運行的腳本不斷進行輪詢。</p>
<p>　　衆所周知JS中的一個精髓就是異步回調。</p>
<p]]>
    </summary>
    
      <category term="Javascript" scheme="http://xcoder.in/tags/Javascript/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[關於Node.js下的MongoDB阻塞模式實現]]></title>
    <link href="http://xcoder.in/2013/03/29/nodejs-mongodb-sync/"/>
    <id>http://xcoder.in/2013/03/29/nodejs-mongodb-sync/</id>
    <published>2013-03-29T01:31:38.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong><em>注：本文僅爲我初學 Node.JS 的時候的稚嫩筆記。是從 <a href="http://web.archive.org/" target="_blank" rel="external">http://web.archive.org/</a> 扒回來的。現在看來已無多大參考價值，各位可以略過。我只是把它扒回來紀念一下而已，以記錄我的歷程。而那個相對應的 <code>SevenzJS</code> 也已經被遺棄</em></strong></p>
<h2 id="背景">背景</h2><p>　　最近在做公司項目的一個模塊，主要用於 <strong>JSON Api</strong> 的傳輸，所以開發環境的目標就鎖定在了 <strong>Node.js</strong>。而這一塊的登陸用戶又是存在 <strong>MongoDB</strong> 裏面的，所以就有瞭如下的問題。</p>
<ul>
<li>網上的 Node.JS 框架都比較重型或者臃腫的，學了 Node 之後還需要學額外的東西。</li>
<li>所以我就打算自己寫一個專注於 JSON Api 的快速開發框架，於是有了 SevenJS。</li>
<li>問題出現了，雖然 Node.JS 極度推崇異步非阻塞模式，但是阻塞模式在平常開發中還是太常用了。</li>
</ul>
<p>　　我們試想一下，如果我們有幾句MongoDB的查詢之類的，用node-mongodb-native來寫的話是這樣的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Db(<span class="string">'test'</span>, <span class="keyword">new</span> Server(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, &#123;&#125;));</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">    collection.insert(&#123;a:<span class="number">2</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">        collection.count(<span class="function"><span class="keyword">function</span>(<span class="params">err, count</span>) </span>&#123;</span><br><span class="line">            test.assertEquals(<span class="number">1</span>, count); &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Locate all the entries using find</span></span><br><span class="line">            collection.find().toArray(<span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">            test.assertEquals(<span class="number">1</span>, results.length);</span><br><span class="line">            test.assertTrue(results[<span class="number">0</span>].a === <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Let's close the db</span></span><br><span class="line">            client.close();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">client.open(<span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>&#123;</span><br><span class="line">    client.collection(<span class="string">'test_insert'</span>, test);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>　　各種嵌套回調有木有！這不是我們想要的，尤其是我的那個框架，因爲我的框架是流式的。</p>
<p>　　所以我就想有這樣的一種方案：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = mongodb.connect();</span><br><span class="line"><span class="keyword">var</span> collection = mongodb.getCollection(client, <span class="string">"dbname"</span>);</span><br><span class="line"><span class="keyword">var</span> result = mongodb.find(&#123; <span class="string">"foo"</span> : <span class="string">"bar"</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>　　使得這樣就能找出dbname表下的foo爲bar值的記錄了。</p>
<h2 id="正題">正題</h2><p>　　出於這樣的想法，我在網上找遍了大江南北，除了 CNode 社區有人問到了類似的問題以外，再也找不到音信了，而且那裏也沒有一個好的回答。</p>
<p>　　不過這也正常，因爲 Node.js 官方本身就不推薦這麼做——他們認爲異步非阻塞是非常優雅的一件事情。</p>
<p>　　包括我在 Node.js 的 IRC 聊天室裏面問了這個問題，也有人是這麼回答我的：</p>
<blockquote>
<p>You can’t use a car as a boat. If you want a boat, use a boat.</p>
</blockquote>
<p>　　言簡意賅，直截了當地說明 Node.js 是不支持這樣的，如果你想這樣做，就用 python 或者 ruby 去吧。</p>
<p>　　不過好在後來 IRC 裏面有人推薦了我一個模塊：<a href="https://github.com/laverdet/node-fibers" target="_blank" rel="external">fibers</a>。</p>
<p>　　有了這個模塊好啊，直接能用了有木有！</p>
<p>　　接下來就來講一下如何使用吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">collection, selector, callback</span>) </span>&#123;</span><br><span class="line">    collection.find(selector).toArray(callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Fiber = <span class="built_in">require</span>(<span class="string">'fibers'</span>);</span><br><span class="line"><span class="keyword">var</span> Future = <span class="built_in">require</span>(<span class="string">'fibers/future'</span>);</span><br><span class="line"><span class="keyword">var</span> wait = Future.wait;</span><br><span class="line"></span><br><span class="line">Fiber(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wrapper = Future.wrap(fund);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 這裏就是正題了，我們假設已經獲取一個collection了 */</span></span><br><span class="line">    <span class="keyword">var</span> result = wrapper(collection, &#123; <span class="string">"foo"</span> : <span class="string">"bar"</span> &#125;).wait();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">&#125;).run();</span><br></pre></td></tr></table></figure>
<p>　　這就是一個非常簡單的同步查詢 MongoDB 的例子了，實際上本質還是一個異步，注意到沒有，其實 <code>Fiber()</code> 內部的那個 <code>function</code> 本質上還是一個回調函數，只不過在這個回調函數裏面，裏面的所有 <code>callback</code> 都可以被同步了。不過我們只需要小動一些手腳就能加上這個外殼了。具體請參見 <a href="https://github.com/XadillaX/SevenzJS/blob/a0a0476000c492dd8e70c062cfa432f559edbd16/sevenz/sRouter.js" target="_blank" rel="external">sRouter.js</a> 約 121 行的外殼以及 <a href="https://github.com/XadillaX/SevenzJS/blob/a0a0476000c492dd8e70c062cfa432f559edbd16/sevenz/sMongoSync.js" target="_blank" rel="external">sMongoSync.js</a> 的實現，加上 <a href="http://web.archive.org/web/20130726042859/https://github.com/XadillaX/SevenzJS/blob/a0a0476000c492dd8e70c062cfa432f559edbd16/actions/index.js" target="_blank" rel="external">index.js</a> 中的查詢 demo。</p>
<h2 id="結尾">結尾</h2><p>　　所以說當我們做不到某件事的時候，多去IRC看看，多去社區混混，也多去找找模塊，要真沒有的話就只能自己豐衣足食了（我還沒到那水平，笑）。總之這次Fibers幫了我一個大忙。</p>
<p>　　最後，SevenzJS 歡迎 <a href="https://github.com/XadillaX/SevenzJS" target="_blank" rel="external">Fork</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong><em>注：本文僅爲我初學 Node.JS 的時候的稚嫩筆記。是從 <a href="http://web.archive.org/" target="_blank" rel="external">http://web.archive.org/</a> ]]>
    </summary>
    
      <category term="MongoDB" scheme="http://xcoder.in/tags/MongoDB/"/>
    
      <category term="Node.JS" scheme="http://xcoder.in/tags/Node-JS/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[關於jQuery中“animate()”函數對顏色變化的支持]]></title>
    <link href="http://xcoder.in/2012/12/24/jquery-animate-color-support/"/>
    <id>http://xcoder.in/2012/12/24/jquery-animate-color-support/</id>
    <published>2012-12-24T01:20:16.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近在做一個汽車團購網的項目，由於老大力求簡潔，所以界面做得有些小清新。不過得說一下頁面不是我設計的，是一位美工同志。</p>
<p>　　廢話不多說，直接切入正題吧——</p>
<p>　　我要做得就是讓下面一段代碼生效：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#yourid"</span>).stop().animate(&#123; <span class="string">"backgroundColor"</span> : <span class="string">"#rrggbb"</span>, <span class="string">"color"</span> : <span class="string">"#rrggbb"</span> &#125;, <span class="string">"fast"</span>);</span><br></pre></td></tr></table></figure>
<p>　　但是，很遺憾，一點也沒有動。本來效果應該跟這個版本的xcoder博客的天頭導航條一樣有個動態效果（只不過xcoder的導航條是透明度變化，而項目中我想讓它背景色變化）。</p>
<p>　　原因是什麼呢？死月上網查了很久，找到的東西都很簡單地說明瞭一下，貌似都可以。嘛，也許是jQuery新版本不支持這個特性了吧。</p>
<p>　　最後，死月在jQuery的官方文檔中找到了下面這段話——</p>
<blockquote>
<p>All animated properties should be animated to <strong><em>a single numeric value</em></strong>, except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality (For example, width, height, or left can be animated but background-color cannot be, unless the <a href="https://github.com/jquery/jquery-color" target="_blank" rel="external">jQuery.Color()</a> plugin is used). Property values are treated as a number of pixels unless otherwise specified. The units em and % can be specified where applicable.</p>
<p style="text-align: right">—— <a href="http://api.jquery.com/animate/" target="_blank" rel="external">jQuery官方文檔 .animate()</a></p>

</blockquote>
<p>　　大致的意思就是說所有動畫屬性都必須是一個單數字值，所以說大多數非數字的屬性是不能被動畫化的。例如高度、寬度等可以被動畫化，但是背景色就不信了。<span style="color: red;"><strong><em>除非你用了jQuery.Color()插件</em></strong></span>。</p>
<p>　　所以說問題找到了，我們必須得用一個jQuery.Color()插件來對一些顏色進行動畫操作。</p>
<p>　　話不多說，我們去下一個jQuery.Color()插件。把它加在我們的頁面中，然後就可以用如下方式來進行動畫操作了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).stop().animate(&#123;</span><br><span class="line">    <span class="string">"backgroundColor"</span> : jQuery.Color(<span class="string">"rrggbb"</span>),</span><br><span class="line">    <span class="string">"color"</span> : jQuery.Color(<span class="string">"rrggbb"</span>)</span><br><span class="line">&#125;, <span class="string">"fast"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近在做一個汽車團購網的項目，由於老大力求簡潔，所以界面做得有些小清新。不過得說一下頁面不是我設計的，是一位美工同志。</p>
<p>　　廢話不多說，直接切入正題吧——</p>
<p>　　我要做得就是讓下面一段代碼生效：</p>
<figure class="highl]]>
    </summary>
    
      <category term="Javascript" scheme="http://xcoder.in/tags/Javascript/"/>
    
      <category term="jQuery" scheme="http://xcoder.in/tags/jQuery/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[線程安全——Scope Lock模式]]></title>
    <link href="http://xcoder.in/2012/09/08/scope-lock/"/>
    <id>http://xcoder.in/2012/09/08/scope-lock/</id>
    <published>2012-09-07T17:31:59.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong><em>嘛，本文是建立在M$的Visual Studio基礎上的，linux☭勿噴。</em></strong></p>
<p>　　我最先用到 ScopeLock 模式是在自己開發 <strong>XAE引擎</strong> 的時候。在裏面用到挺多的線程函數，那麼如何解決臨界區就成了一個重要的課題。可能大家想，不就一個線程鎖臨界區什麼的麼，一個 <code>EnterCriticalSection</code> 和一個 <code>LeaveCriticalSection</code> 不就解決了麼？</p>
<p>　　其實不然。在 <strong>M$</strong> 中，最常用的當然就是 <code>CRITICAL_SECTION</code> 了，但是如果臨界區上鎖卻木有解鎖呢？這就會發生死鎖現象。對於一個粗心的程序猿來說這樣的錯誤還是有機率發生的。就算你足夠細心，還是有時候會一失足成千古恨。</p>
<p>　　所以就有了這麼一種方法來杜絕這種死鎖的產生—— <code>ScopeLock</code>。</p>
<p>　　那麼什麼叫 <code>ScopeLock</code>？</p>
<p>　　我們試想一下如果有這麼一個類——在構造的時候，你傳進去一個 <code>CRITICAL_SECTION</code> 的引用並且將其 <code>EnterCriticalSection</code> 進入到臨界區。當它析構的時候，我們直接 <code>LeaveCriticalSection</code> 就好了。</p>
<p>　　也許你會問，這樣的一個類會有什麼用呢？</p>
<p>　　那麼我下面演示一段簡單的 ScopeLock 代碼先吧：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ScopeLock</span><br><span class="line">&#123;</span><br><span class="line">    CRITICAL_SECTION&amp; m_cs;</span><br><span class="line"></span><br><span class="line">    ScopeLock(CRITICAL_SECTION cs) : m_cs(cs)</span><br><span class="line">    &#123;</span><br><span class="line">        EnterCriticalSection(&amp;m_cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~ScopeLock()</span><br><span class="line">    &#123;</span><br><span class="line">        LeaveCriticalSection(&amp;m_cs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">CRITICAL_SECTION cs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...假設我們已經初始化好了這個臨界區</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScopeLockTest</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function">ScopeLock <span class="title">oLock</span><span class="params">(cs)</span></span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　我們可以發現，當我們剛進入 <code>ScopeLockTest</code> 函數的時候，聲明瞭一個 <code>oLock</code> 對象，這個時候運行 <code>oLock</code> 的構造函數，也就是進入了 <code>cs</code> 這個臨界區。而當 <code>ScopeLockTest</code> 函數運行完畢要退出這個函數的時候，<code>oLock</code> 對象的生命週期也就走到了盡頭，對應的，它將會執行析構函數，那麼就自然而然地退出了 <code>cs</code> 臨界區。</p>
<p>　　其實無論 <code>ScopeLockTest</code> 這個函數怎麼寫，哪怕是中間有一些 <code>if</code> 判斷直接 <code>return</code> 掉，只要是 <code>ScopeLockTest</code> 這個函數執行完畢，<code>oLock</code> 就會自動析構，從而達到瞭解鎖過程。那麼不管粗心還是細心的童鞋們都不用爲忘記退出臨界區而煩惱了。</p>
<p>　　而且 <code>ScopeLock</code> 模式只是一種思想，並不是對於 <strong>M$</strong> 的臨界區的一種專用性物品。例如在QT裏，我們一樣可以用 <code>ScopeLock</code> 來對線程的一些 <code>MutexLock</code> 之類的東西進行操作。</p>
<p>　　上面所寫的例子只是思路的一種形成，並不是一個完整的ScopeLock類（結構體），雖然說它現在已經可以用了。你可以在上面完善，加上自己的東西，使其能確確實實在項目中使用。由於代碼的關聯性，我單單發出我的 <code>ScopeLock</code> 的話會缺少很多關聯的東西，所以咱就不發了，思路在這裏，相信誰都能寫出自己的一個 <code>ScopeLock</code> 吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong><em>嘛，本文是建立在M$的Visual Studio基礎上的，linux☭勿噴。</em></strong></p>
<p>　　我最先用到 ScopeLock 模式是在自己開發 <strong>XAE引擎</strong> 的時候。在裏面用到挺多的線]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="ScopeLock" scheme="http://xcoder.in/tags/ScopeLock/"/>
    
      <category term="線程安全" scheme="http://xcoder.in/tags/%E7%B7%9A%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
      <category term="線程死鎖" scheme="http://xcoder.in/tags/%E7%B7%9A%E7%A8%8B%E6%AD%BB%E9%8E%96/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CodeForces Round 128 DIV2]]></title>
    <link href="http://xcoder.in/2012/07/04/codeforces-128-div2/"/>
    <id>http://xcoder.in/2012/07/04/codeforces-128-div2/</id>
    <published>2012-07-04T03:38:59.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　這次玩脫了。好不容易四題都做出來，卻因爲小細節掛了兩題。</p>
<h2 id="Description">Description</h2><h3 id="Two_Problems">Two Problems</h3><p>　　題意就是說，CF有兩題，每題初始分A和B，然後每題在每分鐘會扣DA和DB分。給你比賽總時間T，問你某個人可不可能拿到X分。（注意可能做出一題、兩題或者一題也沒做出）</p>
<p>　　(0 ≤ x ≤ 600; 1 ≤ t, a, b, da, db ≤ 300且保證及時比賽時間到了各題的分數也不會小於0)</p>
<h3 id="Game_on_Paper">Game on Paper</h3><p>　　有一個 N<em>N 方格紙。在上面的方格里一格格塗黑。每一步塗一格一共塗 m 次，給定 xi 和 yi。問最少塗幾步方格紙裏會出現一個 3</em>3 的正方形。</p>
<p>　　(1 ≤ n ≤ 1000, 1 ≤ m ≤ min(n· n, 105))</p>
<h3 id="Photographer">Photographer</h3><p>　　照相內存卡里有d容量。其中高質量照片佔a容量、低質量佔b容量。然後有n個顧客，每個顧客需要xi張高質量照片和yi張低質量照片。攝影師如果給一個人拍照了，就應該滿足他所有要求（即給xi張高質量照片和yi張低質量照片）。問攝影師最多能給幾個人拍照。</p>
<p>　　(1 ≤ n ≤ 105, 1 ≤ d ≤ 109, 1 ≤ a ≤ b ≤ 104, 0 ≤ xi, yi ≤ 105)</p>
<h3 id="Hit_Ball">Hit Ball</h3><p>　　封閉房間裏，從房間的一頭最底下的中間以某個方向踢球（一定是網對面踢），問踢到另一頭的牆上的時候，x、z各是多少。</p>
<p>　　(各座標以及向量都是小於等於100的正整數)</p>
<p><img src="hit-ball.png" alt="Hit Ball"></p>
<h3 id="Transportation">Transportation</h3><p>　　還沒看。</p>
<h2 id="Analysis">Analysis</h2><h3 id="Two_Problems-1">Two Problems</h3><p>　　這題只要注意幾個trick就行了：可以做出0題、1題或者2題。直接兩個for枚舉各題在幾分鐘內做出來，然後做一下0題、1題的特殊判斷就好了。</p>
<h3 id="Game_on_Paper-1">Game on Paper</h3><p>　　在每次塗的時候，以當前塗的點位中心，設它爲九宮格的其中一個位置（一共九種位置），對於每種位置，都判斷其對應的九宮格是不是 3*3 的黑色就好了。(我做的時候在設位置的時候 x - 1, y - 1 手賤敲成了 x - 1, y - 2，lock 之後才發現。悲劇)</p>
<h3 id="Photographer-1">Photographer</h3><p>　　貪心。對於每個人將其所需的總容量算出來再進行遞增排序。最後求的時候推薦累減的方式判斷，因爲我累加然後用 int 最後爆範圍了。</p>
<h3 id="Hit_Ball-1">Hit Ball</h3><p>　　首先拿出空間幾何的線面相交模板。然後來一個 <code>while</code>，每次循環的時候判斷當前所在的點與方向適量形成的直線與 (X, 0, Z) 面的交點在不在終點牆壁大小的範圍內。若不是則說明中途撞牆了判斷方向向量：x &lt; 0則線面相交判斷是不是撞左牆，若是則 x 正負值變一下；x &gt; 0 則線面相交判斷是不是撞右牆，若是則 x 正負值變一下。z &lt; 0則判斷是不是以求搶地，若是則 z 正負變一下。最後 z &gt; 0 則判斷是不是撞天花板，若是則z正負值變一下。然後以球撞擊的點爲新的起點，與新的方向向量形成新的直線，繼續下一次循環。因爲房間大小最大是 100 <em> 100 </em> 100，而方向向量各方向是 1 到 100 的整數，不是小數，則撞擊次數不會很多，直接 <code>while</code> 撞擊也不會超。</p>
<h2 id="Code">Code</h2><h3 id="Two_Problems-2">Two Problems</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, t, a, b, da, db;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;x, &amp;t, &amp;a, &amp;b, &amp;da, &amp;db))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x == a - i * da)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x == b - j * db)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(x == a - i * da + b - j * db)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == x) flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, flag ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Game_on_Paper-2">Game on Paper</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> mat[<span class="number">1015</span>][<span class="number">1015</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//if(i == 1 &amp;&amp; j == 1) continue;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!mat[sx + i][sy + j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(check2(x, y)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x, y - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x, y - <span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">1</span>, y)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">1</span>, y - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">1</span>, y - <span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">2</span>, y)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">2</span>, y - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(check2(x - <span class="number">2</span>, y - <span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(mat));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            mat[x + <span class="number">1</span>][y + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ans == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(check(x + <span class="number">1</span>, y + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Photographer-2">Photographer</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> client</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> memo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(client a, client b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.memo &lt; b.memo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client c[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    __int64 d;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>, &amp;n, &amp;d))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            c[i].id = i + <span class="number">1</span>;</span><br><span class="line">            c[i].memo = a * x + b * y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(c, c + n, cmp);</span><br><span class="line">        __int64 sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">int</span> maxi = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum + c[i].memo &lt;= d) sum += c[i].memo, maxi = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxi + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxi; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, c[i].id, i == maxi ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Hit_Ball-2">Hit Ball</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps <span class="number">1e-8</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> zero(x) (((x)&gt;<span class="number">0</span>?(x):-(x))&lt;eps)</span></span><br><span class="line"><span class="keyword">struct</span> point3&#123;<span class="keyword">double</span> x,y,z;&#125;;</span><br><span class="line"><span class="keyword">struct</span> line3&#123;point3 a,b;&#125;;</span><br><span class="line"><span class="keyword">struct</span> plane3&#123;point3 a,b,c;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">point3 <span class="title">xmult</span><span class="params">(point3 u,point3 v)</span></span>&#123;</span><br><span class="line">    point3 ret;</span><br><span class="line">    ret.x=u.y*v.z-v.y*u.z;</span><br><span class="line">    ret.y=u.z*v.x-u.x*v.z;</span><br><span class="line">    ret.z=u.x*v.y-u.y*v.x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">point3 <span class="title">subt</span><span class="params">(point3 u,point3 v)</span></span>&#123;</span><br><span class="line">    point3 ret;</span><br><span class="line">    ret.x=u.x-v.x;</span><br><span class="line">    ret.y=u.y-v.y;</span><br><span class="line">    ret.z=u.z-v.z;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">point3 <span class="title">pvec</span><span class="params">(plane3 s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xmult(subt(s.a,s.b),subt(s.b,s.c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">point3 <span class="title">intersection</span><span class="params">(line3 l,plane3 s)</span></span>&#123;</span><br><span class="line">    point3 ret=pvec(s);</span><br><span class="line">    <span class="keyword">double</span> t=(ret.x*(s.a.x-l.a.x)+ret.y*(s.a.y-l.a.y)+ret.z*(s.a.z-l.a.z))/</span><br><span class="line">        (ret.x*(l.b.x-l.a.x)+ret.y*(l.b.y-l.a.y)+ret.z*(l.b.z-l.a.z));</span><br><span class="line">    ret.x=l.a.x+(l.b.x-l.a.x)*t;</span><br><span class="line">    ret.y=l.a.y+(l.b.y-l.a.y)*t;</span><br><span class="line">    ret.z=l.a.z+(l.b.z-l.a.z)*t;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a, b, m;</span><br><span class="line">    <span class="keyword">double</span> vx, vy, vz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf%lf%lf"</span>, &amp;a, &amp;b, &amp;m, &amp;vx, &amp;vy, &amp;vz))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/** 5 walls */</span></span><br><span class="line">        plane3 door, lw, rw, top, ground;</span><br><span class="line">        door.a.x = <span class="number">0</span>, door.a.y = <span class="number">0</span>, door.a.z = <span class="number">0</span>;</span><br><span class="line">        door.b.x = <span class="number">1</span>, door.b.y = <span class="number">0</span>, door.b.z = <span class="number">0</span>;</span><br><span class="line">        door.c.x = <span class="number">0</span>, door.c.y = <span class="number">0</span>, door.c.z = <span class="number">1</span>;</span><br><span class="line">        lw.a.x = <span class="number">0</span>, lw.a.y = <span class="number">0</span>, lw.a.z = <span class="number">0</span>;</span><br><span class="line">        lw.b.x = <span class="number">0</span>, lw.b.y = <span class="number">1</span>, lw.b.z = <span class="number">0</span>;</span><br><span class="line">        lw.c.x = <span class="number">0</span>, lw.c.y = <span class="number">0</span>, lw.c.z = <span class="number">1</span>;</span><br><span class="line">        rw.a.x = a, rw.a.y = <span class="number">0</span>, rw.a.z = <span class="number">0</span>;</span><br><span class="line">        rw.b.x = a, rw.b.y = <span class="number">1</span>, rw.b.z = <span class="number">0</span>;</span><br><span class="line">        rw.c.x = a, rw.c.y = <span class="number">0</span>, rw.c.z = <span class="number">1</span>;</span><br><span class="line">        ground.a.x = <span class="number">0</span>, ground.a.y = <span class="number">0</span>, ground.a.z = <span class="number">0</span>;</span><br><span class="line">        ground.b.x = a, ground.b.y = <span class="number">0</span>, ground.b.z = <span class="number">0</span>;</span><br><span class="line">        ground.c.x = a / <span class="number">2</span>, ground.c.y = m, ground.c.z = <span class="number">0</span>;</span><br><span class="line">        top.a.x = <span class="number">0</span>, top.a.y = <span class="number">0</span>, top.a.z = b;</span><br><span class="line">        top.b.x = a, top.b.y = <span class="number">0</span>, top.b.z = b;</span><br><span class="line">        top.c.x = a / <span class="number">2</span>, top.c.y = m, top.c.z = b;</span><br><span class="line"></span><br><span class="line">        line3 l;</span><br><span class="line"></span><br><span class="line">        l.a.x = a / <span class="number">2</span>;</span><br><span class="line">        l.a.y = m;</span><br><span class="line">        l.a.z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        l.b.x = (a / <span class="number">2</span>) + vx;</span><br><span class="line">        l.b.y = m + vy;</span><br><span class="line">        l.b.z = vz;</span><br><span class="line"></span><br><span class="line">        point3 v;</span><br><span class="line">        v.x = vx, v.y = vy, v.z = vz;</span><br><span class="line"></span><br><span class="line">        point3 myans;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            point3 ans, ans1, ans2, ans3, ans4;</span><br><span class="line">            <span class="built_in">memset</span>(&amp;ans1, <span class="number">0</span>, <span class="keyword">sizeof</span>(point3));</span><br><span class="line">            <span class="built_in">memset</span>(&amp;ans2, <span class="number">0</span>, <span class="keyword">sizeof</span>(point3));</span><br><span class="line">            <span class="built_in">memset</span>(&amp;ans3, <span class="number">0</span>, <span class="keyword">sizeof</span>(point3));</span><br><span class="line">            <span class="built_in">memset</span>(&amp;ans4, <span class="number">0</span>, <span class="keyword">sizeof</span>(point3));</span><br><span class="line"></span><br><span class="line">            ans = intersection(l, door);</span><br><span class="line">            <span class="keyword">if</span>(ans.x &gt;= <span class="number">0</span> &amp;&amp; ans.z &gt;= <span class="number">0</span> &amp;&amp; ans.x &lt;= a &amp;&amp; ans.z &lt;= b)</span><br><span class="line">            &#123;</span><br><span class="line">                myans = ans;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            point3 totans;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(v.x &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans1 = intersection(l, lw);</span><br><span class="line">                <span class="keyword">if</span>(ans1.z &gt;= <span class="number">0</span> &amp;&amp; ans1.z &lt;= b)</span><br><span class="line">                &#123;</span><br><span class="line">                    v.x = -v.x;</span><br><span class="line">                    totans = ans1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(v.x &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans2 = intersection(l, rw);</span><br><span class="line">                <span class="keyword">if</span>(ans2.z &gt;= <span class="number">0</span> &amp;&amp; ans2.z &lt;= b)</span><br><span class="line">                &#123;</span><br><span class="line">                    v.x = -v.x;</span><br><span class="line">                    totans = ans2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(v.z &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans3 = intersection(l, top);</span><br><span class="line">                <span class="keyword">if</span>(ans3.x &gt;= <span class="number">0</span> &amp;&amp; ans3.x &lt;= a)</span><br><span class="line">                &#123;</span><br><span class="line">                    v.z = -v.z;</span><br><span class="line">                    totans = ans3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(v.z &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans4 = intersection(l, ground);</span><br><span class="line">                <span class="keyword">if</span>(ans4.x &gt;= <span class="number">0</span> &amp;&amp; ans4.x &lt;= a)</span><br><span class="line">                &#123;</span><br><span class="line">                    v.z = -v.z;</span><br><span class="line">                    totans = ans4;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            l.a = totans;</span><br><span class="line">            l.b = totans;</span><br><span class="line">            l.b.x += v.x;</span><br><span class="line">            l.b.y += v.y;</span><br><span class="line">            l.b.z += v.z;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10lf %.10lf\n"</span>, myans.x, myans.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　這次玩脫了。好不容易四題都做出來，卻因爲小細節掛了兩題。</p>
<h2 id="Description">Description</h2><h3 id="Two_Problems">Two Problems</h3><p>　　題意就是說，CF有兩題，每題初始分A和B，]]>
    </summary>
    
      <category term="CodeForces" scheme="http://xcoder.in/tags/CodeForces/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HGE做格鬥遊戲的熱點圖片碰撞檢測法]]></title>
    <link href="http://xcoder.in/2011/10/18/hge-hotspot-collision/"/>
    <id>http://xcoder.in/2011/10/18/hge-hotspot-collision/</id>
    <published>2011-10-18T07:22:21.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　碰撞檢測始終是做2D遊戲中的一個熱點話題，我本人並沒有做過這類遊戲，所以一切只是理論而已，不過正打算做這麼個小遊戲練練手。</p>
<p>　　前幾天在HGE的羣裏看到有人突然問到如何判斷鼠標有沒有點到人（點到紋理的透明區域不算），從而引申出了碰撞檢測問題。</p>
<p>　　他的問題相對好實現，只要算出紋理所按的點是不是透明即可。</p>
<p>　　接下來我得做下碰撞檢測的筆記：</p>
<p>　　碰撞檢測最常用一個方法就是關節設置（當然我並沒有做過），關節設置的話因爲只是判斷多邊形的重疊狀況，算法的複雜度低、效率高，雖然做工有點粗，但總體效果還是性價比比較高的一種方法。當然，這樣的方法需要對每一幀的紋理都設置一個關節，對於人工的代價就稍微大了一些了，並且還要寫個關節編輯器啊神馬的，於是乎代碼量又增加了。我這次是和同寢室木有一點基礎的童鞋一起練手的，所以並沒有打算引進這個方法。</p>
<p>　　於是我就用了另一種稍微“非主流”一些的方法了——逐像素判斷。</p>
<p>　　但是逐像素判斷還是有問題的——如果你的一個“效果”因爲“溫度過高”而不需要顯示，直接隱藏，但又算傷害，這時紋理的逐像素就失去了意義。於是又有了個“臃腫”的辦法，爲需要“額外附加像素”的紋理另做一張圖片，這張圖片上有兩種區域——熱點區和非熱點區。我們把需要“當做空氣”的那些區域一律用某一種極其不常用的顏色覆蓋，如 <code>ff00ff</code> 這種變態的粉色，然後其它區域的顏色就隨你怎麼搞了。我們載入的時候兩張紋理一起載入，顯示的時候顯示正常的紋理，而在碰撞檢測的時候用“熱點圖片”來進行逐像素檢測。</p>
<p>　　與上面的關節設置法比較的話，人工的工作量我個人認爲是大大地減少了，至於對於機器的執行能力來說，把時間複雜度提到了 <code>O(mn)</code> ，平方級的複雜度了，即紋理相交區域的寬和高。</p>
<p>　　我們來看一下這種碰撞檢測的大體流程吧：</p>
<ol>
<li>獲得兩個精靈的矩形，並得到相交矩形。若無相交則直接返回 <code>false</code>。</li>
<li>根據相交矩形，我們可以得到精靈1、2的紋理中需要檢測的初始座標。</li>
<li>將精靈1、精靈2的熱點圖片的相交區域的那一部分像素拷貝出來備用。（因爲有可能兩個紋理句柄是一樣的，不好同時 <code>lock</code>）</li>
<li>開始對於拷貝出來的像素信息逐一判斷對應像素點是否都“不是空氣”，若都“不是空氣”則可以判斷爲碰撞。</li>
</ol>
<p>　　當然以上的流程我們還可以優化一下，省去拷貝的那一段時間。我們可以直接 <code>hge-&gt;Texture_Lock()</code> 來進行得到兩個紋理的像素信息的首指針，如果兩個紋理其實只是一個紋理的話，則只需 <code>hge-&gt;Texture_Lock()</code> 一次，而另一個指針也只想 <code>hge-&gt;Texture_Lock</code> 即可，然後直接開始判斷。</p>
<p>　　下面獻上我這個函數的實現以及測試代碼和素材：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @brief   Test the collision by the "hot" texture</span><br><span class="line"> * @author  XadillaX</span><br><span class="line"> * @email   admin@xcoder.in</span><br><span class="line"> * @date    2011/10/18</span><br><span class="line"> * @http://xcoder.in</span><br><span class="line"> *</span><br><span class="line"> * @param spr1 The first sprite to test the collision</span><br><span class="line"> * @param x1 "x" of top-left corner of sprite 1</span><br><span class="line"> * @param y1 "y" of top-left corner of sprite 1</span><br><span class="line"> * @param spr2 The second sprite to test the collision</span><br><span class="line"> * @param x2 "x" of top-left corner of sprite 2</span><br><span class="line"> * @param y2 "y" of top-left corner of sprite 2</span><br><span class="line"> * @param hot1 The "hot" texture for sprite 1. It will be the default texture of spr1 if it equal to 0</span><br><span class="line"> * @param hot2 The "hot" texture for sprite 2. It will be the default texture of spr2 if it equal to 0</span><br><span class="line"> * @param airColor The color which considered of "air"</span><br><span class="line"> *</span><br><span class="line"> * @return if they are collided, return true</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCollision</span><span class="params">(hgeSprite* spr1, <span class="keyword">float</span> x1, <span class="keyword">float</span> y1, hgeSprite* spr2, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, HTEXTURE hot1 = <span class="number">0</span>, HTEXTURE hot2 = <span class="number">0</span>, DWORD airColor = <span class="number">0xffff00ff</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** Set the rect */</span></span><br><span class="line">    hgeRect r1, r2;</span><br><span class="line">    r1.Set(x1, y1, x1 + spr1-&gt;GetWidth(), y1 + spr1-&gt;GetHeight());</span><br><span class="line">    r2.Set(x2, y2, x2 + spr2-&gt;GetWidth(), y2 + spr2-&gt;GetHeight());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Test for the intersect of rectangles */</span></span><br><span class="line">    <span class="keyword">if</span>(r1.Intersect(&amp;r2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x[] = &#123; x1, x2, x1 + spr1-&gt;GetWidth(), x2 + spr2-&gt;GetWidth() &#125;;</span><br><span class="line">        <span class="keyword">int</span> y[] = &#123; y1, y2, y1 + spr1-&gt;GetHeight(), y2 + spr2-&gt;GetHeight() &#125;;</span><br><span class="line">        <span class="built_in">std</span>::sort(x, x + <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">std</span>::sort(y, y + <span class="number">4</span>);</span><br><span class="line">        hgeRect r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Set the rectangle area where the two rectangles intersected. */</span></span><br><span class="line">        r.Set(x[<span class="number">1</span>], y[<span class="number">1</span>], x[<span class="number">2</span>], y[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The start point of sprite1 and sprite2. (From the intersected area) */</span></span><br><span class="line">        <span class="keyword">int</span> sx1, sy1, sx2, sy2;</span><br><span class="line">        sx1 = x[<span class="number">1</span>] - x1;</span><br><span class="line">        sy1 = y[<span class="number">1</span>] - y1;</span><br><span class="line">        sx2 = x[<span class="number">1</span>] - x2;</span><br><span class="line">        sy2 = y[<span class="number">1</span>] - y2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Get the "hotspot" of texture */</span></span><br><span class="line">        HTEXTURE hTex1 = hot1;</span><br><span class="line">        HTEXTURE hTex2 = hot2;</span><br><span class="line">        <span class="keyword">if</span>(hTex1 == <span class="number">0</span>) hTex1 = spr1-&gt;GetTexture();</span><br><span class="line">        <span class="keyword">if</span>(hTex2 == <span class="number">0</span>) hTex2 = spr2-&gt;GetTexture();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> tx1, ty1, tw1, th1, tx2, ty2, tw2, th2;</span><br><span class="line">        <span class="keyword">int</span> w1 = hge-&gt;Texture_GetWidth(hTex1), w2 = hge-&gt;Texture_GetWidth(hTex2);</span><br><span class="line">        spr1-&gt;GetTextureRect(&amp;tx1, &amp;ty1, &amp;tw1, &amp;th1);</span><br><span class="line">        spr2-&gt;GetTextureRect(&amp;tx2, &amp;ty2, &amp;tw2, &amp;th2);</span><br><span class="line"></span><br><span class="line">        DWORD* color1 = <span class="keyword">new</span> DWORD[(x[<span class="number">2</span>] - x[<span class="number">1</span>]) * (y[<span class="number">2</span>] - y[<span class="number">1</span>])];</span><br><span class="line">        DWORD* color2 = <span class="keyword">new</span> DWORD[(x[<span class="number">2</span>] - x[<span class="number">1</span>]) * (y[<span class="number">2</span>] - y[<span class="number">1</span>])];</span><br><span class="line">        DWORD* color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Copy the effectivearea of texture 1 */</span></span><br><span class="line">        color = hge-&gt;Texture_Lock(hTex1, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y[<span class="number">2</span>] - y[<span class="number">1</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[<span class="number">2</span>] - x[<span class="number">1</span>]; j++)</span><br><span class="line">            &#123; </span><br><span class="line">                color1[i * (x[<span class="number">2</span>] - x[<span class="number">1</span>]) + j] = color[((<span class="keyword">int</span>)ty1 + sy1) * w1 + (<span class="keyword">int</span>)tx1 + sx1 + i * w1 + j];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        hge-&gt;Texture_Unlock(hTex1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Copy the effectivearea of texture 2 */</span></span><br><span class="line">        color = hge-&gt;Texture_Lock(hTex2, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y[<span class="number">2</span>] - y[<span class="number">1</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[<span class="number">2</span>] - x[<span class="number">1</span>]; j++) </span><br><span class="line">            &#123; </span><br><span class="line">                color2[i * (x[<span class="number">2</span>] - x[<span class="number">1</span>]) + j] = color[((<span class="keyword">int</span>)ty2 + sy2) * w2 + (<span class="keyword">int</span>)tx2 + sx2 + i * w1 + j]; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        hge-&gt;Texture_Unlock(hTex2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Test for the collision */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y[<span class="number">2</span>] - y[<span class="number">1</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[<span class="number">2</span>] - x[<span class="number">1</span>]; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(color1[i * (x[<span class="number">2</span>] - x[<span class="number">1</span>]) + j] != airColor &amp;&amp; color2[i * (x[<span class="number">2</span>] - x[<span class="number">1</span>]) + j] != airColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">delete</span> []color1;</span><br><span class="line">                    <span class="keyword">delete</span> []color2;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> []color1;</span><br><span class="line">        <span class="keyword">delete</span> []color2;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="src.rar">點擊下載</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　碰撞檢測始終是做2D遊戲中的一個熱點話題，我本人並沒有做過這類遊戲，所以一切只是理論而已，不過正打算做這麼個小遊戲練練手。</p>
<p>　　前幾天在HGE的羣裏看到有人突然問到如何判斷鼠標有沒有點到人（點到紋理的透明區域不算），從而引申出了碰撞檢測問題。</p>
<p]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="HGE" scheme="http://xcoder.in/tags/HGE/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[關於HGE的透明背景處理]]></title>
    <link href="http://xcoder.in/2011/09/13/hge-transparent-color/"/>
    <id>http://xcoder.in/2011/09/13/hge-transparent-color/</id>
    <published>2011-09-13T04:12:32.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　嘛 = = 在做那個項目的動畫預覽器的時候，因爲那引擎封裝得太麻煩了，於是自己基於HGE再移植一遍，發現其中有一個SetTransparentColor函數，即設置透明色。</p>
<p>　　拿出來分享一下吧。</p>
<p>　　其實方法很簡單，<code>HTEXTURE</code> 是紋理句柄，當你用 <code>Texture_Lock</code> 這個函數鎖定這個紋理的時候，它的返回值就是這個紋理在內存中的首地址。也就是說接下來的 width * height 個地址中就是這個紋理的每一個像素了。既然要設置透明色，只要對於每個像素判斷一下與運算一下就好了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HTEXTURE <span class="title">SetTransColor</span><span class="params">(HTEXTURE hTex, DWORD dwColor)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** 注：上面的dwColor代表的是RGB，不是ARGB */</span></span><br><span class="line">    <span class="keyword">static</span> HGE* hge = hgeCreate(HGE_VERSION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = hge-&gt;Texture_GetWidth(hTex) * hge-&gt;Texture_GetHeight(hTex);</span><br><span class="line">    DWORD* dwTex = hge-&gt;Texture_Lock(hTex);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((dwTex[i] &amp; <span class="number">0x00FFFFFF</span>) == dwColor)</span><br><span class="line">        &#123;</span><br><span class="line">            dwTex[i] &amp;= <span class="number">0x00FFFFFF</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hge-&gt;Texture_Unlock(hTex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hTex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　嘛，這樣一來，就透明瞭~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　嘛 = = 在做那個項目的動畫預覽器的時候，因爲那引擎封裝得太麻煩了，於是自己基於HGE再移植一遍，發現其中有一個SetTransparentColor函數，即設置透明色。</p>
<p>　　拿出來分享一下吧。</p>
<p>　　其實方法很簡單，<code>HTEXTU]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="HGE" scheme="http://xcoder.in/tags/HGE/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[關於遊戲資源包的更新、刪除]]></title>
    <link href="http://xcoder.in/2011/06/16/resource-pack/"/>
    <id>http://xcoder.in/2011/06/16/resource-pack/</id>
    <published>2011-06-15T17:20:31.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近除了忙各種各樣的期末考試、去西班牙的簽證，就是公司的那個韓國項目了。</p>
<p>　　我的任務基本完成——將原本單屏的遊戲改成三屏，完善整個 GUI系統 以及“劫持”了原遊戲中的一些邏輯，比如滾軸的排列可以任意控制等。由於原代碼中的GUI系統沒有文本編輯框，我還得自己寫一個。然而我對於IME的操作、GDI和DX的結合不是非常熟悉，所以還是參照了一下 <strong>ShowLong</strong> 所修改的微妙的平衡給HGE寫的中文解決方案。</p>
<p>　　完成了以上的任務之後，由於我的考試以及簽證問題以及我本身的任務差不多了，就把這個攤子就扔回公司去了。在交接的時候，老大給我派了一個任務，讓我來寫這個遊戲資源包的代碼。</p>
<p>　　原版遊戲代碼中有資源包代碼，但是寫得非常亂，於是需要我來寫一個新的文件結構、新的加密算法，然後仍然是“劫持”掉原代碼中的資源包加載函數。</p>
<p>　　在此之前，我拜讀了雲風的《<a href="http://blog.codingnow.com/2010/08/resource_pack.html" target="_blank" rel="external">遊戲資源的壓縮、打包與補丁更新</a>》，有了點靈感。</p>
<p>　　<strong>最主要的就是其刪除這一塊。爲了讓用戶在更新的時候減少大量的文件IO操作，做法就是減少文件內容的大幅度移動。</strong></p>
<p>　　而我便是參考了雲風大大的這個思想來寫我的文件包。首先因爲在遊戲中需要實時讀取，所以文件沒有壓縮，只是做了兩層加密處理，密鑰也是通過哈希得到的，所以每個文件的密鑰是不同的。</p>
<p>　　然後在文件索引的時候，我這裏是分了兩種索引：<strong>文件索引</strong>以及<strong>空塊索引</strong>。</p>
<p>　　所謂空塊索引就是：在文件包中刪除某一個文件的時候，不把後面的文件內容全部往前挪以覆蓋這一塊的內容、導致整個文件包在刪除文件之後的信息全部往前挪而產生的大量IO操作，而是對這一塊內容不作任何處理、把這一塊內容的索引從文件索引中移除並附加到空塊索引中以供以後新文件加入時所用，<strong>這樣就只產生了一點對於索引的文件IO更新</strong>，不過索引的更新充其量也就那麼點，相對於文件的操作來說只是九牛一毛，當然前提是這個索引是在整個文件包的最後。而在有新文件插入的時候，先在空塊索引中找有比新文件大的空塊，如果有的話就直接把這個文件插入到那個空塊中，然後更新一下文件索引以及空塊索引即可，這裏又少掉了一些IO操作。</p>
<p>　　正如雲風所說：</p>
<blockquote>
<p>如果新增加的文件較之小，就重複利用這個空間。如果利用不上，就浪費在那裏。這有點像內存管理算法，<strong>時間久了，資源包內會有一些空洞，但也是可以接受的。</strong></p>
</blockquote>
<p>　　接着就是資源包在遊戲中的使用了。在原先的遊戲代碼中是有判斷重複加載的代碼，也就是說把已加載的資源存到node裏，在之後再次需要加載這個資源（通過文件名判斷）就直接從node中去，這樣就少了很多內存開銷，尤其是當我把單屏改爲三屏之後，這樣的優化效果更爲明顯（否則相同的資源要加載三次，等於消耗了三倍的內存）。不得贊一下這05年開發的代碼，雖然是棒子。不過原遊戲代碼中的高耦合度讓我蛋疼。</p>
<p>　　想到以後這個資源包類要用到以後的一些項目，於是我自己也寫了一個Cache機制。就是在一個包中，當加載某個資源的時候，順便把這個資源的Buffer加到一個Cache中，當下次再需要用到這個資源的時候就直接從Cache中取就好了，實際上這就還是之前的代碼實現的功能，只不過我自己在這基礎上精簡了一下。最後寫一個ClearCache的函數能清除Cache，我這個資源包類就算完成了。</p>
<p>　　還有在獲取資源的時候，爲了防止內存突增，我的Buffer是一段一段獲取的，類似於Socket中的獲取消息一直到消息結束爲止。當然，每一段Buffer的大小是可以自己傳進去的。我這種以時間換空間的做法還沒自己實際測試過效果如何，只不過是自己想想可能會比較優罷了，因爲最近實在是太慢，這篇日誌還是考完了概率然後摸着黑地寫的。</p>
<p>　　我對文件系統本身不是非常瞭解，操作系統還沒考呢。所以我現在僅僅做到的是雲風九年前的一種設計，然後加上了原先代碼有的Cache機制而已。不過寫下這篇日誌來記錄我自己成長的足跡罷了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近除了忙各種各樣的期末考試、去西班牙的簽證，就是公司的那個韓國項目了。</p>
<p>　　我的任務基本完成——將原本單屏的遊戲改成三屏，完善整個 GUI系統 以及“劫持”了原遊戲中的一些邏輯，比如滾軸的排列可以任意控制等。由於原代碼中的GUI系統沒有文本編輯框，我還得]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="二進制文件" scheme="http://xcoder.in/tags/%E4%BA%8C%E9%80%B2%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="資源包" scheme="http://xcoder.in/tags/%E8%B3%87%E6%BA%90%E5%8C%85/"/>
    
      <category term="遊戲製作" scheme="http://xcoder.in/tags/%E9%81%8A%E6%88%B2%E8%A3%BD%E4%BD%9C/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[連連看核心算法小分享——1]]></title>
    <link href="http://xcoder.in/2011/05/16/lianlinakan-algorighm-i/"/>
    <id>http://xcoder.in/2011/05/16/lianlinakan-algorighm-i/</id>
    <published>2011-05-16T04:30:12.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>注：這篇文章我到現在也沒有填第二篇的坑。數據沒了重新從 Capture 裏面取出來，看看捨不得，於是把這篇文章也拿回來了。權當紀唸吧，以及當時和 <code>Kalxd</code> 的對話。</strong></p>
<h2 id="正文">正文</h2><p>　　剛忙完邀請賽，蹭了塊銅。剛纔在逛別人博客的時候看別人的文章，突然心血來潮想記一些東西。</p>
<p>　　連連看是我學HGE做的第一個小遊戲，素材用的是QQ的。時間大概是去年國慶吧。好吧，廢話不多說，就講講連連看怎麼找到能消的兩塊吧。</p>
<p>　　首先來回顧一下消方塊的規則，一共有三種可能性：</p>
<ol>
<li>直線消除（包括水平或者垂直）</li>
<li>一個拐角消除</li>
<li>兩個拐角消除</li>
</ol>
<p>　　嗯，接下去我們就針對每種可能性開始寫代碼。</p>
<p>　　首先講講一些定義：</p>
<p>　　座標結構體，這個結構體包含了x、y的值以及一些座標中常用的函數。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @brief 地圖座標結構體</span><br><span class="line"> *</span><br><span class="line"> * 地圖座標結構體，包含x軸值、y軸值</span><br><span class="line"> * 以及一些操作函數。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> CoorType &#123;</span><br><span class="line">    <span class="keyword">int</span> x;                                          <span class="comment">///&lt; x軸</span></span><br><span class="line">    <span class="keyword">int</span> y;                                          <span class="comment">///&lt; y軸</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 重載構造函數</span><br><span class="line">     * 將x、y值各初始化爲-1</span><br><span class="line">     */</span></span><br><span class="line">    CoorType()</span><br><span class="line">    &#123;</span><br><span class="line">        x = -<span class="number">1</span>, y = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 構造函數重載</span><br><span class="line">     * 將x、y各賦值爲b、a</span><br><span class="line">     * @param a 將要賦值的y軸數值</span><br><span class="line">     * @param b 將要賦值的x軸數值</span><br><span class="line">     */</span></span><br><span class="line">    CoorType(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        y = a, x = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 設置座標</span><br><span class="line">     * 將x、y各賦值爲b、a</span><br><span class="line">     * @param a 將要賦值的y軸數值</span><br><span class="line">     * @param b 將要賦值的x軸數值</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        y = a, x = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 運算符"+="重載</span><br><span class="line">     * 將此座標與另一座標相加</span><br><span class="line">     * @param &amp;a 另一座標</span><br><span class="line">     * @return 返回結果座標值</span><br><span class="line">     */</span></span><br><span class="line">    CoorType &amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> CoorType &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        y += a.y, x += a.x;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 重載運算符"!="</span><br><span class="line">     * 判斷與另一座標是否表示同一個值</span><br><span class="line">     * @param &amp;a 另一座標</span><br><span class="line">     * @return 返回布爾類型表示是否相等</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> CoorType &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y != a.y || x != a.x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判斷此座標是否合法</span><br><span class="line">     * 若出界則不合法</span><br><span class="line">     * @return 返回布爾類型表示是否合法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIll</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &gt;= <span class="number">0</span> &amp;&amp; x &gt;= <span class="number">0</span> &amp;&amp; y &lt; MAP_HEIGHT &amp;&amp; x &lt; MAP_WIDTH) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　然後是關於地圖數組的定義：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Map[MAP_HEIGHT][MAP_WIDTH];</span><br></pre></td></tr></table></figure>
<p>　　接着是路徑結構體：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @brief 路線結構體</span><br><span class="line"> *</span><br><span class="line"> * 合法路線結構體</span><br><span class="line"> * 儲存最多四個點（起點終點和兩個轉折點）</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> PointPath &#123;</span><br><span class="line">    <span class="keyword">bool</span> bExist;                                    <span class="comment">///&lt; 是否有路徑</span></span><br><span class="line">    <span class="keyword">int</span> Num;                                        <span class="comment">///&lt; 駐點個數</span></span><br><span class="line">    CoorType Points[<span class="number">4</span>];                             <span class="comment">///&lt; 各駐點</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　接着可以正式開始了。首先我們來想一下，哪些條件各符合上面三種情況的哪一種。對於一條直線的，顯然是x相等或者y相等；對於有一個轉折點的話，我們只需要判斷起點橫向畫線（或者縱向），然後終點縱向畫線（或者橫向），然後從起點到交點以及從交點到終點各可行不；對於兩個轉折點，其中一個轉折點的x或者y跟起點的x或者y相等，另一個轉折點跟終點的x或者y相等。於是這兩個轉折點就根據這樣的性質進行枚舉。因爲連連看的地圖比較小，所以這種O(n^2)的時間複雜度不礙事。</p>
<p>　　爲了方便，我們寫一個 <code>Abled(CoorType, CoorType, bool, bool);</code> 函數來進行判斷兩個點（當然兩點是在同一直線上的）是否有同路（即中間沒有東西擋着）。我們先放着這個Abled不管，先實現尋路過程吧。</p>
<p>　　我是用一個CMapSearch類來實現的，聲明如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @brief 地圖搜索類</span><br><span class="line"> *</span><br><span class="line"> * 根據指定地圖搜索出各合法路徑。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">class</span> CMapSearch</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Map[MAP_HEIGHT][MAP_WIDTH];                                             <span class="comment">///&lt; 地圖數據矩陣</span></span><br><span class="line">    PointPath dis[MAP_HEIGHT][MAP_WIDTH][MAP_HEIGHT][MAP_WIDTH];                <span class="comment">///&lt; 路徑數組</span></span><br><span class="line">    STLMap grap;                                                                <span class="comment">///&lt; STL映射</span></span><br><span class="line">    CoorType dir[<span class="number">4</span>];                                                            <span class="comment">///&lt; 常量座標增量</span></span><br><span class="line">    PointPath Hint;                                                             <span class="comment">///&lt; 提示時用的合法路徑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 兩點尋徑</span><br><span class="line">     *</span><br><span class="line">     * 對(x1, y1)和(x2, y2)進行尋徑</span><br><span class="line">     * @param x1 第一個座標的x軸</span><br><span class="line">     * @param y1 第一個座標的y軸</span><br><span class="line">     * @param x2 第二個座標的x軸</span><br><span class="line">     * @param y2 第二個座標的y軸</span><br><span class="line">     * @return 返回一個路線結構體的值，若不存在路徑，則結構體的bExist爲假</span><br><span class="line">     * @see Abled</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function">PointPath <span class="title">DoSearch</span><span class="params">(<span class="keyword">int</span> y1, <span class="keyword">int</span> x1, <span class="keyword">int</span> y2, <span class="keyword">int</span> x2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 構造函數</span><br><span class="line">     *</span><br><span class="line">     * @param _Map[][Map_Width] 地圖矩陣</span><br><span class="line">     */</span></span><br><span class="line">    CMapSearch(<span class="keyword">int</span> _Map[][MAP_WIDTH]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 析構函數</span><br><span class="line">     */</span></span><br><span class="line">    ~CMapSearch(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 載入地圖</span><br><span class="line">     * 從矩陣中載入地圖到對象</span><br><span class="line">     *</span><br><span class="line">     * @param _Map[][Map_Width] 地圖矩陣</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadMap</span><span class="params">(<span class="keyword">int</span> _Map[][MAP_WIDTH])</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 搜索地圖</span><br><span class="line">     * 對整個地圖進行搜索每兩個相同方塊之間的路徑</span><br><span class="line">     *</span><br><span class="line">     * @return 如果存在至少一條路徑則返回真，否則爲假，用於是否重列</span><br><span class="line">     * @see CreateSTLMap</span><br><span class="line">     * @see DoSearch</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 創建map映射</span><br><span class="line">     * 創建一個方塊ID的映射，對每個ID創建一條的該ID的方塊在地圖中的各座標的鏈表</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateSTLMap</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 判斷是否有障礙</span><br><span class="line">     * 對於a、b兩座標（在同一直線）進行判斷期間是否有方塊障礙而導致不能連線</span><br><span class="line">     *</span><br><span class="line">     * @param a 座標a（頭座標）</span><br><span class="line">     * @param b 座標b（尾座標）</span><br><span class="line">     * @param head 若包括頭座標則爲true，否則爲false</span><br><span class="line">     * @param tail 若包括尾座標則爲true，否則爲false</span><br><span class="line">     * @return 若有障礙則返回false，否則爲true</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Abled</span><span class="params">(CoorType a, CoorType b, <span class="keyword">bool</span> head = <span class="literal">false</span>, <span class="keyword">bool</span> tail = <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 得到路徑</span><br><span class="line">     * 得到兩個座標的連線具體路徑</span><br><span class="line">     *</span><br><span class="line">     * @param y1 第一個座標的y軸</span><br><span class="line">     * @param x1 第一個座標的x軸</span><br><span class="line">     * @param y2 第二個座標的y軸</span><br><span class="line">     * @param x2 第二個座標的x軸</span><br><span class="line">     * @return 返回一個路線結構體，表示該兩個座標直接的路線</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function">PointPath <span class="title">GetPath</span><span class="params">(<span class="keyword">int</span> y1, <span class="keyword">int</span> x1, <span class="keyword">int</span> y2, <span class="keyword">int</span> x2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 得到提示路徑</span><br><span class="line">     * 得到一條提示的路徑的相應兩個方塊</span><br><span class="line">     *</span><br><span class="line">     * @param &amp;a 接受第一個方塊ID的變量</span><br><span class="line">     * @param &amp;b 接受第二個方塊ID的變量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetRandomHint</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>　　然後我這個分享裏所講的算法就是DoSearch和Abled函數了，因爲其它函數就是用於“提示”道具的。在DoSearch中我們先定義兩個臨時變量，一個是返回值（一個PointPath），四個座標變量：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PointPath ans;</span><br><span class="line">CoorType a(y1, x1), b(y2, x2), c, d;</span><br></pre></td></tr></table></figure>
<p>　　其中a、b表示起點和終點，c、d表示可能用到的兩個轉折點。</p>
<p>　　首先我們先來判斷直線情況吧，這種情況比較簡單：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是直線</span></span><br><span class="line"><span class="keyword">if</span>(a.x == b.x || a.y == b.y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Abled(a, b, <span class="literal">true</span>, <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ans.bExist = <span class="literal">true</span>;</span><br><span class="line">        ans.Num = <span class="number">2</span>;</span><br><span class="line">        ans.Points[<span class="number">0</span>] = a, ans.Points[<span class="number">1</span>] = b;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　對於這種情況，我們只需直接判斷a、b直接有沒有通路就好，如果有通路我們就將結果記錄到ans中並返回即可。</p>
<p>　　而有一個轉折點、兩個轉折點的情況以及Abled函數將在下一篇文章中小分享一下。</p>
<h2 id="回憶時間">回憶時間</h2><p>　　然後下面就是在這篇文章裏面我跟 <code>Kalxd</code> 的對話了，想想現在真是滄海桑田啊。</p>
<p>　　CSS 樣式早已經不在了，截圖裏面是一篇白板</p>
<p><img src="comment.png" alt="評論回憶"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>注：這篇文章我到現在也沒有填第二篇的坑。數據沒了重新從 Capture 裏面取出來，看看捨不得，於是把這篇文章也拿回來了。權當紀唸吧，以及當時和 <code>Kalxd</code> 的對話。</strong></p>
<h2 id="正文">正文</h]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="HGE" scheme="http://xcoder.in/tags/HGE/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的編程生涯中第一個商業遊戲]]></title>
    <link href="http://xcoder.in/2011/04/25/my-first-game/"/>
    <id>http://xcoder.in/2011/04/25/my-first-game/</id>
    <published>2011-04-25T04:30:53.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近網之遊在和棒子一起開發一個類似賭博的網遊（別牆我，做好是給棒子自己玩的），然後機緣巧合，他們的引擎是結合了MFC以及從我用過的幾個引擎之一移植過來的。就引擎本身而言很強大，然後我又有一點小經驗，所以網之遊的柯總便也讓我加入了開發行列。之前也是託網之遊的福讓我研究了一番網狐的平臺。</p>
<p>　　開發過程中學到了不少底層的東西。我的任務是先將遊戲的單屏給弄成三份，以三個邏輯來實現。由於工程耦合性太高，原程序員是C語言出生的，造成了我修改工程一定程度上的麻煩。先自己寫了個Wrapper類來包含三個SceneGAME，然後一次性將三個SceneGAME渲染到目標上。這樣改了一下之後，有兩百多個錯誤。不知道其它遊戲是不是也有這樣的特點，因爲這是我開發的第一款遊戲，所以也沒經驗。</p>
<p>　　不過幸好最後還是讓我給完成了這第一個quest。接着是添加GUI，就是現在正在做的。還有就是完全分離三塊分屏的邏輯代碼。讓我這個大二學生興奮的是，這個遊戲完成之後，是會有獎金的。這個可是讓我這個窮孩子兩眼放光莫。YY一下到底會有多少呢，我本身也只是過去見識一下真正的工程而已，壓根沒想過money這事。</p>
<p>　　今天，額好吧，以現在的時間來說應該是昨天了，一個韓國人以及另一箇中國公司的人過來驗收我們現在的進度。我打開自己電腦裏編譯好的可執行文件，心中那種自豪感油然而生啊，畢竟我還是newbie，當然是有些小興奮啊。期間那箇中國公司的人說要趕在韓國人那邊任務完成之前完成，這樣好體現我們自己程序員不比他們差。無形之間的較量啊，表示鴨梨很大。據說他們那邊現在遇到小問題了，我們超前的可能性還是蠻大的，接下去我就是要卯足勁來分離邏輯以及設置GUI了。柯總那邊已經把網絡通訊方面差不多完成了，我這一塊做好，一對接，差不多能在五月初交工了。</p>
<p>　　最近還是比較忙啊，要學車，有個寧工基金會網站、港城關係研究所網站以及國際港口與物流中心網站，然後團區委那邊的志願者網站還有點小尾巴，浙江能源集團那個用C#寫的員工牆完工了還不知道那邊怎麼說，接着應該還有一個姜老師那邊的站子。都堆在一坨了。不過最近最要緊的還是這個遊戲以及基金會網站以及去西班牙實習的一些相關事宜了。不管了，先睡覺。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近網之遊在和棒子一起開發一個類似賭博的網遊（別牆我，做好是給棒子自己玩的），然後機緣巧合，他們的引擎是結合了MFC以及從我用過的幾個引擎之一移植過來的。就引擎本身而言很強大，然後我又有一點小經驗，所以網之遊的柯總便也讓我加入了開發行列。之前也是託網之遊的福讓我研究了一]]>
    </summary>
    
      <category term="牢騷" scheme="http://xcoder.in/tags/%E7%89%A2%E9%A8%B7/"/>
    
      <category term="網之遊" scheme="http://xcoder.in/tags/%E7%B6%B2%E4%B9%8B%E9%81%8A/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="遊戲開發" scheme="http://xcoder.in/tags/%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++對象工廠模式：ObjectFactory學習筆記]]></title>
    <link href="http://xcoder.in/2010/11/17/objectfactory-learning/"/>
    <id>http://xcoder.in/2010/11/17/objectfactory-learning/</id>
    <published>2010-11-17T07:49:45.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　對象工廠，顧名思義，就是產生對象的一個“工廠”。根據傳入的一個參數而產生相應的不同種類的對象。</p>
<p>　　用於批量生成同一個父類的不同子類的對象時用到。</p>
<p>　　本學習筆記基於Singleton（單件模式）基礎上進行擴展。</p>
<p>　　看《C++單件模式：Singleton學習筆記》請點擊<a href="/2010/11/13/singleton-learning/">鏈接</a>。</p>
<p>　　對於工廠模式，網上有很多不同的實現方法。我這裏是一個HGE的RPG Demo中所用的，這段代碼本身寫的非常的好，開始好些語句沒看懂，雖然就這麼幾句話。花了一點時間去研究了其代碼，並自己重新實現了一遍，加上了通俗易懂的註釋。</p>
<p>　　工廠類以模板形式實現，基於Singleton：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**--------------------------------</span><br><span class="line"> * 對象工廠模式(Object Factory)</span><br><span class="line"> *</span><br><span class="line"> * Code by XadillaX</span><br><span class="line"> * http://www.xcoder.in</span><br><span class="line"> * Created at 2010-11-17 1:33</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> OBJECTFACTORY_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> OBJECTFACTORY_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"../單件模式/Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> ObjectFactory : <span class="keyword">public</span> Singleton&lt;ObjectFactory&lt;T&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T* (*tCreator)();                               <span class="comment">///&lt; 重定義對象生成函數指針</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, tCreator&gt; tCreatorMap;    <span class="comment">///&lt; 對象生成函數指針map</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 註冊新“生產車間”</span><br><span class="line">     * 將生成對象的函數加入對象工廠</span><br><span class="line">     *</span><br><span class="line">     * @param *name 類名稱</span><br><span class="line">     * @param procedure “生產”對象的函數</span><br><span class="line">     * @return 是否成功註冊</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Register</span><span class="params">(<span class="keyword">char</span> *type, tCreator procedure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @brief 找到“生產車間”</span><br><span class="line">     * 根據傳入的類名返回相應的新對象的生成函數</span><br><span class="line">     *</span><br><span class="line">     * @param &amp;type 類名</span><br><span class="line">     * @return 相應的新對象的生成函數</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function">T* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/** “生產車間”映射 */</span></span><br><span class="line">    tCreatorMap _map;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> ObjectFactory&lt;T&gt;::Register(<span class="keyword">char</span> *type, tCreator procedure)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tmp</span><span class="params">(type)</span></span>;</span><br><span class="line">    <span class="comment">/** 將新函數加入map中 */</span></span><br><span class="line">    _map[tmp] = procedure;</span><br><span class="line">    <span class="keyword">return</span> _map[tmp];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">T* ObjectFactory&lt;T&gt;::Create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** 在映射中找到相應“生產車間” */</span></span><br><span class="line">    tCreatorMap::iterator iter = _map.find(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 檢測“車間”是否存在 */</span></span><br><span class="line">    <span class="keyword">if</span>(iter != _map.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/** 讓返回值爲相應的“生產車間” */</span></span><br><span class="line">        tCreator r = iter-&gt;second;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 返回“生產車間” */</span></span><br><span class="line">        <span class="keyword">return</span> r();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>　　以上就是基於單件模式而實現的工廠模式了。</p>
<p>　　在樣例中，我建立了一個基類Base，然後用A和B來繼承它。</p>
<p>　　在一個for循環中，交替建立了A對象和B對象。這只是一個Demo，看不出有什麼方便的，感覺用一個if來各自生成就好了，就像</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(type == <span class="string">"A"</span>) p = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">else</span> p = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>
<p>　　<strong>當然，上面也是一種方法。但是，試想一下，我們將要創建的A、B、C、D、E、F、G類放到一個配置文件中，然後我們從配置文件中讀取這些數據並創建相應的對象，並且這些對象的順序是打亂的，你就要有n個if來判斷了，而且擴展性不高。用一個對象工廠進行封裝的話，儼然形成了一個靜而有序的生產工廠，有秩序地管理着不同的對象車間，不覺得這是一件非常美妙的事情麼？</strong></p>
<p>　　好了，話不多說，直接上Demo。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"ObjectFactory.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/** 基類 */</span></span><br><span class="line"><span class="keyword">class</span> Base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Base類及其子類的對象工廠 */</span></span><br><span class="line"><span class="keyword">typedef</span> ObjectFactory&lt;Base&gt; BaseFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base()&#123;&#125;;</span><br><span class="line">    ~Base()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"An A object created."</span> &lt;&lt; endl; &#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B()&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A B object Created."</span> &lt;&lt; endl; &#125;</span><br><span class="line">    ~B();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 對象A的“生產車間” */</span></span><br><span class="line"><span class="function">Base* <span class="title">ACreator</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 對象B的“生產車間” */</span></span><br><span class="line"><span class="function">Base* <span class="title">BCreator</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @brief 主函數</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** 將A、B的“生產車間”註冊到對象工廠中 */</span></span><br><span class="line">    <span class="keyword">bool</span> AFlag = BaseFactory::Instance().Register(<span class="string">"A"</span>, ACreator);</span><br><span class="line">    <span class="keyword">bool</span> BFlag = BaseFactory::Instance().Register(<span class="string">"B"</span>, BCreator);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 若註冊失敗則退出 */</span></span><br><span class="line">    <span class="keyword">if</span>(!AFlag || !BFlag) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Base *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> type = (i % <span class="number">2</span>) ? <span class="built_in">string</span>(<span class="string">"A"</span>) : <span class="built_in">string</span>(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** p用相應“生產車間”進行生產 */</span></span><br><span class="line">        p = BaseFactory::Instance().Create(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　對象工廠，顧名思義，就是產生對象的一個“工廠”。根據傳入的一個參數而產生相應的不同種類的對象。</p>
<p>　　用於批量生成同一個父類的不同子類的對象時用到。</p>
<p>　　本學習筆記基於Singleton（單件模式）基礎上進行擴展。</p>
<p>　　看《C++]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="設計模式" scheme="http://xcoder.in/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++單件模式：Singleton學習筆記]]></title>
    <link href="http://xcoder.in/2010/11/13/singleton-learning/"/>
    <id>http://xcoder.in/2010/11/13/singleton-learning/</id>
    <published>2010-11-13T07:44:15.000Z</published>
    <updated>2016-07-12T11:26:19.000Z</updated>
    <content type="html"><![CDATA[<p>　　單件模式（Singleton）是一種用於確保整個應用程序中只有一個類實例且這個實例所佔資源在整個應用程序中是共享時的程序設計方法（根據實際情況，可能需要幾個類實例）。在某些情況下，這種程序設計方法是很有用處的。</p>
<p>　　在小小地學習了一下C++的單件模式之後，突然聯想到PHP的ThinkPHP的MVC框架，覺得這就是一個單件模式的很好實例吧？</p>
<p>　　我上次在PUDN上載了一個HGE的RPG Demo，裏面就用了Singleton模式還有ObjectFactory模式寫的。沒看懂，於是問了谷歌。</p>
<blockquote>
<p>Singleton可以說是《Design Pattern》中最簡單也最實用的一個設計模式。那麼，什麼是Singleton？<br>顧名思義，Singleton就是確保一個類只有唯一的一個實例。Singleton主要用於對象的創建，這意味着，如果某個類採用了Singleton模式，則在這個類被創建後，它將有且僅有一個實例可供訪問。很多時候我們都會需要Singleton模式，最常見的比如我們希望整個應用程序中只有一個連接數據庫的Connection實例；又比如要求一個應用程序中只存在某個用戶數據結構的唯一實例。我們都可以通過應用Singleton模式達到目的。</p>
<p>一眼看去，Singleton似乎有些像全局對象。但是實際上，並不能用全局對象代替Singleton模式，這是因爲：其一，大量使用全局對象會使得程序質量降低，而且有些編程語言例如C#，根本就不支持全局變量。其二，全局對象的方法並不能阻止人們將一個類實例化多次：除了類的全局實例外，開發人員仍然可以通過類的構造函數創建類的多個局部實例。而Singleton模式則通過從根本上控制類的創建，將”保證只有一個實例”這個任務交給了類本身，開發人員不可能再有其它途徑得到類的多個實例。這一點是全局對象方法與Singleton模式的根本區別。</p>
<p style="text-align: right;">——摘自百度百科（我不是有意在谷歌找百度的）</p>

</blockquote>
<p>　　我在看了這個RPG Demo的Pattern裏的Singleton之後，仿照着自己寫了一個最簡單的Singleton模板實例。</p>
<p>　　<strong><em>思想就是，在Singleton中建立一個靜態對象，然後以後就用 <code>Singleton::Instance()</code> 來調用這個靜態對象。</em></strong></p>
<p>　　<strong><em>而作爲模板就是可以 <code>class A : public Singleton</code> 來讓A繼承Singleton的屬性，那麼我們就可以直接用<br><code>A::Instance()</code> 來訪問A這個靜態對象了。這個就是這段Singleton代碼的主要思想了。</em></strong></p>
<p>　　先是建立了一個空工程，往裏面放了：</p>
<p>　　Singleton.h</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> SINGLETON_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SINGLETON_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> Singleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T&amp; <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Singleton()&#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 防止拷貝複製</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton(<span class="keyword">const</span> Singleton &amp;);</span><br><span class="line">    Singleton &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Singleton &amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">T&amp; Singleton::Instance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** 建立一個靜態對象 */</span></span><br><span class="line">    <span class="keyword">static</span> T instance;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>　　TestSingleton.h</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> TESTSINGLETON_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> TESTSINGLETON_H</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"Singleton.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TestSingleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 從Singleton繼承本類 */</span></span><br><span class="line"><span class="keyword">class</span> TestSingleton : <span class="keyword">public</span> Singleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TestSingleton(<span class="keyword">void</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~TestSingleton(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddCount</span><span class="params">()</span></span>&#123; count++; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CoutCount</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; count &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>　　TestSingleton.cpp</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"TestSingleton.h"</span></span></span><br><span class="line"></span><br><span class="line">TestSingleton::TestSingleton(<span class="keyword">void</span>)</span><br><span class="line">: count(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TestSingleton::~TestSingleton(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"TestSingleton.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/** 單件對象count值加1 */</span></span><br><span class="line">        TestSingleton::Instance().AddCount();</span><br><span class="line">        <span class="comment">/** 輸出此單件對象的count值 */</span></span><br><span class="line">        TestSingleton::Instance().CoutCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　單件模式（Singleton）是一種用於確保整個應用程序中只有一個類實例且這個實例所佔資源在整個應用程序中是共享時的程序設計方法（根據實際情況，可能需要幾個類實例）。在某些情況下，這種程序設計方法是很有用處的。</p>
<p>　　在小小地學習了一下C++的單件模式之後，]]>
    </summary>
    
      <category term="C++" scheme="http://xcoder.in/tags/C/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/tags/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
      <category term="設計模式" scheme="http://xcoder.in/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="老博客備份歸檔" scheme="http://xcoder.in/categories/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%82%99%E4%BB%BD%E6%AD%B8%E6%AA%94/"/>
    
  </entry>
  
</feed>
